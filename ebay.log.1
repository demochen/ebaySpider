throwQueryException() : no errors
HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_, recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SELLERNAME
parse() - HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@2617a
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select count(*) as col_0_0_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SUCCESSSELL
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellerName'
    |     \-[EQ] Node: '='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'attitude'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'attitude'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : attitude -> org.hibernate.type.StringType@2617a
Resolved : feedback.attitude -> feedback0_.ATTITUDE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( feedback0_.ATTITUDE feedback0_.FEEDBACK_ID attitude ) ? ) ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[DOT] DotNode: 'feedback0_.ATTITUDE' {propertyName=attitude,dereferenceType=ALL,propertyPath=attitude,path=feedback.attitude,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |  \-[IDENT] IdentNode: 'attitude' {originalText=attitude}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=attitude, expectedType=org.hibernate.type.StringType@2617a}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.ATTITUDE=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: GET_PASSWORD_BY_NAME
parse() - HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'user'
    |        \-[IDENT] Node: 'passWord'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@2617a
Resolved : user.passWord -> user0_.PassWord
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@2617a
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( user0_.PassWord user0_.USER_ID passWord ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
    |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
    |  |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
SQL: select user0_.PassWord as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: MAX_PRICE
parse() - HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select max(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECT_RATES_EXITS
parse() - HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@2617a
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select count(*) as col_0_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_TOTALSELL
parse() - HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'sum'
    |        \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellerName'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'sum'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
SQL: select sum(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: SELECT_ALLITEMS
parse() - HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'dto'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@2617a
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} itemdto0_.Id ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id as Id1_1_' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  \-[SQL_TOKEN] SqlFragment: 'itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select itemdto0_.Id as Id1_1_, itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SPECIAL_MAX_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'max'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@2617a
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@2617a
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'max'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select max(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME_PASSWORD
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'user'
          |  |  \-[IDENT] Node: 'userName'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'userName'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'user'
             |  \-[IDENT] Node: 'passWord'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'passWord'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@2617a
Resolved : user.userName -> user0_.UserName
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@2617a
Resolved : user.passWord -> user0_.PassWord
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( and ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ( = ( user0_.PassWord user0_.USER_ID passWord ) ? ) ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@2617a}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
             |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
             |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
             \-[NAMED_PARAM] ParameterNode: '?' {name=passWord, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=? and user0_.PassWord=?
throwQueryException() : no errors
Checking 0 named SQL queries
Statistics initialized [enabled=false]
Initializing EntityManagerFactoryRegistry : org.hibernate.ejb.internal.EntityManagerFactoryRegistry@ec75a3
Registering EntityManagerFactory: ePU 
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'entityManagerFactory'
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1b52702: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
Returning cached instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating shared instance of singleton bean 'competitorcontroller'
Creating instance of bean 'competitorcontroller'
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Eagerly caching bean 'competitorcontroller' to allow for resolving potential circular references
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Creating shared instance of singleton bean 'sellerService'
Creating instance of bean 'sellerService'
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Eagerly caching bean 'sellerService' to allow for resolving potential circular references
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Creating shared instance of singleton bean 'ebayRatesDao'
Creating instance of bean 'ebayRatesDao'
Registered injected element on class [com.ebay.dao.seller.RatesDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Eagerly caching bean 'ebayRatesDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayRatesDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayRatesDao'
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Creating shared instance of singleton bean 'ebaySellerDao'
Creating instance of bean 'ebaySellerDao'
Registered injected element on class [com.ebay.dao.seller.SellerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Eagerly caching bean 'ebaySellerDao' to allow for resolving potential circular references
Processing injected method of bean 'ebaySellerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebaySellerDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddRates' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'sellerService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.seller.SellerServiceImpl@12313f1]
Finished creating instance of bean 'sellerService'
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Creating shared instance of singleton bean 'feedbackService'
Creating instance of bean 'feedbackService'
Registered injected element on class [com.ebay.service.feedback.FeedbackServiceImpl]: ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Eagerly caching bean 'feedbackService' to allow for resolving potential circular references
Processing injected method of bean 'feedbackService': ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Creating shared instance of singleton bean 'ebayfeedbackdao'
Creating instance of bean 'ebayfeedbackdao'
Registered injected element on class [com.ebay.dao.feedback.FeedBackDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Eagerly caching bean 'ebayfeedbackdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayfeedbackdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddFeedbacks' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'feedbackService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.feedback.FeedbackServiceImpl@1dfe402]
Finished creating instance of bean 'feedbackService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'competitorcontroller'
Creating shared instance of singleton bean 'itemcontroller'
Creating instance of bean 'itemcontroller'
Registered injected element on class [com.ebay.controller.ItemController]: ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Eagerly caching bean 'itemcontroller' to allow for resolving potential circular references
Processing injected method of bean 'itemcontroller': ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Creating shared instance of singleton bean 'itemService'
Creating instance of bean 'itemService'
Registered injected element on class [com.ebay.service.item.ItemServiceImpl]: ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Eagerly caching bean 'itemService' to allow for resolving potential circular references
Processing injected method of bean 'itemService': ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Creating shared instance of singleton bean 'ebayitemdao'
Creating instance of bean 'ebayitemdao'
Registered injected element on class [com.ebay.dao.item.ItemDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Eagerly caching bean 'ebayitemdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayitemdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayitemdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'addItem' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'itemService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.item.ItemServiceImpl@eb9c5b]
Finished creating instance of bean 'itemService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'itemcontroller'
Creating shared instance of singleton bean 'loginController'
Creating instance of bean 'loginController'
Registered injected element on class [com.ebay.controller.LoginController]: ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Eagerly caching bean 'loginController' to allow for resolving potential circular references
Processing injected method of bean 'loginController': ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Creating shared instance of singleton bean 'userService'
Creating instance of bean 'userService'
Registered injected element on class [com.ebay.service.user.UserServiceImpl]: ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Eagerly caching bean 'userService' to allow for resolving potential circular references
Processing injected method of bean 'userService': ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Creating shared instance of singleton bean 'ebayUserDao'
Creating instance of bean 'ebayUserDao'
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Eagerly caching bean 'ebayUserDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayUserDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Processing injected method of bean 'ebayUserDao': ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Creating shared instance of singleton bean 'ebayEntityConfiguration'
Creating instance of bean 'ebayEntityConfiguration'
Found init method on class [com.ebay.common.persistence.EntityConfiguration]: public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Registered init method on class [com.ebay.common.persistence.EntityConfiguration]: org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement@a46c92e
Registered injected element on class [com.ebay.common.persistence.EntityConfiguration]: ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Eagerly caching bean 'ebayEntityConfiguration' to allow for resolving potential circular references
Processing injected method of bean 'ebayEntityConfiguration': ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Creating shared instance of singleton bean 'eMergedEntityContexts'
Creating instance of bean 'eMergedEntityContexts'
Eagerly caching bean 'eMergedEntityContexts' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Invoking init method on bean 'ebayEntityConfiguration': public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from class path resource [applicationContext-entity.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Loading bean definitions
Refreshing org.springframework.context.support.GenericXmlApplicationContext@38c9df: startup date [Thu May 08 22:12:22 CST 2014]; root of context hierarchy
Bean factory for org.springframework.context.support.GenericXmlApplicationContext@38c9df: org.springframework.beans.factory.support.DefaultListableBeanFactory@84d604: defining beans []; root of factory hierarchy
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@195540d]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@c12b86]
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@84d604: defining beans []; root of factory hierarchy
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@1d2e131]
Returning cached instance of singleton bean 'lifecycleProcessor'
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayEntityConfiguration'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayUserDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'userService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'loginController'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Returning cached instance of singleton bean 'feedbackService'
Returning cached instance of singleton bean 'itemService'
Returning cached instance of singleton bean 'sellerService'
Returning cached instance of singleton bean 'userService'
Creating shared instance of singleton bean 'eCustomerDao'
Creating instance of bean 'eCustomerDao'
Registered injected element on class [com.ebay.dao.customer.CustomerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Eagerly caching bean 'eCustomerDao' to allow for resolving potential circular references
Processing injected method of bean 'eCustomerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eCustomerDao'
Returning cached instance of singleton bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'ebayitemdao'
Returning cached instance of singleton bean 'ebayRatesDao'
Returning cached instance of singleton bean 'ebaySellerDao'
Returning cached instance of singleton bean 'ebayUserDao'
Returning cached instance of singleton bean 'ebayEntityConfiguration'
Creating shared instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean 'mvcContentNegotiationManager'
Eagerly caching bean 'mvcContentNegotiationManager' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mvcContentNegotiationManager'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean '(inner bean)'
Creating shared instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Eagerly caching bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)'
No property editor [org.springframework.web.context.request.WebRequestInterceptorEditor] found for type org.springframework.web.context.request.WebRequestInterceptor according to 'Editor' suffix convention
Eagerly caching bean 'org.springframework.web.servlet.handler.MappedInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Looking for request mappings in application context: Root WebApplicationContext: startup date [Thu May 08 22:12:15 CST 2014]; root of context hierarchy
Mapped "{[/selectPring],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.price.Pring> com.ebay.controller.CompetitorController.getPricing(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectDayInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.DaySellDto> com.ebay.controller.CompetitorController.selectDayInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectRates],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.RecentFeedbackratings com.ebay.controller.CompetitorController.selectRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/catchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.CompetitorController.CatchSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
Mapped "{[/selectSingleSeller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.SellerDto com.ebay.controller.CompetitorController.selectDtoSingleSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectWeekInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.WeekSellInfo> com.ebay.controller.CompetitorController.selectWeekInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.Item> com.ebay.controller.CompetitorController.selectSpecialItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.Seller com.ebay.controller.CompetitorController.selectCompetitor(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectMonthInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.SellerInfoDto> com.ebay.controller.CompetitorController.selectMonthInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectFeedBack],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.feedback.FeedBack> com.ebay.controller.CompetitorController.selectAllFeedBack(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/getRecomendPrices],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.item.RecomendPrice com.ebay.controller.ItemController.selectRprice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.ItemDto> com.ebay.controller.ItemController.selectItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/competitor/competitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/product/product],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.product(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/sendemail],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.getEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/login/controller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.validateLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/forgetpassword],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.forgetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/ebay || /],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.Login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#1'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#1'
Creating instance of bean '(inner bean)#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#2'
Creating instance of bean '(inner bean)#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#3'
Creating instance of bean '(inner bean)#4'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#4'
Creating instance of bean '(inner bean)#5'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#5'
Creating instance of bean '(inner bean)#6'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#6'
Creating instance of bean '(inner bean)#7'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#7'
Creating instance of bean '(inner bean)#8'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#8'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Looking for controller advice: Root WebApplicationContext: startup date [Thu May 08 22:12:15 CST 2014]; root of context hierarchy
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#9'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#9'
Creating instance of bean '(inner bean)#10'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#10'
Creating instance of bean '(inner bean)#11'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#11'
Creating instance of bean '(inner bean)#12'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#12'
Creating instance of bean '(inner bean)#13'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#13'
Creating instance of bean '(inner bean)#14'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#14'
Creating instance of bean '(inner bean)#15'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#15'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Looking for exception mappings: Root WebApplicationContext: startup date [Thu May 08 22:12:15 CST 2014]; root of context hierarchy
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Eagerly caching bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: Root WebApplicationContext: startup date [Thu May 08 22:12:15 CST 2014]; root of context hierarchy
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Rejected bean name 'competitorcontroller': no URL paths identified
Rejected bean name 'itemcontroller': no URL paths identified
Rejected bean name 'loginController': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletContext': no URL paths identified
Rejected bean name 'contextParameters': no URL paths identified
Rejected bean name 'contextAttributes': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Mapped URL path [/img/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Mapped URL path [/css/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Mapped URL path [/js/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Mapped URL path [/plugins/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Returning cached instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: Root WebApplicationContext: startup date [Thu May 08 22:12:15 CST 2014]; root of context hierarchy
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Root mapping to handler 'loginController'
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletContext': no URL paths identified
Rejected bean name 'contextParameters': no URL paths identified
Rejected bean name 'contextAttributes': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0' to allow for resolving potential circular references
Creating shared instance of singleton bean 'mappingJacksonHttpMessageConverter'
Creating instance of bean 'mappingJacksonHttpMessageConverter'
Eagerly caching bean 'mappingJacksonHttpMessageConverter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'entityManagerFactory'
Creating shared instance of singleton bean 'templateResolver'
Creating instance of bean 'templateResolver'
Eagerly caching bean 'templateResolver' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateResolver'
Creating shared instance of singleton bean 'templateEngine'
Creating instance of bean 'templateEngine'
Eagerly caching bean 'templateEngine' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateResolver'
Invoking afterPropertiesSet() on bean with name 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateEngine'
Creating shared instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Eagerly caching bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating shared instance of singleton bean 'transactionManager'
Creating instance of bean 'transactionManager'
Eagerly caching bean 'transactionManager' to allow for resolving potential circular references
Returning cached instance of singleton bean 'entityManagerFactory'
Invoking afterPropertiesSet() on bean with name 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating shared instance of singleton bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Eagerly caching bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Finished creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@1a71dc3]
Returning cached instance of singleton bean 'lifecycleProcessor'
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletConfigInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletContextInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.liveBeansView.mbeanDomain]
Converted JNDI name [java:comp/env/spring.liveBeansView.mbeanDomain] not found - trying original name [spring.liveBeansView.mbeanDomain]. javax.naming.NameNotFoundException; remaining name 'env/spring.liveBeansView.mbeanDomain'
Looking up JNDI object with name [spring.liveBeansView.mbeanDomain]
JNDI lookup for name [spring.liveBeansView.mbeanDomain] threw NamingException with message: null. Returning null.
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Published root WebApplicationContext as ServletContext attribute with name [org.springframework.web.context.WebApplicationContext.ROOT]
Root WebApplicationContext: initialization completed in 9424 ms
Initializing new StandardServletEnvironment
Adding [servletConfigInitParams] PropertySource with lowest search precedence
Adding [servletContextInitParams] PropertySource with lowest search precedence
Adding [jndiProperties] PropertySource with lowest search precedence
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]
Initializing filter 'encodingFilter'
Filter 'encodingFilter' configured successfully
Initializing servlet 'dispatcher'
Initializing new StandardServletEnvironment
Adding [servletConfigInitParams] PropertySource with lowest search precedence
Adding [servletContextInitParams] PropertySource with lowest search precedence
Adding [jndiProperties] PropertySource with lowest search precedence
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]
FrameworkServlet 'dispatcher': initialization started
Servlet with name 'dispatcher' will try to create custom WebApplicationContext context of class 'org.springframework.web.context.support.XmlWebApplicationContext', using parent context [Root WebApplicationContext: startup date [Thu May 08 22:12:15 CST 2014]; root of context hierarchy]
Searching for key 'spring.profiles.active' in [servletConfigInitParams]
Searching for key 'spring.profiles.active' in [servletContextInitParams]
Searching for key 'spring.profiles.active' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.profiles.active]
Converted JNDI name [java:comp/env/spring.profiles.active] not found - trying original name [spring.profiles.active]. javax.naming.NameNotFoundException; remaining name 'env/spring.profiles.active'
Looking up JNDI object with name [spring.profiles.active]
JNDI lookup for name [spring.profiles.active] threw NamingException with message: null. Returning null.
Searching for key 'spring.profiles.active' in [systemProperties]
Searching for key 'spring.profiles.active' in [systemEnvironment]
Could not find key 'spring.profiles.active' in any property source. Returning [null]
Searching for key 'spring.profiles.default' in [servletConfigInitParams]
Searching for key 'spring.profiles.default' in [servletContextInitParams]
Searching for key 'spring.profiles.default' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.profiles.default]
Converted JNDI name [java:comp/env/spring.profiles.default] not found - trying original name [spring.profiles.default]. javax.naming.NameNotFoundException; remaining name 'env/spring.profiles.default'
Looking up JNDI object with name [spring.profiles.default]
JNDI lookup for name [spring.profiles.default] threw NamingException with message: null. Returning null.
Searching for key 'spring.profiles.default' in [systemProperties]
Searching for key 'spring.profiles.default' in [systemEnvironment]
Could not find key 'spring.profiles.default' in any property source. Returning [null]
Searching for key 'spring.profiles.default' in [servletConfigInitParams]
Searching for key 'spring.profiles.default' in [servletContextInitParams]
Searching for key 'spring.profiles.default' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.profiles.default]
Converted JNDI name [java:comp/env/spring.profiles.default] not found - trying original name [spring.profiles.default]. javax.naming.NameNotFoundException; remaining name 'env/spring.profiles.default'
Looking up JNDI object with name [spring.profiles.default]
JNDI lookup for name [spring.profiles.default] threw NamingException with message: null. Returning null.
Searching for key 'spring.profiles.default' in [systemProperties]
Searching for key 'spring.profiles.default' in [systemEnvironment]
Could not find key 'spring.profiles.default' in any property source. Returning [null]
Replacing [servletContextInitParams] PropertySource with [servletContextInitParams]
Replacing [servletConfigInitParams] PropertySource with [servletConfigInitParams]
Refreshing WebApplicationContext for namespace 'dispatcher-servlet': startup date [Thu May 08 22:12:24 CST 2014]; parent: Root WebApplicationContext
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from ServletContext resource [/WEB-INF/applicationContext.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Found XML schema [http://www.springframework.org/schema/context/spring-context-3.2.xsd] in classpath: org/springframework/context/config/spring-context-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tool/spring-tool-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-tool-3.2.xsd
Found XML schema [http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd] in classpath: org/springframework/web/servlet/config/spring-mvc-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tx/spring-tx-3.2.xsd] in classpath: org/springframework/transaction/config/spring-tx-3.2.xsd
Loading bean definitions
Loaded NamespaceHandler mappings: {http://www.springframework.org/schema/p=org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler, http://www.springframework.org/schema/mvc=org.springframework.web.servlet.config.MvcNamespaceHandler, http://www.springframework.org/schema/util=org.springframework.beans.factory.xml.UtilNamespaceHandler, http://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler, http://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler, http://www.springframework.org/schema/jdbc=org.springframework.jdbc.config.JdbcNamespaceHandler, http://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler, http://www.springframework.org/schema/c=org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler, http://www.springframework.org/schema/tx=org.springframework.transaction.config.TxNamespaceHandler, http://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler, http://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler, http://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler}
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\controller]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\controller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/controller/**/*.class]
Resolved location pattern [classpath*:com/ebay/controller/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\service]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/service/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerServieImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\dao]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/dao/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedbackDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/common/persistence/**/*.class]
Resolved location pattern [classpath*:com/ebay/common/persistence/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#1e99979]
Neither XML 'id' nor 'name' specified - using generated bean name [org.thymeleaf.spring3.view.ThymeleafViewResolver#0]
Loaded 54 bean definitions from location pattern [/WEB-INF/applicationContext.xml]
Bean factory for WebApplicationContext for namespace 'dispatcher-servlet': org.springframework.beans.factory.support.DefaultListableBeanFactory@15adafd: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@1b52702
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Eagerly caching bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Adding [environmentProperties] PropertySource with lowest search precedence
Loading properties file from URL [file:/E:/ebay/ebay-develop/target/classes/properties/jdbc.properties]
Adding [localProperties] PropertySource with lowest search precedence
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Eagerly caching bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Eagerly caching bean 'org.springframework.aop.config.internalAutoProxyCreator' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@1916adf]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@1ff92c6]
Unable to locate ThemeSource with name 'themeSource': using default [org.springframework.ui.context.support.DelegatingThemeSource@1fd148c]
Creating shared instance of singleton bean 'entityManagerFactory'
Creating instance of bean 'entityManagerFactory'
Eagerly caching bean 'entityManagerFactory' to allow for resolving potential circular references
Creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#1e99979'
Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Eagerly caching bean 'org.springframework.transaction.config.internalTransactionAdvisor' to allow for resolving potential circular references
Creating shared instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Eagerly caching bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Finished creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#1e99979'
Invoking afterPropertiesSet() on bean with name 'entityManagerFactory'
Building JPA container EntityManagerFactory for persistence unit 'ePU'
Adding type registration boolean -> org.hibernate.type.BooleanType@910d27
Adding type registration boolean -> org.hibernate.type.BooleanType@910d27
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@910d27
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@193f77
Adding type registration true_false -> org.hibernate.type.TrueFalseType@137f46
Adding type registration yes_no -> org.hibernate.type.YesNoType@13bd7f
Adding type registration byte -> org.hibernate.type.ByteType@19a54d0
Adding type registration byte -> org.hibernate.type.ByteType@19a54d0
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@19a54d0
Adding type registration character -> org.hibernate.type.CharacterType@ceb138
Adding type registration char -> org.hibernate.type.CharacterType@ceb138
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@ceb138
Adding type registration short -> org.hibernate.type.ShortType@186a43c
Adding type registration short -> org.hibernate.type.ShortType@186a43c
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@186a43c
Adding type registration integer -> org.hibernate.type.IntegerType@fdd76c
Adding type registration int -> org.hibernate.type.IntegerType@fdd76c
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@fdd76c
Adding type registration long -> org.hibernate.type.LongType@1b118e1
Adding type registration long -> org.hibernate.type.LongType@1b118e1
Adding type registration java.lang.Long -> org.hibernate.type.LongType@1b118e1
Adding type registration float -> org.hibernate.type.FloatType@1a279d5
Adding type registration float -> org.hibernate.type.FloatType@1a279d5
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1a279d5
Adding type registration double -> org.hibernate.type.DoubleType@114279d
Adding type registration double -> org.hibernate.type.DoubleType@114279d
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@114279d
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@77947
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@77947
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@12483d5
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@12483d5
Adding type registration string -> org.hibernate.type.StringType@2617a
Adding type registration java.lang.String -> org.hibernate.type.StringType@2617a
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@121c8c4
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@134784e
Adding type registration url -> org.hibernate.type.UrlType@14a6631
Adding type registration java.net.URL -> org.hibernate.type.UrlType@14a6631
Adding type registration date -> org.hibernate.type.DateType@11d3734
Adding type registration java.sql.Date -> org.hibernate.type.DateType@11d3734
Adding type registration time -> org.hibernate.type.TimeType@124f5b7
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@124f5b7
Adding type registration timestamp -> org.hibernate.type.TimestampType@657e0d
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@657e0d
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@657e0d
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@16fd193
Adding type registration calendar -> org.hibernate.type.CalendarType@1c00e37
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1c00e37
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1c00e37
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@1b3f99a
Adding type registration locale -> org.hibernate.type.LocaleType@1681f52
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@1681f52
Adding type registration currency -> org.hibernate.type.CurrencyType@13e29be
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@13e29be
Adding type registration timezone -> org.hibernate.type.TimeZoneType@1436597
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@1436597
Adding type registration class -> org.hibernate.type.ClassType@17d68f9
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@17d68f9
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@561fa5
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@561fa5
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@1ad264
Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@b143e
Adding type registration binary -> org.hibernate.type.BinaryType@57ba95
Adding type registration byte[] -> org.hibernate.type.BinaryType@57ba95
Adding type registration [B -> org.hibernate.type.BinaryType@57ba95
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@1a3c4fb
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@1a3c4fb
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@1a3c4fb
Adding type registration image -> org.hibernate.type.ImageType@1975da5
Adding type registration characters -> org.hibernate.type.CharArrayType@1077d72
Adding type registration char[] -> org.hibernate.type.CharArrayType@1077d72
Adding type registration [C -> org.hibernate.type.CharArrayType@1077d72
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@10cdcb4
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@10cdcb4
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@10cdcb4
Adding type registration text -> org.hibernate.type.TextType@c00f8a
Adding type registration ntext -> org.hibernate.type.NTextType@1b42535
Adding type registration blob -> org.hibernate.type.BlobType@5d749c
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@5d749c
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@181a7e4
Adding type registration clob -> org.hibernate.type.ClobType@f5aa7a
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@f5aa7a
Adding type registration nclob -> org.hibernate.type.NClobType@b575d2
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@b575d2
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@e16d62
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@b2f206
Adding type registration serializable -> org.hibernate.type.SerializableType@ac50d9
Adding type registration object -> org.hibernate.type.ObjectType@202728
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@202728
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@179654a
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@e90f44
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@e96f2b
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@1817ee1
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@b0f6f6
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@25af9b
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@2bec44
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@1a46eb4
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Processing PersistenceUnitInfo [
	name: ePU
	persistence provider classname: org.hibernate.ejb.HibernatePersistence
	classloader: WebAppClassLoader=29537806@1c2b60e
	Temporary classloader: org.springframework.instrument.classloading.SimpleThrowawayClassLoader@601445
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/E:/ebay/ebay-develop/target/classes
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		com.ebay.domain.customer.CustomerImpl
		com.ebay.domain.user.User
		com.ebay.domain.seller.SellerImpl
		com.ebay.domain.seller.RecentFeedbackratings
		com.ebay.domain.feedback.FeedBack
		com.ebay.domain.item.ItemDto]
	Mapping files names [
		config/jpa/domain/customer.orm.xml
		config/jpa/domain/user.orm.xml
		config/jpa/domain/rate.orm.xml
		config/jpa/domain/seller.orm.xml
		config/jpa/domain/feedback.orm.xml
		config/jpa/domain/item.orm.xml]
	Properties [
		hibernate.connection.driver_class: com.mysql.jdbc.Driver
		hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
		hibernate.max_fetch_depth: 3
		hibernate.format_sql: true
		hibernate.connection.username: root
		hibernate.hbm2ddl.auto: update
		hibernate.connection.url: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8
		hibernate.connection.password: root
		hibernate.show_sql: true]
Detect class: true; detect hbm: true
Detect class: true; detect hbm: true
Searching mapped entities in jar/par: file:/E:/ebay/ebay-develop/target/classes
Filtering: com.ebay.common.ClientFactory
Filtering: com.ebay.common.Constants
Filtering: com.ebay.common.handler.JAXWSHandler
Filtering: com.ebay.common.handler.ServiceHandlerResolver
Java element filter matched for com.ebay.common
Filtering: com.ebay.common.persistence.EntityConfiguration
Filtering: com.ebay.controller.CompetitorController
Filtering: com.ebay.controller.ItemController
Filtering: com.ebay.controller.LoginController
Filtering: com.ebay.dao.customer.CustomerDao
Filtering: com.ebay.dao.customer.CustomerDaoImpl
Filtering: com.ebay.dao.feedback.FeedbackDao
Filtering: com.ebay.dao.feedback.FeedBackDaoImpl
Filtering: com.ebay.dao.item.ItemDao
Filtering: com.ebay.dao.item.ItemDaoImpl
Filtering: com.ebay.dao.seller.RatesDao
Filtering: com.ebay.dao.seller.RatesDaoImpl
Filtering: com.ebay.dao.seller.SellerDao
Filtering: com.ebay.dao.seller.SellerDaoImpl
Java element filter matched for com.ebay.dao.user
Filtering: com.ebay.dao.user.UserDao
Filtering: com.ebay.dao.user.UserDaoImpl
Filtering: com.ebay.domain.customer.Customer
Filtering: com.ebay.domain.customer.CustomerImpl
Java element filter matched for com.ebay.domain.customer.CustomerImpl
Filtering: com.ebay.domain.feedback.FeedBack
Java element filter matched for com.ebay.domain.feedback.FeedBack
Filtering: com.ebay.domain.item.Item
Filtering: com.ebay.domain.item.ItemDto
Java element filter matched for com.ebay.domain.item.ItemDto
Filtering: com.ebay.domain.item.RecomendPrice
Filtering: com.ebay.domain.price.PriceDot
Filtering: com.ebay.domain.price.Pring
Filtering: com.ebay.domain.seller.DaySellDto
Filtering: com.ebay.domain.seller.RecentFeedbackratings
Java element filter matched for com.ebay.domain.seller.RecentFeedbackratings
Filtering: com.ebay.domain.seller.Seller
Filtering: com.ebay.domain.seller.SellerDto
Filtering: com.ebay.domain.seller.SellerImpl
Java element filter matched for com.ebay.domain.seller.SellerImpl
Filtering: com.ebay.domain.seller.SellerInfoDto
Filtering: com.ebay.domain.seller.WeekSellInfo
Filtering: com.ebay.domain.user.User
Java element filter matched for com.ebay.domain.user.User
Filtering: com.ebay.ebay_develop.App
Filtering: com.ebay.ebay_develop.Img
Filtering: com.ebay.find.FindItemsByCategory
Filtering: com.ebay.find.FindItemsByKeyWords
Filtering: com.ebay.find.FindItemsByProduct
Filtering: com.ebay.find.FindItemsInStore
Filtering: com.ebay.find.TestFind
Filtering: com.ebay.form.UserForm
Filtering: com.ebay.get.GetRecommendedKeyWords
Java element filter matched for com.ebay.get
Filtering: com.ebay.init.ClientConfigInit
Java element filter matched for com.ebay.init
Filtering: com.ebay.service.customer.CustomerService
Filtering: com.ebay.service.customer.CustomerServieImpl
Filtering: com.ebay.service.feedback.FeedbackService
Filtering: com.ebay.service.feedback.FeedbackServiceImpl
Filtering: com.ebay.service.item.ItemService
Filtering: com.ebay.service.item.ItemServiceImpl
Filtering: com.ebay.service.seller.SellerService
Filtering: com.ebay.service.seller.SellerServiceImpl
Java element filter matched for com.ebay.service.user
Filtering: com.ebay.service.user.UserService
Filtering: com.ebay.service.user.UserServiceImpl
Filtering: com.ebay.services.client.ClientConfig
Filtering: com.ebay.services.client.FindingServiceClientFactory
Java element filter matched for com.ebay.services.client
Filtering: com.ebay.services.finding.AckValue
Filtering: com.ebay.services.finding.Adapter1
Filtering: com.ebay.services.finding.Affiliate
Filtering: com.ebay.services.finding.Amount
Filtering: com.ebay.services.finding.Aspect
Filtering: com.ebay.services.finding.AspectFilter
Filtering: com.ebay.services.finding.AspectHistogramContainer
Filtering: com.ebay.services.finding.AspectValueHistogram
Filtering: com.ebay.services.finding.BaseFindingServiceRequest
Filtering: com.ebay.services.finding.BaseFindingServiceResponse
Filtering: com.ebay.services.finding.BaseServiceRequest
Filtering: com.ebay.services.finding.BaseServiceResponse
Filtering: com.ebay.services.finding.Category
Filtering: com.ebay.services.finding.CategoryHistogram
Filtering: com.ebay.services.finding.CategoryHistogramContainer
Filtering: com.ebay.services.finding.Condition
Filtering: com.ebay.services.finding.ConditionHistogram
Filtering: com.ebay.services.finding.ConditionHistogramContainer
Filtering: com.ebay.services.finding.Distance
Filtering: com.ebay.services.finding.DomainFilter
Filtering: com.ebay.services.finding.ErrorCategory
Filtering: com.ebay.services.finding.ErrorData
Filtering: com.ebay.services.finding.ErrorMessage
Filtering: com.ebay.services.finding.ErrorParameter
Filtering: com.ebay.services.finding.ErrorSeverity
Filtering: com.ebay.services.finding.ExtensionType
Filtering: com.ebay.services.finding.FindCompletedItemsRequest
Filtering: com.ebay.services.finding.FindCompletedItemsResponse
Filtering: com.ebay.services.finding.FindingService
Filtering: com.ebay.services.finding.FindingServicePortType
Filtering: com.ebay.services.finding.FindItemsAdvancedRequest
Filtering: com.ebay.services.finding.FindItemsAdvancedResponse
Filtering: com.ebay.services.finding.FindItemsByCategoryRequest
Filtering: com.ebay.services.finding.FindItemsByCategoryResponse
Filtering: com.ebay.services.finding.FindItemsByKeywordsRequest
Filtering: com.ebay.services.finding.FindItemsByKeywordsResponse
Filtering: com.ebay.services.finding.FindItemsByProductRequest
Filtering: com.ebay.services.finding.FindItemsByProductResponse
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchRequest
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchResponse
Filtering: com.ebay.services.finding.FindItemsIneBayStoresRequest
Filtering: com.ebay.services.finding.FindItemsIneBayStoresResponse
Filtering: com.ebay.services.finding.GetHistogramsRequest
Filtering: com.ebay.services.finding.GetHistogramsResponse
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationRequest
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationResponse
Filtering: com.ebay.services.finding.GetVersionRequest
Filtering: com.ebay.services.finding.GetVersionResponse
Filtering: com.ebay.services.finding.ItemFilter
Filtering: com.ebay.services.finding.ItemFilterType
Filtering: com.ebay.services.finding.ListingInfo
Filtering: com.ebay.services.finding.ObjectFactory
Filtering: com.ebay.services.finding.OutputSelectorType
Java element filter matched for com.ebay.services.finding
Filtering: com.ebay.services.finding.PaginationInput
Filtering: com.ebay.services.finding.PaginationOutput
Filtering: com.ebay.services.finding.ProductId
Filtering: com.ebay.services.finding.SearchItem
Filtering: com.ebay.services.finding.SearchResult
Filtering: com.ebay.services.finding.SellerInfo
Filtering: com.ebay.services.finding.SellingStatus
Filtering: com.ebay.services.finding.ShippingInfo
Filtering: com.ebay.services.finding.SortOrderType
Filtering: com.ebay.services.finding.Storefront
Filtering: com.ebay.util.feedback.CatchFeedback
Filtering: com.ebay.util.feedback.CatchFeedbackPlus
Filtering: com.ebay.util.feedback.Date1
Filtering: com.ebay.util.feedback.DealFeedback
Filtering: com.ebay.util.feedback.Feedback
Filtering: com.ebay.util.feedback.GetFeedback
Java element filter matched for com.ebay.util.feedback
Filtering: com.ebay.util.feedback.testsplit
Filtering: com.ebay.util.feedback.Util
Filtering: com.ebay.util.kmeans.Kmeans
Filtering: com.ebay.util.mail.MailSenderInfo
Filtering: com.ebay.util.mail.MyAuthenticator
Java element filter matched for com.ebay.util.mail
Filtering: com.ebay.util.mail.SendEmail
Filtering: com.ebay.util.mail.SimpleMailSender
Filtering: com.ebay.util.seller.CatchSellerInfo
Filtering: com.ebay.util.seller.ConvertStruct
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Mapping Package com.ebay.util.feedback
Mapping Package com.ebay.util.mail
Mapping Package com.ebay.get
Mapping Package com.ebay.init
Mapping Package com.ebay.common
Mapping Package com.ebay.service.user
Mapping Package com.ebay.services.finding
Mapping Package com.ebay.dao.user
Mapping Package com.ebay.services.client
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.ejb.event.JpaIntegrator].
No JNDI name configured for binding Ejb3Configuration
Preparing to build session factory with filters : {}
HHH000402: Using Hibernate built-in connection pool (not for production use!)
HHH000115: Hibernate connection pool size: 20
HHH000006: Autocommit mode: true
HHH000401: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8]
HHH000046: Connection properties: {user=root, password=root, autocommit=true, release_mode=auto}
Opening new JDBC connection
Created connection to: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, Isolation Level: 4
Database ->
       name : MySQL
    version : 5.0.22-community-nt
      major : 5
      minor : 0
Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.24 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
Binding named query: SELECT_CUSTOMERS => select customer from com.ebay.domain.customer.CustomerImpl customer
Binding named query: SELECT_BY_NAME => select count(*) from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_BY_NAME_PASSWORD => select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
Binding named query: GET_PASSWORD_BY_NAME => select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_RATES => select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_RATES_EXITS => select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_BY_SELLERNAME => select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_SELLERNAME => select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_AllDays => select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_BY_TOTALSELL => select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
Binding named query: SELECT_BY_SUCCESSSELL => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
Binding named query: List_FeedBack => from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
Binding named query: SPECIAL_MAX_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: SPECIAL_MIN_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: K_MEANS_PRICE => select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
Binding named query: MONTH_SELLINFO => select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
Binding named query: DAY_SELLINFO => select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
Binding named query: WEEK_SELLINFO => select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
Binding named query: KMEANS_MIN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Binding named query: KMEANS_BETWEEN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Binding named query: KMEANS_MAX => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Binding named query: MAX_PRICE => select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_ITEMS => select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_ALLITEMS => select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_AvgPrice => select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MAXPRICEDTO => select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MINPRICEDTO => select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_RECOMENDPRICE => select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Processing hbm.xml files
Process annotated classes
Binding entity from annotated class: com.ebay.domain.customer.CustomerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name CustomerImpl
Bind entity com.ebay.domain.customer.CustomerImpl on table customer
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_NAME, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property customername with lazy=false
building SimpleValue for customername
Building property customername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=STAR, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.user.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.ebay.domain.user.User on table User
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=USER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=PassWord, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property passWord with lazy=false
building SimpleValue for passWord
Building property passWord
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=UserName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property userName with lazy=false
building SimpleValue for userName
Building property userName
Binding entity from annotated class: com.ebay.domain.seller.SellerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name SellerImpl
Bind entity com.ebay.domain.seller.SellerImpl on table SELLER
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Seller_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property SellerName with lazy=false
building SimpleValue for SellerName
Building property SellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=CreateDate, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sinceDate with lazy=false
building SimpleValue for sinceDate
Building property sinceDate
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Star, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.seller.RecentFeedbackratings
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name RecentFeedbackratings
Bind entity com.ebay.domain.seller.RecentFeedbackratings on table RecentFeedbackratings
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=RecentFeedRate_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Negative with lazy=false
building SimpleValue for one_Negative
Building property one_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Neutral with lazy=false
building SimpleValue for one_Neutral
Building property one_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Positive with lazy=false
building SimpleValue for one_Positive
Building property one_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellerName with lazy=false
building SimpleValue for sellerName
Building property sellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Negative with lazy=false
building SimpleValue for six_Negative
Building property six_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Neutral with lazy=false
building SimpleValue for six_Neutral
Building property six_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Positive with lazy=false
building SimpleValue for six_Positive
Building property six_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Negative with lazy=false
building SimpleValue for twe_Negative
Building property twe_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Neutral with lazy=false
building SimpleValue for twe_Neutral
Building property twe_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Positive with lazy=false
building SimpleValue for twe_Positive
Building property twe_Positive
Binding entity from annotated class: com.ebay.domain.feedback.FeedBack
Import with entity name FeedBack
Bind entity com.ebay.domain.feedback.FeedBack on table FEEDBACK
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=FEEDBACK_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property feedbackId with lazy=false
building SimpleValue for feedbackId
Building property feedbackId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ATTITUDE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property attitude with lazy=false
building SimpleValue for attitude
Building property attitude
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=COMMENT, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property comment with lazy=false
building SimpleValue for comment
Building property comment
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Feed_Date, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property date with lazy=false
building SimpleValue for date
Building property date
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_Name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemName with lazy=false
building SimpleValue for itemName
Building property itemName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=PRICE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Seller, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellername with lazy=false
building SimpleValue for sellername
Building property sellername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=STAR_LEVEL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.item.ItemDto
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name ItemDto
Bind entity com.ebay.domain.item.ItemDto on table ItemDto
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=Id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=galleryURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property galleryURL with lazy=false
building SimpleValue for galleryURL
Building property galleryURL
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=ItemId, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=keyWords, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property keyWords with lazy=false
building SimpleValue for keyWords
Building property keyWords
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=price, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=sellCount, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellCount with lazy=false
building SimpleValue for sellCount
Building property sellCount
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=title, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property title with lazy=false
building SimpleValue for title
Building property title
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=viewItemURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property viewItemURL with lazy=false
building SimpleValue for viewItemURL
Building property viewItemURL
Setting SimpleValue typeName for id
Setting SimpleValue typeName for customername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for passWord
Setting SimpleValue typeName for userName
Setting SimpleValue typeName for id
Setting SimpleValue typeName for SellerName
Setting SimpleValue typeName for country
Setting SimpleValue typeName for sinceDate
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for one_Negative
Setting SimpleValue typeName for one_Neutral
Setting SimpleValue typeName for one_Positive
Setting SimpleValue typeName for sellerName
Setting SimpleValue typeName for six_Negative
Setting SimpleValue typeName for six_Neutral
Setting SimpleValue typeName for six_Positive
Setting SimpleValue typeName for twe_Negative
Setting SimpleValue typeName for twe_Neutral
Setting SimpleValue typeName for twe_Positive
Setting SimpleValue typeName for feedbackId
Setting SimpleValue typeName for attitude
Setting SimpleValue typeName for comment
Setting SimpleValue typeName for date
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for itemName
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for country
Setting SimpleValue typeName for galleryURL
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for keyWords
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellCount
Setting SimpleValue typeName for title
Setting SimpleValue typeName for viewItemURL
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
Automatic flush during beforeCompletion(): disabled
Automatic session close at end of transaction: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: disabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
multi-tenancy strategy : NONE
Connection release mode: auto
HHH000268: Transaction strategy: org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory
Using BatchFetchStyle : LEGACY
Maximum outer join fetch depth: 3
Default batch fetch size: 1
Generate SQL with comments: disabled
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
Default null ordering: none
Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
HHH000397: Using ASTQueryTranslatorFactory
Query language substitutions: {}
JPA-QL strict compliance: enabled
Second-level cache: enabled
Query cache: disabled
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
org.hibernate.cache.internal.NoCachingRegionFactory did not provide constructor accepting java.util.Properties; attempting no-arg constructor.
Optimize cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Named query checking : enabled
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : : disabled
JTA Track by Thread: enabled
Building session factory
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, sun.management.compiler=HotSpot Client Compiler, hibernate.ejb.discard_pc_on_close=false, rjrport=8081, hibernate.transaction.flush_before_completion=false, os.name=Windows 8, sun.boot.class.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\resources.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\rt.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\sunrsasign.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jsse.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jce.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\charsets.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jfr.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\classes, rjrkeystore=C:\Users\林林\.keystore, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, rjrkeypassword=changeit, java.runtime.version=1.7.0_45-b18, hibernate.connection.autocommit=true, rjrscanlist=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.scanlist, user.name=林林, javax.persistence.validation.mode=AUTO, hibernate.connection.release_mode=auto, rjrscanintervalseconds=5, user.language=zh, sun.boot.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin, rjrparentloaderpriority=true, java.version=1.7.0_45, user.timezone=Asia/Shanghai, sun.arch.data.model=32, rjrpassword=changeit, java.endorsed.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, hibernate.format_sql=true, java.class.version=51.0, user.country=CN, java.home=D:\Program Files (x86)\Java\jdk1.7.0_45\jre, java.vm.info=mixed mode, os.version=6.2, hibernate.transaction.factory_class=org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=24.45-b08, hibernate.max_fetch_depth=3, hibernate.connection.password=root, user.variant=, rjrneedclientauth=false, rjrenablessl=false, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, user.script=, user.home=C:\Users\林林, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=update, rjrignoreScanClassFile=true, java.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin;C:\Program Files (x86)\Common Files\NetSarang;C:\Program Files (x86)\AMD APP\bin\x86_64;C:\Program Files (x86)\AMD APP\bin\x86;D:\ActivePython27\;D:\ActivePython27\Scripts;F:\app\lin\product\11.2.0\dbhome_1\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;D:\SVN\bin;D:\MySQL Server 5.0\bin;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin;C:\Users\林林\AppData\Roaming\Python\Scripts;D:\Program Files (x86)\Java\jdk1.7.0_45/bin;D:\Program Files (x86)\Java\jdk1.7.0_45/jre/bin;D:\apache-maven-3.0.5/bin;D:\Google\google_appengine\;., java.vendor.url=http://java.oracle.com/, rjrResourceMapping=, rjrsslport=8443, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=runjettyrun.Bootstrap, java.class.path=D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlets-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-server-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-deploy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-policy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-util-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-rewrite-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-overlay-deployer-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jmx-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.jasper.glassfish-2.2.2.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.annotation_1.1.0.v201105051105.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\servlet-api-3.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-client-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.taglibs.standard.glassfish-1.2.0.v201112081803.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\com.sun.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jndi-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-core-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-webapp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp-2.2.0.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlet-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-continuation-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jsp-impl-2.2.2.b05.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-xml-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.objectweb.asm_3.3.1.v201101071600.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-io-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-security-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp.jstl-1.2.0.v201105211821.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\run-jetty-run-bootstrap-jetty8.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-plus-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-annotations-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-ajp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-websocket-8.1.8.v20121106.jar, hibernate.bytecode.use_reflection_optimizer=false, rjrclasspath=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.classpath, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.7, sun.os.patch.level=, sun.cpu.endian=little, java.io.tmpdir=C:\Users\林林\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, javax.persistence.sharedCache.mode=UNSPECIFIED, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, os.arch=x86, rjrenbaleJNDI=false, java.ext.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, rjrEclipseListener=59715, user.dir=E:\ebay\ebay-develop, line.separator=
, rjrcontext=/ebay-develop, java.vm.name=Java HotSpot(TM) Client VM, rjrwebapp=E:\ebay\ebay-develop\src\main\webapp, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.7, rjrenablescanner=false, hibernate.show_sql=true}
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Static SQL for entity: com.ebay.domain.user.User
 Version select: select USER_ID from User where USER_ID =?
 Snapshot select: select user_.USER_ID, user_.PassWord as PassWord2_4_, user_.UserName as UserName3_4_ from User user_ where user_.USER_ID=?
 Insert 0: insert into User (PassWord, UserName, USER_ID) values (?, ?, ?)
 Update 0: update User set PassWord=?, UserName=? where USER_ID=?
 Delete 0: delete from User where USER_ID=?
 Identity insert: insert into User (PassWord, UserName) values (?, ?)
Static SQL for entity: com.ebay.domain.item.ItemDto
 Version select: select Id from ItemDto where Id =?
 Snapshot select: select itemdto_.Id, itemdto_.country as country2_1_, itemdto_.galleryURL as galleryU3_1_, itemdto_.ItemId as ItemId4_1_, itemdto_.keyWords as keyWords5_1_, itemdto_.price as price6_1_, itemdto_.sellCount as sellCoun7_1_, itemdto_.title as title8_1_, itemdto_.viewItemURL as viewItem9_1_ from ItemDto itemdto_ where itemdto_.Id=?
 Insert 0: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL, Id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update ItemDto set country=?, galleryURL=?, ItemId=?, keyWords=?, price=?, sellCount=?, title=?, viewItemURL=? where Id=?
 Delete 0: delete from ItemDto where Id=?
 Identity insert: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.feedback.FeedBack
 Version select: select FEEDBACK_ID from FEEDBACK where FEEDBACK_ID =?
 Snapshot select: select feedback_.FEEDBACK_ID, feedback_.ATTITUDE as ATTITUDE2_0_, feedback_.COMMENT as COMMENT3_0_, feedback_.Feed_Date as Feed4_0_, feedback_.ITEM_ID as ITEM5_0_, feedback_.ITEM_Name as ITEM6_0_, feedback_.PRICE as PRICE7_0_, feedback_.Seller as Seller8_0_, feedback_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback_ where feedback_.FEEDBACK_ID=?
 Insert 0: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL, FEEDBACK_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update FEEDBACK set ATTITUDE=?, COMMENT=?, Feed_Date=?, ITEM_ID=?, ITEM_Name=?, PRICE=?, Seller=?, STAR_LEVEL=? where FEEDBACK_ID=?
 Delete 0: delete from FEEDBACK where FEEDBACK_ID=?
 Identity insert: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.customer.CustomerImpl
 Version select: select CUSTOMER_ID from customer where CUSTOMER_ID =?
 Snapshot select: select customerim_.CUSTOMER_ID, customerim_.CUSTOMER_NAME as CUSTOMER2_5_, customerim_.STAR as STAR3_5_ from customer customerim_ where customerim_.CUSTOMER_ID=?
 Insert 0: insert into customer (CUSTOMER_NAME, STAR, CUSTOMER_ID) values (?, ?, ?)
 Update 0: update customer set CUSTOMER_NAME=?, STAR=? where CUSTOMER_ID=?
 Delete 0: delete from customer where CUSTOMER_ID=?
 Identity insert: insert into customer (CUSTOMER_NAME, STAR) values (?, ?)
Static SQL for entity: com.ebay.domain.seller.RecentFeedbackratings
 Version select: select RecentFeedRate_ID from RecentFeedbackratings where RecentFeedRate_ID =?
 Snapshot select: select recentfeed_.RecentFeedRate_ID, recentfeed_.one_Negative as one2_2_, recentfeed_.one_Neutral as one3_2_, recentfeed_.one_Positive as one4_2_, recentfeed_.SellerName as SellerNa5_2_, recentfeed_.six_Negative as six6_2_, recentfeed_.six_Neutral as six7_2_, recentfeed_.six_Positive as six8_2_, recentfeed_.twe_Negative as twe9_2_, recentfeed_.twe_Neutral as twe10_2_, recentfeed_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed_ where recentfeed_.RecentFeedRate_ID=?
 Insert 0: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive, RecentFeedRate_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update RecentFeedbackratings set one_Negative=?, one_Neutral=?, one_Positive=?, SellerName=?, six_Negative=?, six_Neutral=?, six_Positive=?, twe_Negative=?, twe_Neutral=?, twe_Positive=? where RecentFeedRate_ID=?
 Delete 0: delete from RecentFeedbackratings where RecentFeedRate_ID=?
 Identity insert: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.seller.SellerImpl
 Version select: select Seller_ID from SELLER where Seller_ID =?
 Snapshot select: select sellerimpl_.Seller_ID, sellerimpl_.SellerName as SellerNa2_3_, sellerimpl_.Country as Country3_3_, sellerimpl_.CreateDate as CreateDa4_3_, sellerimpl_.Star as Star5_3_ from SELLER sellerimpl_ where sellerimpl_.Seller_ID=?
 Insert 0: insert into SELLER (SellerName, Country, CreateDate, Star, Seller_ID) values (?, ?, ?, ?, ?)
 Update 0: update SELLER set SellerName=?, Country=?, CreateDate=?, Star=? where Seller_ID=?
 Delete 0: delete from SELLER where Seller_ID=?
 Identity insert: insert into SELLER (SellerName, Country, CreateDate, Star) values (?, ?, ?, ?)
Static select for entity com.ebay.domain.user.User [NONE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [UPGRADE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [UPGRADE_NOWAIT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [FORCE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? lock in share mode
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_WRITE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [OPTIMISTIC]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.item.ItemDto [NONE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE_NOWAIT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [FORCE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? lock in share mode
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_WRITE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_MERGE on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.customer.CustomerImpl [NONE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE_NOWAIT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [FORCE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? lock in share mode
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_WRITE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [NONE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE_NOWAIT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [FORCE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? lock in share mode
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_WRITE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [NONE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE_NOWAIT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [FORCE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_WRITE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [NONE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE_NOWAIT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [FORCE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_WRITE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Registering SessionFactory: 6a715260-ced7-49b8-9192-2a263258cf3b (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Instantiated session factory
HHH000228: Running hbm2ddl schema update
HHH000102: Fetching database metadata
HHH000396: Updating schema
Processing hbm.xml files
Process annotated classes
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
HHH000261: Table found: ebay.feedback
HHH000037: Columns: [attitude, price, item_name, item_id, feed_date, feedback_id, comment, seller, star_level]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.itemdto
HHH000037: Columns: [id, viewitemurl, title, price, keywords, galleryurl, sellcount, itemid, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.recentfeedbackratings
HHH000037: Columns: [six_positive, twe_neutral, one_neutral, twe_negative, sellername, twe_positive, six_negative, six_neutral, recentfeedrate_id, one_positive, one_negative]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.seller
HHH000037: Columns: [star, createdate, sellername, seller_id, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.user
HHH000037: Columns: [username, user_id, password]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.customer
HHH000037: Columns: [star, customer_name, customer_id]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
HHH000232: Schema update complete
Checking 28 named HQL queries
Checking named query: WEEK_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'WeekSellInfo'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'WEEKDAY'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'WEEKDAY'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@657e0d
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@657e0d
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@657e0d
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) WeekSellInfo ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.WeekSellInfo,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'WeekSellInfo' {originalText=WeekSellInfo}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@fdd76c}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, weekday(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by weekday(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECT_MAXPRICEDTO
parse() - HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@2617a
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select max(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: DAY_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'DaySellDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'DAYOFMONTH'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'DAYOFMONTH'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@657e0d
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@657e0d
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@657e0d
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) DaySellDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.DaySellDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'DaySellDto' {originalText=DaySellDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@fdd76c}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, dayofmonth(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by dayofmonth(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_AllDays
parse() - HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[MINUS] Node: '-'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'TO_DAYS'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[AGGREGATE] Node: 'max'
    |        |        \-[IDENT] Node: 'Feed_Date'
    |        \-[METHOD_CALL] Node: '('
    |           +-[IDENT] Node: 'TO_DAYS'
    |           \-[EXPR_LIST] Node: 'exprList'
    |              \-[AGGREGATE] Node: 'min'
    |                 \-[IDENT] Node: 'Feed_Date'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( - ( ( TO_DAYS ( exprList ( max Feed_Date ) ) ) ( ( TO_DAYS ( exprList ( min Feed_Date ) ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[MINUS] BinaryArithmeticOperatorNode: '-' {dataType=org.hibernate.type.LongType@1b118e1}
    |  |  +-[METHOD_CALL] MethodNode: '('
    |  |  |  +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |  |  \-[EXPR_LIST] SqlNode: 'exprList'
    |  |  |     \-[AGGREGATE] AggregateNode: 'max'
    |  |  |        \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  |  \-[METHOD_CALL] MethodNode: '('
    |  |     +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |     \-[EXPR_LIST] SqlNode: 'exprList'
    |  |        \-[AGGREGATE] AggregateNode: 'min'
    |  |           \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select to_days(max(Feed_Date))-to_days(min(Feed_Date)) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SPECIAL_MIN_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'min'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@2617a
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@2617a
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'min'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select min(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: KMEANS_MAX
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'max'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@114279d}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: KMEANS_BETWEEN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'feedback'
          |  |  |  \-[IDENT] Node: 'sellername'
          |  |  \-[COLON] Node: ':'
          |  |     \-[IDENT] Node: 'sellername'
          |  \-[LT] Node: '<'
          |     +-[IDENT] Node: 'price'
          |     \-[COLON] Node: ':'
          |        \-[WEIRD_IDENT] Node: 'max'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[AND] SqlNode: 'and'
          |  +-[EQ] BinaryLogicOperatorNode: '='
          |  |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}
          |  \-[LT] BinaryLogicOperatorNode: '<'
          |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
          |     \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@114279d}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@114279d}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: SELECT_AvgPrice
parse() - HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'avg'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@2617a
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( avg ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'avg'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select avg(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: List_FeedBack
parse() - HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'FeedBack'
    |        \-[ALIAS] Node: 'feedback'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Derived SELECT clause created.
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'feedback0_.FEEDBACK_ID as FEEDBACK1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}}
    |  \-[SQL_TOKEN] SqlFragment: 'feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
SQL: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_, feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_SELLERNAME
parse() - HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'seller'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@2617a
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} sellerimpl0_.Seller_ID ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID as Seller1_3_' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
    |  \-[SQL_TOKEN] SqlFragment: 'sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select sellerimpl0_.Seller_ID as Seller1_3_, sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@2617a
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: SELECT_RECOMENDPRICE
parse() - HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'RecomendPrice'
    |        +-[AGGREGATE] Node: 'min'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        +-[AGGREGATE] Node: 'avg'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        \-[AGGREGATE] Node: 'max'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'dto'
    |              \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@2617a
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) RecomendPrice ) ( min ( itemdto0_.price itemdto0_.Id price ) ) ( avg ( itemdto0_.price itemdto0_.Id price ) ) ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.RecomendPrice,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'RecomendPrice' {originalText=RecomendPrice}
    |     +-[AGGREGATE] AggregateNode: 'min'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[AGGREGATE] AggregateNode: 'avg'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'max'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_, avg(itemdto0_.price) as col_1_0_, max(itemdto0_.price) as col_2_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_ITEMS
parse() - HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@2617a
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select count(*) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: K_MEANS_PRICE
parse() - HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'price'
    |        |  \-[IDENT] Node: 'PriceDot'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'price'
    |        \-[COUNT] Node: 'count'
    |           \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[IDENT] Node: 'price'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : feedback.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) price ) PriceDot ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ( count * ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( feedback0_.PRICE {synthetic-alias} price ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price.PriceDot,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     |  \-[IDENT] IdentNode: 'PriceDot' {originalText=PriceDot}
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[COUNT] CountNode: 'count'
    |     |  \-[ROW_STAR] SqlNode: '*'
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}
    \-[GROUP] SqlNode: 'group'
       \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          \-[IDENT] IdentNode: 'price' {originalText=price}

throwQueryException() : no errors
HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
SQL: select feedback0_.PRICE as col_0_0_, count(*) as col_1_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.PRICE
throwQueryException() : no errors
Checking named query: SELECT_MINPRICEDTO
parse() - HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'min'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@2617a
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'min'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_CUSTOMERS
parse() - HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  |  \-[IDENT] Node: 'ebay'
       |     |  |  |  \-[IDENT] Node: 'domain'
       |     |  |  \-[IDENT] Node: 'customer'
       |     |  \-[IDENT] Node: 'CustomerImpl'
       |     \-[ALIAS] Node: 'customer'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'customer'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.customer.CustomerImpl (customer) -> customerim0_
Resolved : customer -> customerim0_.CUSTOMER_ID
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} customerim0_.CUSTOMER_ID ) ( FromClause{level=1} customer customerim0_ ) )
Using FROM fragment [customer customerim0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (customer)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'customerim0_.CUSTOMER_ID as CUSTOMER1_5_' {alias=customer, className=com.ebay.domain.customer.CustomerImpl, tableAlias=customerim0_}
    |  \-[SQL_TOKEN] SqlFragment: 'customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[customer], fromElementByTableAlias=[customerim0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'customer customerim0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=customer,role=null,tableName=customer,tableAlias=customerim0_,origin=null,columns={,className=com.ebay.domain.customer.CustomerImpl}}

throwQueryException() : no errors
HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
SQL: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_ from customer customerim0_
throwQueryException() : no errors
Checking named query: MONTH_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'SellerInfoDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'Month'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@657e0d
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@657e0d
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) SellerInfoDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.SellerInfoDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'SellerInfoDto' {originalText=SellerInfoDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, month(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by month(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: KMEANS_MIN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[LT] Node: '<'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}
          \-[LT] BinaryLogicOperatorNode: '<'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@114279d}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<?
throwQueryException() : no errors
Checking named query: SELECT_RATES
parse() - HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'rate'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@2617a
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} recentfeed0_.RecentFeedRate_ID ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID as RecentFe1_2_' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
    |  \-[SQL_TOKEN] SqlFragment: 'recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_, recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SELLERNAME
parse() - HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@2617a
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select count(*) as col_0_0_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SUCCESSSELL
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellerName'
    |     \-[EQ] Node: '='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'attitude'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'attitude'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : attitude -> org.hibernate.type.StringType@2617a
Resolved : feedback.attitude -> feedback0_.ATTITUDE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( feedback0_.ATTITUDE feedback0_.FEEDBACK_ID attitude ) ? ) ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[DOT] DotNode: 'feedback0_.ATTITUDE' {propertyName=attitude,dereferenceType=ALL,propertyPath=attitude,path=feedback.attitude,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |  \-[IDENT] IdentNode: 'attitude' {originalText=attitude}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=attitude, expectedType=org.hibernate.type.StringType@2617a}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.ATTITUDE=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: GET_PASSWORD_BY_NAME
parse() - HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'user'
    |        \-[IDENT] Node: 'passWord'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@2617a
Resolved : user.passWord -> user0_.PassWord
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@2617a
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( user0_.PassWord user0_.USER_ID passWord ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
    |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
    |  |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
SQL: select user0_.PassWord as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: MAX_PRICE
parse() - HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select max(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECT_RATES_EXITS
parse() - HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@2617a
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select count(*) as col_0_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_TOTALSELL
parse() - HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'sum'
    |        \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellerName'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'sum'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@2617a}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
SQL: select sum(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: SELECT_ALLITEMS
parse() - HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'dto'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@2617a
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} itemdto0_.Id ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id as Id1_1_' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  \-[SQL_TOKEN] SqlFragment: 'itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select itemdto0_.Id as Id1_1_, itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SPECIAL_MAX_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'max'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@2617a
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@2617a
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@114279d
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@2617a
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'max'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select max(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME_PASSWORD
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'user'
          |  |  \-[IDENT] Node: 'userName'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'userName'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'user'
             |  \-[IDENT] Node: 'passWord'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'passWord'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@2617a
Resolved : user.userName -> user0_.UserName
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@2617a
Resolved : user.passWord -> user0_.PassWord
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( and ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ( = ( user0_.PassWord user0_.USER_ID passWord ) ? ) ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@2617a}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
             |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
             |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
             \-[NAMED_PARAM] ParameterNode: '?' {name=passWord, expectedType=org.hibernate.type.StringType@2617a}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=? and user0_.PassWord=?
throwQueryException() : no errors
Checking 0 named SQL queries
Statistics initialized [enabled=false]
Registering EntityManagerFactory: ePU 
HHH000436: Entity manager factory name (ePU) is already registered.  If entity manager will be clustered or passivated, specify a unique value for property 'hibernate.ejb.entitymanager_factory_name'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'entityManagerFactory'
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@15adafd: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@1b52702
Returning cached instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating shared instance of singleton bean 'competitorcontroller'
Creating instance of bean 'competitorcontroller'
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Eagerly caching bean 'competitorcontroller' to allow for resolving potential circular references
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Creating shared instance of singleton bean 'sellerService'
Creating instance of bean 'sellerService'
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Eagerly caching bean 'sellerService' to allow for resolving potential circular references
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Creating shared instance of singleton bean 'ebayRatesDao'
Creating instance of bean 'ebayRatesDao'
Registered injected element on class [com.ebay.dao.seller.RatesDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Eagerly caching bean 'ebayRatesDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayRatesDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayRatesDao'
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Creating shared instance of singleton bean 'ebaySellerDao'
Creating instance of bean 'ebaySellerDao'
Registered injected element on class [com.ebay.dao.seller.SellerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Eagerly caching bean 'ebaySellerDao' to allow for resolving potential circular references
Processing injected method of bean 'ebaySellerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebaySellerDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddRates' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'sellerService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.seller.SellerServiceImpl@1387a42]
Finished creating instance of bean 'sellerService'
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Creating shared instance of singleton bean 'feedbackService'
Creating instance of bean 'feedbackService'
Registered injected element on class [com.ebay.service.feedback.FeedbackServiceImpl]: ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Eagerly caching bean 'feedbackService' to allow for resolving potential circular references
Processing injected method of bean 'feedbackService': ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Creating shared instance of singleton bean 'ebayfeedbackdao'
Creating instance of bean 'ebayfeedbackdao'
Registered injected element on class [com.ebay.dao.feedback.FeedBackDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Eagerly caching bean 'ebayfeedbackdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayfeedbackdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddFeedbacks' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'feedbackService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.feedback.FeedbackServiceImpl@e2c241]
Finished creating instance of bean 'feedbackService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'competitorcontroller'
Creating shared instance of singleton bean 'itemcontroller'
Creating instance of bean 'itemcontroller'
Registered injected element on class [com.ebay.controller.ItemController]: ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Eagerly caching bean 'itemcontroller' to allow for resolving potential circular references
Processing injected method of bean 'itemcontroller': ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Creating shared instance of singleton bean 'itemService'
Creating instance of bean 'itemService'
Registered injected element on class [com.ebay.service.item.ItemServiceImpl]: ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Eagerly caching bean 'itemService' to allow for resolving potential circular references
Processing injected method of bean 'itemService': ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Creating shared instance of singleton bean 'ebayitemdao'
Creating instance of bean 'ebayitemdao'
Registered injected element on class [com.ebay.dao.item.ItemDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Eagerly caching bean 'ebayitemdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayitemdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayitemdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'addItem' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'itemService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.item.ItemServiceImpl@13f5694]
Finished creating instance of bean 'itemService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'itemcontroller'
Creating shared instance of singleton bean 'loginController'
Creating instance of bean 'loginController'
Registered injected element on class [com.ebay.controller.LoginController]: ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Eagerly caching bean 'loginController' to allow for resolving potential circular references
Processing injected method of bean 'loginController': ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Creating shared instance of singleton bean 'userService'
Creating instance of bean 'userService'
Registered injected element on class [com.ebay.service.user.UserServiceImpl]: ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Eagerly caching bean 'userService' to allow for resolving potential circular references
Processing injected method of bean 'userService': ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Creating shared instance of singleton bean 'ebayUserDao'
Creating instance of bean 'ebayUserDao'
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Eagerly caching bean 'ebayUserDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayUserDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Processing injected method of bean 'ebayUserDao': ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Creating shared instance of singleton bean 'ebayEntityConfiguration'
Creating instance of bean 'ebayEntityConfiguration'
Found init method on class [com.ebay.common.persistence.EntityConfiguration]: public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Registered init method on class [com.ebay.common.persistence.EntityConfiguration]: org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement@a46c92e
Registered injected element on class [com.ebay.common.persistence.EntityConfiguration]: ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Eagerly caching bean 'ebayEntityConfiguration' to allow for resolving potential circular references
Processing injected method of bean 'ebayEntityConfiguration': ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Creating shared instance of singleton bean 'eMergedEntityContexts'
Creating instance of bean 'eMergedEntityContexts'
Eagerly caching bean 'eMergedEntityContexts' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Invoking init method on bean 'ebayEntityConfiguration': public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from class path resource [applicationContext-entity.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Loading bean definitions
Refreshing org.springframework.context.support.GenericXmlApplicationContext@14d26c7: startup date [Thu May 08 22:12:25 CST 2014]; root of context hierarchy
Bean factory for org.springframework.context.support.GenericXmlApplicationContext@14d26c7: org.springframework.beans.factory.support.DefaultListableBeanFactory@ea355f: defining beans []; root of factory hierarchy
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@16c82b1]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@f871c5]
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@ea355f: defining beans []; root of factory hierarchy
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@f54537]
Returning cached instance of singleton bean 'lifecycleProcessor'
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayEntityConfiguration'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayUserDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'userService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'loginController'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Returning cached instance of singleton bean 'feedbackService'
Returning cached instance of singleton bean 'itemService'
Returning cached instance of singleton bean 'sellerService'
Returning cached instance of singleton bean 'userService'
Creating shared instance of singleton bean 'eCustomerDao'
Creating instance of bean 'eCustomerDao'
Registered injected element on class [com.ebay.dao.customer.CustomerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Eagerly caching bean 'eCustomerDao' to allow for resolving potential circular references
Processing injected method of bean 'eCustomerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eCustomerDao'
Returning cached instance of singleton bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'ebayitemdao'
Returning cached instance of singleton bean 'ebayRatesDao'
Returning cached instance of singleton bean 'ebaySellerDao'
Returning cached instance of singleton bean 'ebayUserDao'
Returning cached instance of singleton bean 'ebayEntityConfiguration'
Creating shared instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean 'mvcContentNegotiationManager'
Eagerly caching bean 'mvcContentNegotiationManager' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mvcContentNegotiationManager'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean '(inner bean)'
Creating shared instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Eagerly caching bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)'
Eagerly caching bean 'org.springframework.web.servlet.handler.MappedInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Looking for request mappings in application context: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Thu May 08 22:12:24 CST 2014]; parent: Root WebApplicationContext
Mapped "{[/selectPring],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.price.Pring> com.ebay.controller.CompetitorController.getPricing(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectDayInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.DaySellDto> com.ebay.controller.CompetitorController.selectDayInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectRates],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.RecentFeedbackratings com.ebay.controller.CompetitorController.selectRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/catchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.CompetitorController.CatchSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
Mapped "{[/selectSingleSeller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.SellerDto com.ebay.controller.CompetitorController.selectDtoSingleSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectWeekInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.WeekSellInfo> com.ebay.controller.CompetitorController.selectWeekInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.Item> com.ebay.controller.CompetitorController.selectSpecialItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.Seller com.ebay.controller.CompetitorController.selectCompetitor(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectMonthInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.SellerInfoDto> com.ebay.controller.CompetitorController.selectMonthInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectFeedBack],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.feedback.FeedBack> com.ebay.controller.CompetitorController.selectAllFeedBack(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/getRecomendPrices],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.item.RecomendPrice com.ebay.controller.ItemController.selectRprice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.ItemDto> com.ebay.controller.ItemController.selectItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/competitor/competitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/product/product],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.product(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/sendemail],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.getEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/login/controller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.validateLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/forgetpassword],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.forgetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/ebay || /],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.Login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#1'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#1'
Creating instance of bean '(inner bean)#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#2'
Creating instance of bean '(inner bean)#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#3'
Creating instance of bean '(inner bean)#4'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#4'
Creating instance of bean '(inner bean)#5'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#5'
Creating instance of bean '(inner bean)#6'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#6'
Creating instance of bean '(inner bean)#7'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#7'
Creating instance of bean '(inner bean)#8'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#8'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Looking for controller advice: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Thu May 08 22:12:24 CST 2014]; parent: Root WebApplicationContext
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#9'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#9'
Creating instance of bean '(inner bean)#10'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#10'
Creating instance of bean '(inner bean)#11'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#11'
Creating instance of bean '(inner bean)#12'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#12'
Creating instance of bean '(inner bean)#13'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#13'
Creating instance of bean '(inner bean)#14'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#14'
Creating instance of bean '(inner bean)#15'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#15'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Looking for exception mappings: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Thu May 08 22:12:24 CST 2014]; parent: Root WebApplicationContext
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Eagerly caching bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Thu May 08 22:12:24 CST 2014]; parent: Root WebApplicationContext
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Rejected bean name 'competitorcontroller': no URL paths identified
Rejected bean name 'itemcontroller': no URL paths identified
Rejected bean name 'loginController': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletConfig': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Mapped URL path [/img/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Mapped URL path [/css/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Mapped URL path [/js/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Mapped URL path [/plugins/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Returning cached instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Thu May 08 22:12:24 CST 2014]; parent: Root WebApplicationContext
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Root mapping to handler 'loginController'
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletConfig': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0' to allow for resolving potential circular references
Creating shared instance of singleton bean 'mappingJacksonHttpMessageConverter'
Creating instance of bean 'mappingJacksonHttpMessageConverter'
Eagerly caching bean 'mappingJacksonHttpMessageConverter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'entityManagerFactory'
Creating shared instance of singleton bean 'templateResolver'
Creating instance of bean 'templateResolver'
Eagerly caching bean 'templateResolver' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateResolver'
Creating shared instance of singleton bean 'templateEngine'
Creating instance of bean 'templateEngine'
Eagerly caching bean 'templateEngine' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateResolver'
Invoking afterPropertiesSet() on bean with name 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateEngine'
Creating shared instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Eagerly caching bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating shared instance of singleton bean 'transactionManager'
Creating instance of bean 'transactionManager'
Eagerly caching bean 'transactionManager' to allow for resolving potential circular references
Returning cached instance of singleton bean 'entityManagerFactory'
Invoking afterPropertiesSet() on bean with name 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating shared instance of singleton bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Eagerly caching bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Finished creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@b4a4b8]
Returning cached instance of singleton bean 'lifecycleProcessor'
Unable to locate MultipartResolver with name 'multipartResolver': no multipart request handling provided
Creating instance of bean 'org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver'
Unable to locate LocaleResolver with name 'localeResolver': using default [org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver@37c6a4]
Creating instance of bean 'org.springframework.web.servlet.theme.FixedThemeResolver'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.theme.FixedThemeResolver'
Unable to locate ThemeResolver with name 'themeResolver': using default [org.springframework.web.servlet.theme.FixedThemeResolver@122d16e]
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator'
Unable to locate RequestToViewNameTranslator with name 'viewNameTranslator': using default [org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@8d1e76]
Returning cached instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Returning cached instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating instance of bean 'org.springframework.web.servlet.support.SessionFlashMapManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.support.SessionFlashMapManager'
Unable to locate FlashMapManager with name 'flashMapManager': using default [org.springframework.web.servlet.support.SessionFlashMapManager@8d3c0d]
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletConfigInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletContextInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.liveBeansView.mbeanDomain]
Converted JNDI name [java:comp/env/spring.liveBeansView.mbeanDomain] not found - trying original name [spring.liveBeansView.mbeanDomain]. javax.naming.NameNotFoundException; remaining name 'env/spring.liveBeansView.mbeanDomain'
Looking up JNDI object with name [spring.liveBeansView.mbeanDomain]
JNDI lookup for name [spring.liveBeansView.mbeanDomain] threw NamingException with message: null. Returning null.
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Published WebApplicationContext of servlet 'dispatcher' as ServletContext attribute with name [org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher]
FrameworkServlet 'dispatcher': initialization completed in 1548 ms
Servlet 'dispatcher' configured successfully
DispatcherServlet with name 'dispatcher' processing GET request for [/]
Looking up handler method for path /
Returning handler method [public java.lang.String com.ebay.controller.LoginController.Login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)]
Returning cached instance of singleton bean 'loginController'
Last-Modified value for [/] is: -1
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Rendering view [org.thymeleaf.spring3.view.ThymeleafView@113bfac] in DispatcherServlet with name 'dispatcher'
Theme created: name 'theme', basename [theme]
No property editor [java.lang.StringEditor] found for type java.lang.String according to 'Editor' suffix convention
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/login.css]
Looking up handler method for path /css/login.css
DispatcherServlet with name 'dispatcher' processing GET request for [/js/flash_detect.js]
Looking up handler method for path /js/flash_detect.js
DispatcherServlet with name 'dispatcher' processing GET request for [/js/modernizr.min.js]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jquery.min.js]
Looking up handler method for path /js/jquery.min.js
Did not find handler method for [/css/login.css]
Looking up handler method for path /js/modernizr.min.js
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jquery.placeholder.min.js]
Looking up handler method for path /js/jquery.placeholder.min.js
Did not find handler method for [/js/flash_detect.js]
Matching patterns for request [/js/flash_detect.js] are [/js/**]
URI Template variables for request [/js/flash_detect.js] are {}
Did not find handler method for [/js/modernizr.min.js]
Did not find handler method for [/js/jquery.placeholder.min.js]
Matching patterns for request [/js/modernizr.min.js] are [/js/**]
Matching patterns for request [/js/jquery.placeholder.min.js] are [/js/**]
Mapping [/js/flash_detect.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@853013] and 1 interceptor
URI Template variables for request [/js/modernizr.min.js] are {}
Mapping [/js/modernizr.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@853013] and 1 interceptor
URI Template variables for request [/js/jquery.placeholder.min.js] are {}
Mapping [/js/jquery.placeholder.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@853013] and 1 interceptor
Did not find handler method for [/js/jquery.min.js]
Last-Modified value for [/js/flash_detect.js] is: -1
Matching patterns for request [/css/login.css] are [/css/**]
Matching patterns for request [/js/jquery.min.js] are [/js/**]
Last-Modified value for [/js/modernizr.min.js] is: -1
Last-Modified value for [/js/jquery.placeholder.min.js] is: -1
Trying relative path [modernizr.min.js] against base location: ServletContext resource [/js/]
URI Template variables for request [/js/jquery.min.js] are {}
Mapping [/js/jquery.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@853013] and 1 interceptor
Trying relative path [flash_detect.js] against base location: ServletContext resource [/js/]
URI Template variables for request [/css/login.css] are {}
Mapping [/css/login.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/js/jquery.min.js] is: -1
Trying relative path [jquery.placeholder.min.js] against base location: ServletContext resource [/js/]
Trying relative path [jquery.min.js] against base location: ServletContext resource [/js/]
Last-Modified value for [/css/login.css] is: -1
Trying relative path [login.css] against base location: ServletContext resource [/css/]
Found matching resource: ServletContext resource [/js/jquery.placeholder.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jquery.placeholder.min.js]
Found matching resource: ServletContext resource [/js/flash_detect.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/flash_detect.js]
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Successfully completed request
Found matching resource: ServletContext resource [/js/modernizr.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/modernizr.min.js]
Found matching resource: ServletContext resource [/css/login.css]
Resource not modified - returning 304
Determined media type 'text/css' for ServletContext resource [/css/login.css]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/js/jquery.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jquery.min.js]
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/getseal_001.dat]
Looking up handler method for path /getseal_001.dat
DispatcherServlet with name 'dispatcher' processing GET request for [/getseal]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/elqscr.js]
Looking up handler method for path /getseal
DispatcherServlet with name 'dispatcher' processing GET request for [/ga.js]
Looking up handler method for path /ga.js
Looking up handler method for path /js/elqscr.js
Did not find handler method for [/getseal]
Did not find handler method for [/getseal_001.dat]
No mapping found for HTTP request with URI [/getseal] in DispatcherServlet with name 'dispatcher'
No mapping found for HTTP request with URI [/getseal_001.dat] in DispatcherServlet with name 'dispatcher'
Did not find handler method for [/ga.js]
No mapping found for HTTP request with URI [/ga.js] in DispatcherServlet with name 'dispatcher'
Successfully completed request
Did not find handler method for [/js/elqscr.js]
Successfully completed request
Successfully completed request
Matching patterns for request [/js/elqscr.js] are [/js/**]
URI Template variables for request [/js/elqscr.js] are {}
Mapping [/js/elqscr.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@853013] and 1 interceptor
Last-Modified value for [/js/elqscr.js] is: -1
Trying relative path [elqscr.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/js/elqscr.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/elqscr.js]
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/9k-rpmcnxyepm8cnfsh2gg.woff]
Looking up handler method for path /css/9k-rpmcnxyepm8cnfsh2gg.woff
Did not find handler method for [/css/9k-rpmcnxyepm8cnfsh2gg.woff]
Matching patterns for request [/css/9k-rpmcnxyepm8cnfsh2gg.woff] are [/css/**]
URI Template variables for request [/css/9k-rpmcnxyepm8cnfsh2gg.woff] are {}
Mapping [/css/9k-rpmcnxyepm8cnfsh2gg.woff] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/9k-rpmcnxyepm8cnfsh2gg.woff] is: -1
Trying relative path [9k-rpmcnxyepm8cnfsh2gg.woff] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/getseal]
Looking up handler method for path /getseal
DispatcherServlet with name 'dispatcher' processing GET request for [/img/logo-login-white.png]
Did not find handler method for [/getseal]
Looking up handler method for path /img/logo-login-white.png
No mapping found for HTTP request with URI [/getseal] in DispatcherServlet with name 'dispatcher'
Successfully completed request
Did not find handler method for [/img/logo-login-white.png]
Matching patterns for request [/img/logo-login-white.png] are [/img/**]
URI Template variables for request [/img/logo-login-white.png] are {}
Mapping [/img/logo-login-white.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1f269fc] and 1 interceptor
Last-Modified value for [/img/logo-login-white.png] is: -1
Trying relative path [logo-login-white.png] against base location: ServletContext resource [/img/]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/kt3ks9aol4wfr6vas8kncg.woff]
Looking up handler method for path /css/kt3ks9aol4wfr6vas8kncg.woff
Did not find handler method for [/css/kt3ks9aol4wfr6vas8kncg.woff]
Matching patterns for request [/css/kt3ks9aol4wfr6vas8kncg.woff] are [/css/**]
URI Template variables for request [/css/kt3ks9aol4wfr6vas8kncg.woff] are {}
Mapping [/css/kt3ks9aol4wfr6vas8kncg.woff] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/kt3ks9aol4wfr6vas8kncg.woff] is: -1
Trying relative path [kt3ks9aol4wfr6vas8kncg.woff] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/getseal_001.dat]
Looking up handler method for path /getseal_001.dat
Did not find handler method for [/getseal_001.dat]
No mapping found for HTTP request with URI [/getseal_001.dat] in DispatcherServlet with name 'dispatcher'
Successfully completed request
Found matching resource: ServletContext resource [/img/logo-login-white.png]
Determined media type 'image/png' for ServletContext resource [/img/logo-login-white.png]
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/ga.js]
Looking up handler method for path /ga.js
Did not find handler method for [/ga.js]
No mapping found for HTTP request with URI [/ga.js] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing POST request for [/login/controller]
Looking up handler method for path /login/controller
Returning handler method [public java.lang.String com.ebay.controller.LoginController.validateLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)]
Returning cached instance of singleton bean 'loginController'
Creating new EntityManager for shared EntityManager invocation
org.hibernate.ejb.QueryImpl@153c8fb

    select
        count(*) as col_0_0_ 
    from
        User user0_ 
    where
        user0_.UserName=? 
        and user0_.PassWord=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - 11@qq.com
binding parameter [2] as [VARCHAR] - 1111
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Rendering view [org.thymeleaf.spring3.view.ThymeleafView@124661b] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/demo_table.css]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/demo_page.css]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/demo_table_jui.css]
Looking up handler method for path /css/demo_page.css
Did not find handler method for [/css/demo_page.css]
Matching patterns for request [/css/demo_page.css] are [/css/**]
URI Template variables for request [/css/demo_page.css] are {}
Mapping [/css/demo_page.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Looking up handler method for path /css/demo_table.css
Last-Modified value for [/css/demo_page.css] is: -1
Looking up handler method for path /css/demo_table_jui.css
Trying relative path [demo_page.css] against base location: ServletContext resource [/css/]
Did not find handler method for [/css/demo_table.css]
Matching patterns for request [/css/demo_table.css] are [/css/**]
URI Template variables for request [/css/demo_table.css] are {}
Mapping [/css/demo_table.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Did not find handler method for [/css/demo_table_jui.css]
Last-Modified value for [/css/demo_table.css] is: -1
Matching patterns for request [/css/demo_table_jui.css] are [/css/**]
Trying relative path [demo_table.css] against base location: ServletContext resource [/css/]
URI Template variables for request [/css/demo_table_jui.css] are {}
Mapping [/css/demo_table_jui.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/demo_table_jui.css] is: -1
Trying relative path [demo_table_jui.css] against base location: ServletContext resource [/css/]
Found matching resource: ServletContext resource [/css/demo_table.css]
Determined media type 'text/css' for ServletContext resource [/css/demo_table.css]
Found matching resource: ServletContext resource [/css/demo_page.css]
Resource not modified - returning 304
Determined media type 'text/css' for ServletContext resource [/css/demo_page.css]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/css/demo_table_jui.css]
Determined media type 'text/css' for ServletContext resource [/css/demo_table_jui.css]
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jquery.dataTables.js]
Looking up handler method for path /js/jquery.dataTables.js
Did not find handler method for [/js/jquery.dataTables.js]
Matching patterns for request [/js/jquery.dataTables.js] are [/js/**]
URI Template variables for request [/js/jquery.dataTables.js] are {}
Mapping [/js/jquery.dataTables.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@853013] and 1 interceptor
Last-Modified value for [/js/jquery.dataTables.js] is: -1
Trying relative path [jquery.dataTables.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/js/jquery.dataTables.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jquery.dataTables.js]
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.woff]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/fontawesome-webfont.woff
Looking up handler method for path /css/undefined
Did not find handler method for [/css/undefined]
Matching patterns for request [/css/undefined] are [/css/**]
URI Template variables for request [/css/undefined] are {}
Did not find handler method for [/css/fontawesome-webfont.woff]
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
DispatcherServlet with name 'dispatcher' processing GET request for [/css/images/icon-down.png]
Trying relative path [undefined] against base location: ServletContext resource [/css/]
Matching patterns for request [/css/fontawesome-webfont.woff] are [/css/**]
URI Template variables for request [/css/fontawesome-webfont.woff] are {}
Mapping [/css/fontawesome-webfont.woff] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Looking up handler method for path /css/images/icon-down.png
Last-Modified value for [/css/fontawesome-webfont.woff] is: -1
No matching resource found - returning 404
Trying relative path [fontawesome-webfont.woff] against base location: ServletContext resource [/css/]
Did not find handler method for [/css/images/icon-down.png]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Matching patterns for request [/css/images/icon-down.png] are [/css/**]
Successfully completed request
URI Template variables for request [/css/images/icon-down.png] are {}
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Mapping [/css/images/icon-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Successfully completed request
Last-Modified value for [/css/images/icon-down.png] is: -1
Trying relative path [images/icon-down.png] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
Did not find handler method for [/css/undefined]
Matching patterns for request [/css/undefined] are [/css/**]
URI Template variables for request [/css/undefined] are {}
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
Trying relative path [undefined] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.ttf]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/fontawesome-webfont.ttf
Looking up handler method for path /css/undefined
Did not find handler method for [/css/undefined]
Did not find handler method for [/css/fontawesome-webfont.ttf]
Matching patterns for request [/css/undefined] are [/css/**]
Matching patterns for request [/css/fontawesome-webfont.ttf] are [/css/**]
URI Template variables for request [/css/undefined] are {}
URI Template variables for request [/css/fontawesome-webfont.ttf] are {}
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Mapping [/css/fontawesome-webfont.ttf] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
Last-Modified value for [/css/fontawesome-webfont.ttf] is: -1
Trying relative path [undefined] against base location: ServletContext resource [/css/]
Trying relative path [fontawesome-webfont.ttf] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
Did not find handler method for [/css/undefined]
Matching patterns for request [/css/undefined] are [/css/**]
URI Template variables for request [/css/undefined] are {}
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
Trying relative path [undefined] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
Did not find handler method for [/css/undefined]
Matching patterns for request [/css/undefined] are [/css/**]
URI Template variables for request [/css/undefined] are {}
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
Trying relative path [undefined] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/favicon.ico]
Looking up handler method for path /favicon.ico
Did not find handler method for [/favicon.ico]
No mapping found for HTTP request with URI [/favicon.ico] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/favicon.ico]
Looking up handler method for path /favicon.ico
Did not find handler method for [/favicon.ico]
No mapping found for HTTP request with URI [/favicon.ico] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/favicon.ico]
Looking up handler method for path /favicon.ico
Did not find handler method for [/favicon.ico]
No mapping found for HTTP request with URI [/favicon.ico] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/searchItems]
Looking up handler method for path /searchItems
Returning handler method [public java.util.List<com.ebay.domain.item.ItemDto> com.ebay.controller.ItemController.selectItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'itemcontroller'
Last-Modified value for [/searchItems] is: -1
Returning cached instance of singleton bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Creating new EntityManager for shared EntityManager invocation

    select
        count(*) as col_0_0_ 
    from
        ItemDto itemdto0_ 
    where
        itemdto0_.keyWords=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - iphone 5s
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        itemdto0_.Id as Id1_1_,
        itemdto0_.country as country2_1_,
        itemdto0_.galleryURL as galleryU3_1_,
        itemdto0_.ItemId as ItemId4_1_,
        itemdto0_.keyWords as keyWords5_1_,
        itemdto0_.price as price6_1_,
        itemdto0_.sellCount as sellCoun7_1_,
        itemdto0_.title as title8_1_,
        itemdto0_.viewItemURL as viewItem9_1_ 
    from
        ItemDto itemdto0_ 
    where
        itemdto0_.keyWords=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - iphone 5s
Result set row: 0
Result row: EntityKey[com.ebay.domain.item.ItemDto#401]
Result set row: 1
Result row: EntityKey[com.ebay.domain.item.ItemDto#402]
Result set row: 2
Result row: EntityKey[com.ebay.domain.item.ItemDto#403]
Result set row: 3
Result row: EntityKey[com.ebay.domain.item.ItemDto#404]
Result set row: 4
Result row: EntityKey[com.ebay.domain.item.ItemDto#405]
Result set row: 5
Result row: EntityKey[com.ebay.domain.item.ItemDto#406]
Result set row: 6
Result row: EntityKey[com.ebay.domain.item.ItemDto#407]
Result set row: 7
Result row: EntityKey[com.ebay.domain.item.ItemDto#408]
Result set row: 8
Result row: EntityKey[com.ebay.domain.item.ItemDto#409]
Result set row: 9
Result row: EntityKey[com.ebay.domain.item.ItemDto#410]
Result set row: 10
Result row: EntityKey[com.ebay.domain.item.ItemDto#411]
Result set row: 11
Result row: EntityKey[com.ebay.domain.item.ItemDto#412]
Result set row: 12
Result row: EntityKey[com.ebay.domain.item.ItemDto#413]
Result set row: 13
Result row: EntityKey[com.ebay.domain.item.ItemDto#414]
Result set row: 14
Result row: EntityKey[com.ebay.domain.item.ItemDto#415]
Result set row: 15
Result row: EntityKey[com.ebay.domain.item.ItemDto#416]
Result set row: 16
Result row: EntityKey[com.ebay.domain.item.ItemDto#417]
Result set row: 17
Result row: EntityKey[com.ebay.domain.item.ItemDto#418]
Result set row: 18
Result row: EntityKey[com.ebay.domain.item.ItemDto#419]
Result set row: 19
Result row: EntityKey[com.ebay.domain.item.ItemDto#420]
Result set row: 20
Result row: EntityKey[com.ebay.domain.item.ItemDto#421]
Result set row: 21
Result row: EntityKey[com.ebay.domain.item.ItemDto#422]
Result set row: 22
Result row: EntityKey[com.ebay.domain.item.ItemDto#423]
Result set row: 23
Result row: EntityKey[com.ebay.domain.item.ItemDto#424]
Result set row: 24
Result row: EntityKey[com.ebay.domain.item.ItemDto#425]
Result set row: 25
Result row: EntityKey[com.ebay.domain.item.ItemDto#426]
Result set row: 26
Result row: EntityKey[com.ebay.domain.item.ItemDto#427]
Result set row: 27
Result row: EntityKey[com.ebay.domain.item.ItemDto#428]
Result set row: 28
Result row: EntityKey[com.ebay.domain.item.ItemDto#429]
Result set row: 29
Result row: EntityKey[com.ebay.domain.item.ItemDto#430]
Result set row: 30
Result row: EntityKey[com.ebay.domain.item.ItemDto#431]
Result set row: 31
Result row: EntityKey[com.ebay.domain.item.ItemDto#432]
Result set row: 32
Result row: EntityKey[com.ebay.domain.item.ItemDto#433]
Result set row: 33
Result row: EntityKey[com.ebay.domain.item.ItemDto#434]
Result set row: 34
Result row: EntityKey[com.ebay.domain.item.ItemDto#435]
Result set row: 35
Result row: EntityKey[com.ebay.domain.item.ItemDto#436]
Result set row: 36
Result row: EntityKey[com.ebay.domain.item.ItemDto#437]
Result set row: 37
Result row: EntityKey[com.ebay.domain.item.ItemDto#438]
Result set row: 38
Result row: EntityKey[com.ebay.domain.item.ItemDto#439]
Result set row: 39
Result row: EntityKey[com.ebay.domain.item.ItemDto#440]
Result set row: 40
Result row: EntityKey[com.ebay.domain.item.ItemDto#441]
Result set row: 41
Result row: EntityKey[com.ebay.domain.item.ItemDto#442]
Result set row: 42
Result row: EntityKey[com.ebay.domain.item.ItemDto#443]
Result set row: 43
Result row: EntityKey[com.ebay.domain.item.ItemDto#444]
Result set row: 44
Result row: EntityKey[com.ebay.domain.item.ItemDto#445]
Result set row: 45
Result row: EntityKey[com.ebay.domain.item.ItemDto#446]
Result set row: 46
Result row: EntityKey[com.ebay.domain.item.ItemDto#447]
Result set row: 47
Result row: EntityKey[com.ebay.domain.item.ItemDto#448]
Result set row: 48
Result row: EntityKey[com.ebay.domain.item.ItemDto#449]
Result set row: 49
Result row: EntityKey[com.ebay.domain.item.ItemDto#450]
Result set row: 50
Result row: EntityKey[com.ebay.domain.item.ItemDto#451]
Result set row: 51
Result row: EntityKey[com.ebay.domain.item.ItemDto#452]
Result set row: 52
Result row: EntityKey[com.ebay.domain.item.ItemDto#453]
Result set row: 53
Result row: EntityKey[com.ebay.domain.item.ItemDto#454]
Result set row: 54
Result row: EntityKey[com.ebay.domain.item.ItemDto#455]
Result set row: 55
Result row: EntityKey[com.ebay.domain.item.ItemDto#456]
Result set row: 56
Result row: EntityKey[com.ebay.domain.item.ItemDto#457]
Result set row: 57
Result row: EntityKey[com.ebay.domain.item.ItemDto#458]
Result set row: 58
Result row: EntityKey[com.ebay.domain.item.ItemDto#459]
Result set row: 59
Result row: EntityKey[com.ebay.domain.item.ItemDto#460]
Result set row: 60
Result row: EntityKey[com.ebay.domain.item.ItemDto#461]
Result set row: 61
Result row: EntityKey[com.ebay.domain.item.ItemDto#462]
Result set row: 62
Result row: EntityKey[com.ebay.domain.item.ItemDto#463]
Result set row: 63
Result row: EntityKey[com.ebay.domain.item.ItemDto#464]
Result set row: 64
Result row: EntityKey[com.ebay.domain.item.ItemDto#465]
Result set row: 65
Result row: EntityKey[com.ebay.domain.item.ItemDto#466]
Result set row: 66
Result row: EntityKey[com.ebay.domain.item.ItemDto#467]
Result set row: 67
Result row: EntityKey[com.ebay.domain.item.ItemDto#468]
Result set row: 68
Result row: EntityKey[com.ebay.domain.item.ItemDto#469]
Result set row: 69
Result row: EntityKey[com.ebay.domain.item.ItemDto#470]
Result set row: 70
Result row: EntityKey[com.ebay.domain.item.ItemDto#471]
Result set row: 71
Result row: EntityKey[com.ebay.domain.item.ItemDto#472]
Result set row: 72
Result row: EntityKey[com.ebay.domain.item.ItemDto#473]
Result set row: 73
Result row: EntityKey[com.ebay.domain.item.ItemDto#474]
Result set row: 74
Result row: EntityKey[com.ebay.domain.item.ItemDto#475]
Result set row: 75
Result row: EntityKey[com.ebay.domain.item.ItemDto#476]
Result set row: 76
Result row: EntityKey[com.ebay.domain.item.ItemDto#477]
Result set row: 77
Result row: EntityKey[com.ebay.domain.item.ItemDto#478]
Result set row: 78
Result row: EntityKey[com.ebay.domain.item.ItemDto#479]
Result set row: 79
Result row: EntityKey[com.ebay.domain.item.ItemDto#480]
Result set row: 80
Result row: EntityKey[com.ebay.domain.item.ItemDto#481]
Result set row: 81
Result row: EntityKey[com.ebay.domain.item.ItemDto#482]
Result set row: 82
Result row: EntityKey[com.ebay.domain.item.ItemDto#483]
Result set row: 83
Result row: EntityKey[com.ebay.domain.item.ItemDto#484]
Result set row: 84
Result row: EntityKey[com.ebay.domain.item.ItemDto#485]
Result set row: 85
Result row: EntityKey[com.ebay.domain.item.ItemDto#486]
Result set row: 86
Result row: EntityKey[com.ebay.domain.item.ItemDto#487]
Result set row: 87
Result row: EntityKey[com.ebay.domain.item.ItemDto#488]
Result set row: 88
Result row: EntityKey[com.ebay.domain.item.ItemDto#489]
Result set row: 89
Result row: EntityKey[com.ebay.domain.item.ItemDto#490]
Result set row: 90
Result row: EntityKey[com.ebay.domain.item.ItemDto#491]
Result set row: 91
Result row: EntityKey[com.ebay.domain.item.ItemDto#492]
Result set row: 92
Result row: EntityKey[com.ebay.domain.item.ItemDto#493]
Result set row: 93
Result row: EntityKey[com.ebay.domain.item.ItemDto#494]
Result set row: 94
Result row: EntityKey[com.ebay.domain.item.ItemDto#495]
Result set row: 95
Result row: EntityKey[com.ebay.domain.item.ItemDto#496]
Result set row: 96
Result row: EntityKey[com.ebay.domain.item.ItemDto#497]
Result set row: 97
Result row: EntityKey[com.ebay.domain.item.ItemDto#498]
Result set row: 98
Result row: EntityKey[com.ebay.domain.item.ItemDto#499]
Result set row: 99
Result row: EntityKey[com.ebay.domain.item.ItemDto#500]
Resolving associations for [com.ebay.domain.item.ItemDto#401]
Done materializing entity [com.ebay.domain.item.ItemDto#401]
Resolving associations for [com.ebay.domain.item.ItemDto#402]
Done materializing entity [com.ebay.domain.item.ItemDto#402]
Resolving associations for [com.ebay.domain.item.ItemDto#403]
Done materializing entity [com.ebay.domain.item.ItemDto#403]
Resolving associations for [com.ebay.domain.item.ItemDto#404]
Done materializing entity [com.ebay.domain.item.ItemDto#404]
Resolving associations for [com.ebay.domain.item.ItemDto#405]
Done materializing entity [com.ebay.domain.item.ItemDto#405]
Resolving associations for [com.ebay.domain.item.ItemDto#406]
Done materializing entity [com.ebay.domain.item.ItemDto#406]
Resolving associations for [com.ebay.domain.item.ItemDto#407]
Done materializing entity [com.ebay.domain.item.ItemDto#407]
Resolving associations for [com.ebay.domain.item.ItemDto#408]
Done materializing entity [com.ebay.domain.item.ItemDto#408]
Resolving associations for [com.ebay.domain.item.ItemDto#409]
Done materializing entity [com.ebay.domain.item.ItemDto#409]
Resolving associations for [com.ebay.domain.item.ItemDto#410]
Done materializing entity [com.ebay.domain.item.ItemDto#410]
Resolving associations for [com.ebay.domain.item.ItemDto#411]
Done materializing entity [com.ebay.domain.item.ItemDto#411]
Resolving associations for [com.ebay.domain.item.ItemDto#412]
Done materializing entity [com.ebay.domain.item.ItemDto#412]
Resolving associations for [com.ebay.domain.item.ItemDto#413]
Done materializing entity [com.ebay.domain.item.ItemDto#413]
Resolving associations for [com.ebay.domain.item.ItemDto#414]
Done materializing entity [com.ebay.domain.item.ItemDto#414]
Resolving associations for [com.ebay.domain.item.ItemDto#415]
Done materializing entity [com.ebay.domain.item.ItemDto#415]
Resolving associations for [com.ebay.domain.item.ItemDto#416]
Done materializing entity [com.ebay.domain.item.ItemDto#416]
Resolving associations for [com.ebay.domain.item.ItemDto#417]
Done materializing entity [com.ebay.domain.item.ItemDto#417]
Resolving associations for [com.ebay.domain.item.ItemDto#418]
Done materializing entity [com.ebay.domain.item.ItemDto#418]
Resolving associations for [com.ebay.domain.item.ItemDto#419]
Done materializing entity [com.ebay.domain.item.ItemDto#419]
Resolving associations for [com.ebay.domain.item.ItemDto#420]
Done materializing entity [com.ebay.domain.item.ItemDto#420]
Resolving associations for [com.ebay.domain.item.ItemDto#421]
Done materializing entity [com.ebay.domain.item.ItemDto#421]
Resolving associations for [com.ebay.domain.item.ItemDto#422]
Done materializing entity [com.ebay.domain.item.ItemDto#422]
Resolving associations for [com.ebay.domain.item.ItemDto#423]
Done materializing entity [com.ebay.domain.item.ItemDto#423]
Resolving associations for [com.ebay.domain.item.ItemDto#424]
Done materializing entity [com.ebay.domain.item.ItemDto#424]
Resolving associations for [com.ebay.domain.item.ItemDto#425]
Done materializing entity [com.ebay.domain.item.ItemDto#425]
Resolving associations for [com.ebay.domain.item.ItemDto#426]
Done materializing entity [com.ebay.domain.item.ItemDto#426]
Resolving associations for [com.ebay.domain.item.ItemDto#427]
Done materializing entity [com.ebay.domain.item.ItemDto#427]
Resolving associations for [com.ebay.domain.item.ItemDto#428]
Done materializing entity [com.ebay.domain.item.ItemDto#428]
Resolving associations for [com.ebay.domain.item.ItemDto#429]
Done materializing entity [com.ebay.domain.item.ItemDto#429]
Resolving associations for [com.ebay.domain.item.ItemDto#430]
Done materializing entity [com.ebay.domain.item.ItemDto#430]
Resolving associations for [com.ebay.domain.item.ItemDto#431]
Done materializing entity [com.ebay.domain.item.ItemDto#431]
Resolving associations for [com.ebay.domain.item.ItemDto#432]
Done materializing entity [com.ebay.domain.item.ItemDto#432]
Resolving associations for [com.ebay.domain.item.ItemDto#433]
Done materializing entity [com.ebay.domain.item.ItemDto#433]
Resolving associations for [com.ebay.domain.item.ItemDto#434]
Done materializing entity [com.ebay.domain.item.ItemDto#434]
Resolving associations for [com.ebay.domain.item.ItemDto#435]
Done materializing entity [com.ebay.domain.item.ItemDto#435]
Resolving associations for [com.ebay.domain.item.ItemDto#436]
Done materializing entity [com.ebay.domain.item.ItemDto#436]
Resolving associations for [com.ebay.domain.item.ItemDto#437]
Done materializing entity [com.ebay.domain.item.ItemDto#437]
Resolving associations for [com.ebay.domain.item.ItemDto#438]
Done materializing entity [com.ebay.domain.item.ItemDto#438]
Resolving associations for [com.ebay.domain.item.ItemDto#439]
Done materializing entity [com.ebay.domain.item.ItemDto#439]
Resolving associations for [com.ebay.domain.item.ItemDto#440]
Done materializing entity [com.ebay.domain.item.ItemDto#440]
Resolving associations for [com.ebay.domain.item.ItemDto#441]
Done materializing entity [com.ebay.domain.item.ItemDto#441]
Resolving associations for [com.ebay.domain.item.ItemDto#442]
Done materializing entity [com.ebay.domain.item.ItemDto#442]
Resolving associations for [com.ebay.domain.item.ItemDto#443]
Done materializing entity [com.ebay.domain.item.ItemDto#443]
Resolving associations for [com.ebay.domain.item.ItemDto#444]
Done materializing entity [com.ebay.domain.item.ItemDto#444]
Resolving associations for [com.ebay.domain.item.ItemDto#445]
Done materializing entity [com.ebay.domain.item.ItemDto#445]
Resolving associations for [com.ebay.domain.item.ItemDto#446]
Done materializing entity [com.ebay.domain.item.ItemDto#446]
Resolving associations for [com.ebay.domain.item.ItemDto#447]
Done materializing entity [com.ebay.domain.item.ItemDto#447]
Resolving associations for [com.ebay.domain.item.ItemDto#448]
Done materializing entity [com.ebay.domain.item.ItemDto#448]
Resolving associations for [com.ebay.domain.item.ItemDto#449]
Done materializing entity [com.ebay.domain.item.ItemDto#449]
Resolving associations for [com.ebay.domain.item.ItemDto#450]
Done materializing entity [com.ebay.domain.item.ItemDto#450]
Resolving associations for [com.ebay.domain.item.ItemDto#451]
Done materializing entity [com.ebay.domain.item.ItemDto#451]
Resolving associations for [com.ebay.domain.item.ItemDto#452]
Done materializing entity [com.ebay.domain.item.ItemDto#452]
Resolving associations for [com.ebay.domain.item.ItemDto#453]
Done materializing entity [com.ebay.domain.item.ItemDto#453]
Resolving associations for [com.ebay.domain.item.ItemDto#454]
Done materializing entity [com.ebay.domain.item.ItemDto#454]
Resolving associations for [com.ebay.domain.item.ItemDto#455]
Done materializing entity [com.ebay.domain.item.ItemDto#455]
Resolving associations for [com.ebay.domain.item.ItemDto#456]
Done materializing entity [com.ebay.domain.item.ItemDto#456]
Resolving associations for [com.ebay.domain.item.ItemDto#457]
Done materializing entity [com.ebay.domain.item.ItemDto#457]
Resolving associations for [com.ebay.domain.item.ItemDto#458]
Done materializing entity [com.ebay.domain.item.ItemDto#458]
Resolving associations for [com.ebay.domain.item.ItemDto#459]
Done materializing entity [com.ebay.domain.item.ItemDto#459]
Resolving associations for [com.ebay.domain.item.ItemDto#460]
Done materializing entity [com.ebay.domain.item.ItemDto#460]
Resolving associations for [com.ebay.domain.item.ItemDto#461]
Done materializing entity [com.ebay.domain.item.ItemDto#461]
Resolving associations for [com.ebay.domain.item.ItemDto#462]
Done materializing entity [com.ebay.domain.item.ItemDto#462]
Resolving associations for [com.ebay.domain.item.ItemDto#463]
Done materializing entity [com.ebay.domain.item.ItemDto#463]
Resolving associations for [com.ebay.domain.item.ItemDto#464]
Done materializing entity [com.ebay.domain.item.ItemDto#464]
Resolving associations for [com.ebay.domain.item.ItemDto#465]
Done materializing entity [com.ebay.domain.item.ItemDto#465]
Resolving associations for [com.ebay.domain.item.ItemDto#466]
Done materializing entity [com.ebay.domain.item.ItemDto#466]
Resolving associations for [com.ebay.domain.item.ItemDto#467]
Done materializing entity [com.ebay.domain.item.ItemDto#467]
Resolving associations for [com.ebay.domain.item.ItemDto#468]
Done materializing entity [com.ebay.domain.item.ItemDto#468]
Resolving associations for [com.ebay.domain.item.ItemDto#469]
Done materializing entity [com.ebay.domain.item.ItemDto#469]
Resolving associations for [com.ebay.domain.item.ItemDto#470]
Done materializing entity [com.ebay.domain.item.ItemDto#470]
Resolving associations for [com.ebay.domain.item.ItemDto#471]
Done materializing entity [com.ebay.domain.item.ItemDto#471]
Resolving associations for [com.ebay.domain.item.ItemDto#472]
Done materializing entity [com.ebay.domain.item.ItemDto#472]
Resolving associations for [com.ebay.domain.item.ItemDto#473]
Done materializing entity [com.ebay.domain.item.ItemDto#473]
Resolving associations for [com.ebay.domain.item.ItemDto#474]
Done materializing entity [com.ebay.domain.item.ItemDto#474]
Resolving associations for [com.ebay.domain.item.ItemDto#475]
Done materializing entity [com.ebay.domain.item.ItemDto#475]
Resolving associations for [com.ebay.domain.item.ItemDto#476]
Done materializing entity [com.ebay.domain.item.ItemDto#476]
Resolving associations for [com.ebay.domain.item.ItemDto#477]
Done materializing entity [com.ebay.domain.item.ItemDto#477]
Resolving associations for [com.ebay.domain.item.ItemDto#478]
Done materializing entity [com.ebay.domain.item.ItemDto#478]
Resolving associations for [com.ebay.domain.item.ItemDto#479]
Done materializing entity [com.ebay.domain.item.ItemDto#479]
Resolving associations for [com.ebay.domain.item.ItemDto#480]
Done materializing entity [com.ebay.domain.item.ItemDto#480]
Resolving associations for [com.ebay.domain.item.ItemDto#481]
Done materializing entity [com.ebay.domain.item.ItemDto#481]
Resolving associations for [com.ebay.domain.item.ItemDto#482]
Done materializing entity [com.ebay.domain.item.ItemDto#482]
Resolving associations for [com.ebay.domain.item.ItemDto#483]
Done materializing entity [com.ebay.domain.item.ItemDto#483]
Resolving associations for [com.ebay.domain.item.ItemDto#484]
Done materializing entity [com.ebay.domain.item.ItemDto#484]
Resolving associations for [com.ebay.domain.item.ItemDto#485]
Done materializing entity [com.ebay.domain.item.ItemDto#485]
Resolving associations for [com.ebay.domain.item.ItemDto#486]
Done materializing entity [com.ebay.domain.item.ItemDto#486]
Resolving associations for [com.ebay.domain.item.ItemDto#487]
Done materializing entity [com.ebay.domain.item.ItemDto#487]
Resolving associations for [com.ebay.domain.item.ItemDto#488]
Done materializing entity [com.ebay.domain.item.ItemDto#488]
Resolving associations for [com.ebay.domain.item.ItemDto#489]
Done materializing entity [com.ebay.domain.item.ItemDto#489]
Resolving associations for [com.ebay.domain.item.ItemDto#490]
Done materializing entity [com.ebay.domain.item.ItemDto#490]
Resolving associations for [com.ebay.domain.item.ItemDto#491]
Done materializing entity [com.ebay.domain.item.ItemDto#491]
Resolving associations for [com.ebay.domain.item.ItemDto#492]
Done materializing entity [com.ebay.domain.item.ItemDto#492]
Resolving associations for [com.ebay.domain.item.ItemDto#493]
Done materializing entity [com.ebay.domain.item.ItemDto#493]
Resolving associations for [com.ebay.domain.item.ItemDto#494]
Done materializing entity [com.ebay.domain.item.ItemDto#494]
Resolving associations for [com.ebay.domain.item.ItemDto#495]
Done materializing entity [com.ebay.domain.item.ItemDto#495]
Resolving associations for [com.ebay.domain.item.ItemDto#496]
Done materializing entity [com.ebay.domain.item.ItemDto#496]
Resolving associations for [com.ebay.domain.item.ItemDto#497]
Done materializing entity [com.ebay.domain.item.ItemDto#497]
Resolving associations for [com.ebay.domain.item.ItemDto#498]
Done materializing entity [com.ebay.domain.item.ItemDto#498]
Resolving associations for [com.ebay.domain.item.ItemDto#499]
Done materializing entity [com.ebay.domain.item.ItemDto#499]
Resolving associations for [com.ebay.domain.item.ItemDto#500]
Done materializing entity [com.ebay.domain.item.ItemDto#500]
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Written [[com.ebay.domain.item.ItemDto@1c4cd98, com.ebay.domain.item.ItemDto@81bf8b, com.ebay.domain.item.ItemDto@465fc3, com.ebay.domain.item.ItemDto@38fe6c, com.ebay.domain.item.ItemDto@1c7a117, com.ebay.domain.item.ItemDto@120f933, com.ebay.domain.item.ItemDto@1c89d7e, com.ebay.domain.item.ItemDto@1dbd8d5, com.ebay.domain.item.ItemDto@789950, com.ebay.domain.item.ItemDto@19988c5, com.ebay.domain.item.ItemDto@e26135, com.ebay.domain.item.ItemDto@5c114a, com.ebay.domain.item.ItemDto@73510f, com.ebay.domain.item.ItemDto@87e44c, com.ebay.domain.item.ItemDto@19d5278, com.ebay.domain.item.ItemDto@19159a0, com.ebay.domain.item.ItemDto@1932376, com.ebay.domain.item.ItemDto@fd3cb0, com.ebay.domain.item.ItemDto@19b4d79, com.ebay.domain.item.ItemDto@fb66a2, com.ebay.domain.item.ItemDto@10f424b, com.ebay.domain.item.ItemDto@c953b3, com.ebay.domain.item.ItemDto@196352e, com.ebay.domain.item.ItemDto@7d60d8, com.ebay.domain.item.ItemDto@16143bb, com.ebay.domain.item.ItemDto@a5c978, com.ebay.domain.item.ItemDto@4e0463, com.ebay.domain.item.ItemDto@21441, com.ebay.domain.item.ItemDto@7fc4bd, com.ebay.domain.item.ItemDto@4d952c, com.ebay.domain.item.ItemDto@17cb861, com.ebay.domain.item.ItemDto@12d1940, com.ebay.domain.item.ItemDto@1d4f4d9, com.ebay.domain.item.ItemDto@1705c3, com.ebay.domain.item.ItemDto@17b5ee6, com.ebay.domain.item.ItemDto@9350d9, com.ebay.domain.item.ItemDto@1a10b2b, com.ebay.domain.item.ItemDto@1e45deb, com.ebay.domain.item.ItemDto@1d201b5, com.ebay.domain.item.ItemDto@6e464c, com.ebay.domain.item.ItemDto@1c94799, com.ebay.domain.item.ItemDto@17bab72, com.ebay.domain.item.ItemDto@34f11b, com.ebay.domain.item.ItemDto@1c15e30, com.ebay.domain.item.ItemDto@edba8, com.ebay.domain.item.ItemDto@1771aa1, com.ebay.domain.item.ItemDto@755966, com.ebay.domain.item.ItemDto@4038cc, com.ebay.domain.item.ItemDto@510d86, com.ebay.domain.item.ItemDto@14ed99a, com.ebay.domain.item.ItemDto@1b0196a, com.ebay.domain.item.ItemDto@549bbc, com.ebay.domain.item.ItemDto@bc80f2, com.ebay.domain.item.ItemDto@1b59d94, com.ebay.domain.item.ItemDto@7c8767, com.ebay.domain.item.ItemDto@19da372, com.ebay.domain.item.ItemDto@55bb3a, com.ebay.domain.item.ItemDto@76ffe2, com.ebay.domain.item.ItemDto@997bcd, com.ebay.domain.item.ItemDto@8f076e, com.ebay.domain.item.ItemDto@30f013, com.ebay.domain.item.ItemDto@e19fb4, com.ebay.domain.item.ItemDto@bc1316, com.ebay.domain.item.ItemDto@1892152, com.ebay.domain.item.ItemDto@1eaae0d, com.ebay.domain.item.ItemDto@4913f6, com.ebay.domain.item.ItemDto@1bd7ca6, com.ebay.domain.item.ItemDto@1427c4f, com.ebay.domain.item.ItemDto@1ef4a0f, com.ebay.domain.item.ItemDto@e726f5, com.ebay.domain.item.ItemDto@1aeb2c7, com.ebay.domain.item.ItemDto@5b2fe2, com.ebay.domain.item.ItemDto@a4d1e7, com.ebay.domain.item.ItemDto@d0a468, com.ebay.domain.item.ItemDto@1d9d45f, com.ebay.domain.item.ItemDto@5b741, com.ebay.domain.item.ItemDto@1424afd, com.ebay.domain.item.ItemDto@1492ed7, com.ebay.domain.item.ItemDto@1a2647d, com.ebay.domain.item.ItemDto@734b61, com.ebay.domain.item.ItemDto@159f47d, com.ebay.domain.item.ItemDto@c24db3, com.ebay.domain.item.ItemDto@7b3dd4, com.ebay.domain.item.ItemDto@1184a5e, com.ebay.domain.item.ItemDto@1ba900b, com.ebay.domain.item.ItemDto@146ce58, com.ebay.domain.item.ItemDto@1952132, com.ebay.domain.item.ItemDto@1b67620, com.ebay.domain.item.ItemDto@53f24, com.ebay.domain.item.ItemDto@74568b, com.ebay.domain.item.ItemDto@1ddfb68, com.ebay.domain.item.ItemDto@a469cd, com.ebay.domain.item.ItemDto@1e1c51, com.ebay.domain.item.ItemDto@d52598, com.ebay.domain.item.ItemDto@197590e, com.ebay.domain.item.ItemDto@157aa06, com.ebay.domain.item.ItemDto@5ba1d7, com.ebay.domain.item.ItemDto@1de4c4a, com.ebay.domain.item.ItemDto@1629562, com.ebay.domain.item.ItemDto@13d953d]] as "application/json;charset=UTF-8" using [org.springframework.http.converter.json.MappingJacksonHttpMessageConverter@5a42c7]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/images/sort_both.png]
DispatcherServlet with name 'dispatcher' processing GET request for [/images/sort_asc.png]
Looking up handler method for path /images/sort_both.png
Looking up handler method for path /images/sort_asc.png
Did not find handler method for [/images/sort_both.png]
Did not find handler method for [/images/sort_asc.png]
No mapping found for HTTP request with URI [/images/sort_both.png] in DispatcherServlet with name 'dispatcher'
No mapping found for HTTP request with URI [/images/sort_asc.png] in DispatcherServlet with name 'dispatcher'
Successfully completed request
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/getRecomendPrices]
Looking up handler method for path /getRecomendPrices
Returning handler method [public com.ebay.domain.item.RecomendPrice com.ebay.controller.ItemController.selectRprice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'itemcontroller'
Last-Modified value for [/getRecomendPrices] is: -1
Creating new EntityManager for shared EntityManager invocation

    select
        min(itemdto0_.price) as col_0_0_,
        avg(itemdto0_.price) as col_1_0_,
        max(itemdto0_.price) as col_2_0_ 
    from
        ItemDto itemdto0_ 
    where
        itemdto0_.keyWords=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - iphone 5s
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Written [com.ebay.domain.item.RecomendPrice@1112d2c] as "application/json;charset=UTF-8" using [org.springframework.http.converter.json.MappingJacksonHttpMessageConverter@5a42c7]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/images/icon-down.png]
Looking up handler method for path /css/images/icon-down.png
Did not find handler method for [/css/images/icon-down.png]
Matching patterns for request [/css/images/icon-down.png] are [/css/**]
URI Template variables for request [/css/images/icon-down.png] are {}
Mapping [/css/images/icon-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/images/icon-down.png] is: -1
Trying relative path [images/icon-down.png] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/competitor/competitor]
Looking up handler method for path /competitor/competitor
Returning handler method [public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'loginController'
Last-Modified value for [/competitor/competitor] is: -1
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Rendering view [org.thymeleaf.spring3.view.ThymeleafView@f683b0] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/competitor.css]
Looking up handler method for path /css/competitor.css
Did not find handler method for [/css/competitor.css]
Matching patterns for request [/css/competitor.css] are [/css/**]
URI Template variables for request [/css/competitor.css] are {}
Mapping [/css/competitor.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/competitor.css] is: -1
Trying relative path [competitor.css] against base location: ServletContext resource [/css/]
Found matching resource: ServletContext resource [/css/competitor.css]
Determined media type 'text/css' for ServletContext resource [/css/competitor.css]
Resource not modified - returning 304
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.woff]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
DispatcherServlet with name 'dispatcher' processing GET request for [/css/images/icon-down.png]
Looking up handler method for path /css/fontawesome-webfont.woff
Looking up handler method for path /css/images/icon-down.png
Did not find handler method for [/css/undefined]
Matching patterns for request [/css/undefined] are [/css/**]
Did not find handler method for [/css/fontawesome-webfont.woff]
Did not find handler method for [/css/images/icon-down.png]
Matching patterns for request [/css/fontawesome-webfont.woff] are [/css/**]
URI Template variables for request [/css/undefined] are {}
URI Template variables for request [/css/fontawesome-webfont.woff] are {}
Matching patterns for request [/css/images/icon-down.png] are [/css/**]
Mapping [/css/fontawesome-webfont.woff] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/fontawesome-webfont.woff] is: -1
URI Template variables for request [/css/images/icon-down.png] are {}
Trying relative path [fontawesome-webfont.woff] against base location: ServletContext resource [/css/]
Last-Modified value for [/css/undefined] is: -1
Trying relative path [undefined] against base location: ServletContext resource [/css/]
Mapping [/css/images/icon-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
No matching resource found - returning 404
No matching resource found - returning 404
Last-Modified value for [/css/images/icon-down.png] is: -1
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Trying relative path [images/icon-down.png] against base location: ServletContext resource [/css/]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
Did not find handler method for [/css/undefined]
Matching patterns for request [/css/undefined] are [/css/**]
URI Template variables for request [/css/undefined] are {}
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.ttf]
Trying relative path [undefined] against base location: ServletContext resource [/css/]
Looking up handler method for path /css/fontawesome-webfont.ttf
No matching resource found - returning 404
Did not find handler method for [/css/fontawesome-webfont.ttf]
Matching patterns for request [/css/fontawesome-webfont.ttf] are [/css/**]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
URI Template variables for request [/css/fontawesome-webfont.ttf] are {}
Successfully completed request
Mapping [/css/fontawesome-webfont.ttf] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/fontawesome-webfont.ttf] is: -1
Trying relative path [fontawesome-webfont.ttf] against base location: ServletContext resource [/css/]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
No matching resource found - returning 404
Did not find handler method for [/css/undefined]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Matching patterns for request [/css/undefined] are [/css/**]
Successfully completed request
URI Template variables for request [/css/undefined] are {}
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
Trying relative path [undefined] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
Did not find handler method for [/css/undefined]
Matching patterns for request [/css/undefined] are [/css/**]
URI Template variables for request [/css/undefined] are {}
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
Trying relative path [undefined] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
Did not find handler method for [/css/undefined]
Matching patterns for request [/css/undefined] are [/css/**]
URI Template variables for request [/css/undefined] are {}
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
Trying relative path [undefined] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/images/icon-down.png]
Looking up handler method for path /css/images/icon-down.png
Did not find handler method for [/css/images/icon-down.png]
Matching patterns for request [/css/images/icon-down.png] are [/css/**]
URI Template variables for request [/css/images/icon-down.png] are {}
Mapping [/css/images/icon-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@436f04] and 1 interceptor
Last-Modified value for [/css/images/icon-down.png] is: -1
Trying relative path [images/icon-down.png] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/searchCompetitor]
Looking up handler method for path /searchCompetitor
Returning handler method [public com.ebay.domain.seller.Seller com.ebay.controller.CompetitorController.selectCompetitor(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'competitorcontroller'
Last-Modified value for [/searchCompetitor] is: -1
Creating new EntityManager for shared EntityManager invocation

    select
        count(*) as col_0_0_ 
    from
        SELLER sellerimpl0_ 
    where
        sellerimpl0_.SellerName=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        sellerimpl0_.Seller_ID as Seller1_3_,
        sellerimpl0_.SellerName as SellerNa2_3_,
        sellerimpl0_.Country as Country3_3_,
        sellerimpl0_.CreateDate as CreateDa4_3_,
        sellerimpl0_.Star as Star5_3_ 
    from
        SELLER sellerimpl0_ 
    where
        sellerimpl0_.SellerName=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: EntityKey[com.ebay.domain.seller.SellerImpl#41]
Resolving associations for [com.ebay.domain.seller.SellerImpl#41]
Done materializing entity [com.ebay.domain.seller.SellerImpl#41]
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Written [com.ebay.domain.seller.SellerImpl@c28287] as "application/json;charset=UTF-8" using [org.springframework.http.converter.json.MappingJacksonHttpMessageConverter@5a42c7]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/selectPring]
Looking up handler method for path /selectPring
Returning handler method [public java.util.List<com.ebay.domain.price.Pring> com.ebay.controller.CompetitorController.getPricing(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'competitorcontroller'
Last-Modified value for [/selectPring] is: -1
Creating new EntityManager for shared EntityManager invocation

    select
        feedback0_.PRICE as col_0_0_,
        count(*) as col_1_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.Seller=? 
    group by
        feedback0_.PRICE
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: 
Result set row: 1
Result row: 
Result set row: 2
Result row: 
Result set row: 3
Result row: 
Result set row: 4
Result row: 
Result set row: 5
Result row: 
Result set row: 6
Result row: 
Result set row: 7
Result row: 
Result set row: 8
Result row: 
Result set row: 9
Result row: 
Result set row: 10
Result row: 
Result set row: 11
Result row: 
Result set row: 12
Result row: 
Result set row: 13
Result row: 
Result set row: 14
Result row: 
Result set row: 15
Result row: 
Result set row: 16
Result row: 
Result set row: 17
Result row: 
Result set row: 18
Result row: 
Result set row: 19
Result row: 
Result set row: 20
Result row: 
Result set row: 21
Result row: 
Result set row: 22
Result row: 
Result set row: 23
Result row: 
Result set row: 24
Result row: 
Result set row: 25
Result row: 
Result set row: 26
Result row: 
Result set row: 27
Result row: 
Result set row: 28
Result row: 
Result set row: 29
Result row: 
Result set row: 30
Result row: 
Result set row: 31
Result row: 
Result set row: 32
Result row: 
Result set row: 33
Result row: 
Result set row: 34
Result row: 
Result set row: 35
Result row: 
Result set row: 36
Result row: 
Result set row: 37
Result row: 
Result set row: 38
Result row: 
Result set row: 39
Result row: 
Result set row: 40
Result row: 
Result set row: 41
Result row: 
Result set row: 42
Result row: 
Result set row: 43
Result row: 
Result set row: 44
Result row: 
Result set row: 45
Result row: 
Result set row: 46
Result row: 
Result set row: 47
Result row: 
Result set row: 48
Result row: 
Result set row: 49
Result row: 
Result set row: 50
Result row: 
Result set row: 51
Result row: 
Result set row: 52
Result row: 
Result set row: 53
Result row: 
Result set row: 54
Result row: 
Result set row: 55
Result row: 
Result set row: 56
Result row: 
Result set row: 57
Result row: 
Result set row: 58
Result row: 
Result set row: 59
Result row: 
Result set row: 60
Result row: 
Result set row: 61
Result row: 
Result set row: 62
Result row: 
Result set row: 63
Result row: 
Result set row: 64
Result row: 
Result set row: 65
Result row: 
Result set row: 66
Result row: 
Result set row: 67
Result row: 
Result set row: 68
Result row: 
Result set row: 69
Result row: 
Result set row: 70
Result row: 
Result set row: 71
Result row: 
Result set row: 72
Result row: 
Result set row: 73
Result row: 
Result set row: 74
Result row: 
Result set row: 75
Result row: 
Result set row: 76
Result row: 
Result set row: 77
Result row: 
Result set row: 78
Result row: 
Result set row: 79
Result row: 
Result set row: 80
Result row: 
Result set row: 81
Result row: 
Result set row: 82
Result row: 
Result set row: 83
Result row: 
Result set row: 84
Result row: 
Result set row: 85
Result row: 
Result set row: 86
Result row: 
Result set row: 87
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        max(feedback0_.PRICE) as col_0_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.Seller=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        count(*) as col_0_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.Seller=? 
        and feedback0_.PRICE<?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
binding parameter [2] as [DOUBLE] - 0.0
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        count(*) as col_0_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.Seller=? 
        and feedback0_.PRICE<? 
        and feedback0_.PRICE>?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
binding parameter [2] as [DOUBLE] - 109.75829268292684
binding parameter [3] as [DOUBLE] - 0.0
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        count(*) as col_0_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.Seller=? 
        and feedback0_.PRICE>?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
binding parameter [2] as [DOUBLE] - 109.75829268292684
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Written [[com.ebay.domain.price.Pring@1c0975e, com.ebay.domain.price.Pring@111dbcb, com.ebay.domain.price.Pring@174fd63]] as "application/json;charset=UTF-8" using [org.springframework.http.converter.json.MappingJacksonHttpMessageConverter@5a42c7]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/selectRates]
Looking up handler method for path /selectRates
Returning handler method [public com.ebay.domain.seller.RecentFeedbackratings com.ebay.controller.CompetitorController.selectRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'competitorcontroller'
Last-Modified value for [/selectRates] is: -1
Creating new EntityManager for shared EntityManager invocation

    select
        count(*) as col_0_0_ 
    from
        RecentFeedbackratings recentfeed0_ 
    where
        recentfeed0_.SellerName=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        recentfeed0_.RecentFeedRate_ID as RecentFe1_2_,
        recentfeed0_.one_Negative as one2_2_,
        recentfeed0_.one_Neutral as one3_2_,
        recentfeed0_.one_Positive as one4_2_,
        recentfeed0_.SellerName as SellerNa5_2_,
        recentfeed0_.six_Negative as six6_2_,
        recentfeed0_.six_Neutral as six7_2_,
        recentfeed0_.six_Positive as six8_2_,
        recentfeed0_.twe_Negative as twe9_2_,
        recentfeed0_.twe_Neutral as twe10_2_,
        recentfeed0_.twe_Positive as twe11_2_ 
    from
        RecentFeedbackratings recentfeed0_ 
    where
        recentfeed0_.SellerName=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: EntityKey[com.ebay.domain.seller.RecentFeedbackratings#14]
Resolving associations for [com.ebay.domain.seller.RecentFeedbackratings#14]
Done materializing entity [com.ebay.domain.seller.RecentFeedbackratings#14]
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Written [com.ebay.domain.seller.RecentFeedbackratings@3bb52a] as "application/json;charset=UTF-8" using [org.springframework.http.converter.json.MappingJacksonHttpMessageConverter@5a42c7]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/selectRates]
Looking up handler method for path /selectRates
Returning handler method [public com.ebay.domain.seller.RecentFeedbackratings com.ebay.controller.CompetitorController.selectRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'competitorcontroller'
Last-Modified value for [/selectRates] is: -1
Creating new EntityManager for shared EntityManager invocation

    select
        count(*) as col_0_0_ 
    from
        RecentFeedbackratings recentfeed0_ 
    where
        recentfeed0_.SellerName=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        recentfeed0_.RecentFeedRate_ID as RecentFe1_2_,
        recentfeed0_.one_Negative as one2_2_,
        recentfeed0_.one_Neutral as one3_2_,
        recentfeed0_.one_Positive as one4_2_,
        recentfeed0_.SellerName as SellerNa5_2_,
        recentfeed0_.six_Negative as six6_2_,
        recentfeed0_.six_Neutral as six7_2_,
        recentfeed0_.six_Positive as six8_2_,
        recentfeed0_.twe_Negative as twe9_2_,
        recentfeed0_.twe_Neutral as twe10_2_,
        recentfeed0_.twe_Positive as twe11_2_ 
    from
        RecentFeedbackratings recentfeed0_ 
    where
        recentfeed0_.SellerName=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: EntityKey[com.ebay.domain.seller.RecentFeedbackratings#14]
Resolving associations for [com.ebay.domain.seller.RecentFeedbackratings#14]
Done materializing entity [com.ebay.domain.seller.RecentFeedbackratings#14]
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Written [com.ebay.domain.seller.RecentFeedbackratings@e7c614] as "application/json;charset=UTF-8" using [org.springframework.http.converter.json.MappingJacksonHttpMessageConverter@5a42c7]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/selectItems]
Looking up handler method for path /selectItems
Returning handler method [public java.util.List<com.ebay.domain.item.Item> com.ebay.controller.CompetitorController.selectSpecialItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'competitorcontroller'
Last-Modified value for [/selectItems] is: -1
Creating new EntityManager for shared EntityManager invocation

    select
        feedback0_.ITEM_ID as col_0_0_,
        feedback0_.ITEM_Name as col_1_0_,
        feedback0_.PRICE as col_2_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.PRICE=(
            select
                max(feedback1_.PRICE) 
            from
                FEEDBACK feedback1_ 
            where
                feedback1_.Seller=?
        )
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: 
Result set row: 1
Result row: 
Result set row: 2
Result row: 
Result set row: 3
Result row: 
Result set row: 4
Result row: 
Result set row: 5
Result row: 
Result set row: 6
Result row: 
Result set row: 7
Result row: 
Result set row: 8
Result row: 
Result set row: 9
Result row: 
Result set row: 10
Result row: 
Result set row: 11
Result row: 
Result set row: 12
Result row: 
Result set row: 13
Result row: 
Result set row: 14
Result row: 
Result set row: 15
Result row: 
Result set row: 16
Result row: 
Result set row: 17
Result row: 
Result set row: 18
Result row: 
Result set row: 19
Result row: 
Result set row: 20
Result row: 
Result set row: 21
Result row: 
Result set row: 22
Result row: 
Result set row: 23
Result row: 
Result set row: 24
Result row: 
Result set row: 25
Result row: 
Result set row: 26
Result row: 
Result set row: 27
Result row: 
Result set row: 28
Result row: 
Result set row: 29
Result row: 
Result set row: 30
Result row: 
Result set row: 31
Result row: 
Result set row: 32
Result row: 
Result set row: 33
Result row: 
Result set row: 34
Result row: 
Result set row: 35
Result row: 
Result set row: 36
Result row: 
Result set row: 37
Result row: 
Result set row: 38
Result row: 
Result set row: 39
Result row: 
Result set row: 40
Result row: 
Result set row: 41
Result row: 
Result set row: 42
Result row: 
Result set row: 43
Result row: 
Result set row: 44
Result row: 
Result set row: 45
Result row: 
Result set row: 46
Result row: 
Result set row: 47
Result row: 
Result set row: 48
Result row: 
Result set row: 49
Result row: 
Result set row: 50
Result row: 
Result set row: 51
Result row: 
Result set row: 52
Result row: 
Result set row: 53
Result row: 
Result set row: 54
Result row: 
Result set row: 55
Result row: 
Result set row: 56
Result row: 
Result set row: 57
Result row: 
Result set row: 58
Result row: 
Result set row: 59
Result row: 
Result set row: 60
Result row: 
Result set row: 61
Result row: 
Result set row: 62
Result row: 
Result set row: 63
Result row: 
Result set row: 64
Result row: 
Result set row: 65
Result row: 
Result set row: 66
Result row: 
Result set row: 67
Result row: 
Result set row: 68
Result row: 
Result set row: 69
Result row: 
Result set row: 70
Result row: 
Result set row: 71
Result row: 
Result set row: 72
Result row: 
Result set row: 73
Result row: 
Result set row: 74
Result row: 
Result set row: 75
Result row: 
Result set row: 76
Result row: 
Result set row: 77
Result row: 
Result set row: 78
Result row: 
Result set row: 79
Result row: 
Result set row: 80
Result row: 
Result set row: 81
Result row: 
Result set row: 82
Result row: 
Result set row: 83
Result row: 
Result set row: 84
Result row: 
Result set row: 85
Result row: 
Result set row: 86
Result row: 
Result set row: 87
Result row: 
Result set row: 88
Result row: 
Result set row: 89
Result row: 
Result set row: 90
Result row: 
Result set row: 91
Result row: 
Result set row: 92
Result row: 
Result set row: 93
Result row: 
Result set row: 94
Result row: 
Result set row: 95
Result row: 
Result set row: 96
Result row: 
Result set row: 97
Result row: 
Result set row: 98
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        feedback0_.ITEM_ID as col_0_0_,
        feedback0_.ITEM_Name as col_1_0_,
        feedback0_.PRICE as col_2_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.PRICE=(
            select
                min(feedback1_.PRICE) 
            from
                FEEDBACK feedback1_ 
            where
                feedback1_.Seller=?
        )
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: 
Result set row: 1
Result row: 
Result set row: 2
Result row: 
Result set row: 3
Result row: 
Result set row: 4
Result row: 
Result set row: 5
Result row: 
Result set row: 6
Result row: 
Result set row: 7
Result row: 
Result set row: 8
Result row: 
Result set row: 9
Result row: 
Result set row: 10
Result row: 
Result set row: 11
Result row: 
Result set row: 12
Result row: 
Result set row: 13
Result row: 
Result set row: 14
Result row: 
Result set row: 15
Result row: 
Result set row: 16
Result row: 
Result set row: 17
Result row: 
Result set row: 18
Result row: 
Result set row: 19
Result row: 
Result set row: 20
Result row: 
Result set row: 21
Result row: 
Result set row: 22
Result row: 
Result set row: 23
Result row: 
Result set row: 24
Result row: 
Result set row: 25
Result row: 
Result set row: 26
Result row: 
Result set row: 27
Result row: 
Result set row: 28
Result row: 
Result set row: 29
Result row: 
Result set row: 30
Result row: 
Result set row: 31
Result row: 
Result set row: 32
Result row: 
Result set row: 33
Result row: 
Result set row: 34
Result row: 
Result set row: 35
Result row: 
Result set row: 36
Result row: 
Result set row: 37
Result row: 
Result set row: 38
Result row: 
Result set row: 39
Result row: 
Result set row: 40
Result row: 
Result set row: 41
Result row: 
Result set row: 42
Result row: 
Result set row: 43
Result row: 
Result set row: 44
Result row: 
Result set row: 45
Result row: 
Result set row: 46
Result row: 
Result set row: 47
Result row: 
Result set row: 48
Result row: 
Result set row: 49
Result row: 
Result set row: 50
Result row: 
Result set row: 51
Result row: 
Result set row: 52
Result row: 
Result set row: 53
Result row: 
Result set row: 54
Result row: 
Result set row: 55
Result row: 
Result set row: 56
Result row: 
Result set row: 57
Result row: 
Result set row: 58
Result row: 
Result set row: 59
Result row: 
Result set row: 60
Result row: 
Result set row: 61
Result row: 
Result set row: 62
Result row: 
Result set row: 63
Result row: 
Result set row: 64
Result row: 
Result set row: 65
Result row: 
Result set row: 66
Result row: 
Result set row: 67
Result row: 
Result set row: 68
Result row: 
Result set row: 69
Result row: 
Result set row: 70
Result row: 
Result set row: 71
Result row: 
Result set row: 72
Result row: 
Result set row: 73
Result row: 
Result set row: 74
Result row: 
Result set row: 75
Result row: 
Result set row: 76
Result row: 
Result set row: 77
Result row: 
Result set row: 78
Result row: 
Result set row: 79
Result row: 
Result set row: 80
Result row: 
Result set row: 81
Result row: 
Result set row: 82
Result row: 
Result set row: 83
Result row: 
Result set row: 84
Result row: 
Result set row: 85
Result row: 
Result set row: 86
Result row: 
Result set row: 87
Result row: 
Result set row: 88
Result row: 
Result set row: 89
Result row: 
Result set row: 90
Result row: 
Result set row: 91
Result row: 
Result set row: 92
Result row: 
Result set row: 93
Result row: 
Result set row: 94
Result row: 
Result set row: 95
Result row: 
Result set row: 96
Result row: 
Result set row: 97
Result row: 
Result set row: 98
Result row: 
Result set row: 99
Result row: 
Result set row: 100
Result row: 
Result set row: 101
Result row: 
Result set row: 102
Result row: 
Result set row: 103
Result row: 
Result set row: 104
Result row: 
Result set row: 105
Result row: 
Result set row: 106
Result row: 
Result set row: 107
Result row: 
Result set row: 108
Result row: 
Result set row: 109
Result row: 
Result set row: 110
Result row: 
Result set row: 111
Result row: 
Result set row: 112
Result row: 
Result set row: 113
Result row: 
Result set row: 114
Result row: 
Result set row: 115
Result row: 
Result set row: 116
Result row: 
Result set row: 117
Result row: 
Result set row: 118
Result row: 
Result set row: 119
Result row: 
Result set row: 120
Result row: 
Result set row: 121
Result row: 
Result set row: 122
Result row: 
Result set row: 123
Result row: 
Result set row: 124
Result row: 
Result set row: 125
Result row: 
Result set row: 126
Result row: 
Result set row: 127
Result row: 
Result set row: 128
Result row: 
Result set row: 129
Result row: 
Result set row: 130
Result row: 
Result set row: 131
Result row: 
Result set row: 132
Result row: 
Result set row: 133
Result row: 
Result set row: 134
Result row: 
Result set row: 135
Result row: 
Result set row: 136
Result row: 
Result set row: 137
Result row: 
Result set row: 138
Result row: 
Result set row: 139
Result row: 
Result set row: 140
Result row: 
Result set row: 141
Result row: 
Result set row: 142
Result row: 
Result set row: 143
Result row: 
Result set row: 144
Result row: 
Result set row: 145
Result row: 
Result set row: 146
Result row: 
Result set row: 147
Result row: 
Result set row: 148
Result row: 
Result set row: 149
Result row: 
Result set row: 150
Result row: 
Result set row: 151
Result row: 
Result set row: 152
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Written [[com.ebay.domain.item.Item@de5567, com.ebay.domain.item.Item@b8fa5c, com.ebay.domain.item.Item@3cb48a, com.ebay.domain.item.Item@170f305, com.ebay.domain.item.Item@630565, com.ebay.domain.item.Item@f73351, com.ebay.domain.item.Item@14a1cc6, com.ebay.domain.item.Item@a7150e, com.ebay.domain.item.Item@1577ec8, com.ebay.domain.item.Item@144af6c, com.ebay.domain.item.Item@58de27, com.ebay.domain.item.Item@6103db, com.ebay.domain.item.Item@144556d, com.ebay.domain.item.Item@1446ad5, com.ebay.domain.item.Item@c1d1e2, com.ebay.domain.item.Item@ba52f9, com.ebay.domain.item.Item@9d5de9, com.ebay.domain.item.Item@1806c4f, com.ebay.domain.item.Item@46e577, com.ebay.domain.item.Item@830ec0, com.ebay.domain.item.Item@3d815d, com.ebay.domain.item.Item@1f81655, com.ebay.domain.item.Item@823d00, com.ebay.domain.item.Item@72e1d4, com.ebay.domain.item.Item@4832dc, com.ebay.domain.item.Item@3410d, com.ebay.domain.item.Item@1a3fa09, com.ebay.domain.item.Item@747412, com.ebay.domain.item.Item@1708786, com.ebay.domain.item.Item@d1819d, com.ebay.domain.item.Item@94ab76, com.ebay.domain.item.Item@8507ab, com.ebay.domain.item.Item@1ba7613, com.ebay.domain.item.Item@9deecc, com.ebay.domain.item.Item@a89b99, com.ebay.domain.item.Item@17f9397, com.ebay.domain.item.Item@b2c640, com.ebay.domain.item.Item@f5ce94, com.ebay.domain.item.Item@1cd72bc, com.ebay.domain.item.Item@127b76a, com.ebay.domain.item.Item@7ac408, com.ebay.domain.item.Item@1dbf2b2, com.ebay.domain.item.Item@11aa1cb, com.ebay.domain.item.Item@1742246, com.ebay.domain.item.Item@1764d7e, com.ebay.domain.item.Item@1d9a9b1, com.ebay.domain.item.Item@113ce78, com.ebay.domain.item.Item@158655b, com.ebay.domain.item.Item@6654b9, com.ebay.domain.item.Item@445db0, com.ebay.domain.item.Item@62e691, com.ebay.domain.item.Item@10f66ec, com.ebay.domain.item.Item@2e335f, com.ebay.domain.item.Item@12ede96, com.ebay.domain.item.Item@177484, com.ebay.domain.item.Item@1e29bb2, com.ebay.domain.item.Item@5bf96d, com.ebay.domain.item.Item@5471a6, com.ebay.domain.item.Item@1f1779e, com.ebay.domain.item.Item@1e45641, com.ebay.domain.item.Item@1dad1a8, com.ebay.domain.item.Item@fa74b9, com.ebay.domain.item.Item@1055280, com.ebay.domain.item.Item@6b74e6, com.ebay.domain.item.Item@c7d97e, com.ebay.domain.item.Item@97f730, com.ebay.domain.item.Item@e59278, com.ebay.domain.item.Item@1f307d1, com.ebay.domain.item.Item@865044, com.ebay.domain.item.Item@1ffdb19, com.ebay.domain.item.Item@896f57, com.ebay.domain.item.Item@eccc85, com.ebay.domain.item.Item@673456, com.ebay.domain.item.Item@19d34c7, com.ebay.domain.item.Item@1f420ba, com.ebay.domain.item.Item@90b630, com.ebay.domain.item.Item@a932a2, com.ebay.domain.item.Item@3b50ff, com.ebay.domain.item.Item@42d303, com.ebay.domain.item.Item@12baab7, com.ebay.domain.item.Item@1d50010, com.ebay.domain.item.Item@f72dd7, com.ebay.domain.item.Item@1e2a099, com.ebay.domain.item.Item@19dd738, com.ebay.domain.item.Item@19cc971, com.ebay.domain.item.Item@6d51ef, com.ebay.domain.item.Item@11e4b29, com.ebay.domain.item.Item@1d88e0a, com.ebay.domain.item.Item@556df1, com.ebay.domain.item.Item@a4f091, com.ebay.domain.item.Item@adc50c, com.ebay.domain.item.Item@63c13c, com.ebay.domain.item.Item@1235185, com.ebay.domain.item.Item@1bd0f0a, com.ebay.domain.item.Item@12692d5, com.ebay.domain.item.Item@17211d4, com.ebay.domain.item.Item@1f099f1, com.ebay.domain.item.Item@10aa66a, com.ebay.domain.item.Item@339fa3, com.ebay.domain.item.Item@1359af3, com.ebay.domain.item.Item@4ff339, com.ebay.domain.item.Item@e93cfd, com.ebay.domain.item.Item@a315e5, com.ebay.domain.item.Item@f29ffa, com.ebay.domain.item.Item@e4f765, com.ebay.domain.item.Item@2e45e5, com.ebay.domain.item.Item@1eebd7a, com.ebay.domain.item.Item@d9c4c3, com.ebay.domain.item.Item@10511ef, com.ebay.domain.item.Item@1dc6cb0, com.ebay.domain.item.Item@63d864, com.ebay.domain.item.Item@113beac, com.ebay.domain.item.Item@14b2c81, com.ebay.domain.item.Item@56cff8, com.ebay.domain.item.Item@16fc4ce, com.ebay.domain.item.Item@e1da27, com.ebay.domain.item.Item@1b936e4, com.ebay.domain.item.Item@c2e9fc, com.ebay.domain.item.Item@8fc6c3, com.ebay.domain.item.Item@14234b3, com.ebay.domain.item.Item@191fc6c, com.ebay.domain.item.Item@1531848, com.ebay.domain.item.Item@5f52f0, com.ebay.domain.item.Item@3e2466, com.ebay.domain.item.Item@1c7acde, com.ebay.domain.item.Item@2653f2, com.ebay.domain.item.Item@514c89, com.ebay.domain.item.Item@177e2a4, com.ebay.domain.item.Item@1c0b835, com.ebay.domain.item.Item@17dc253, com.ebay.domain.item.Item@160e852, com.ebay.domain.item.Item@134841a, com.ebay.domain.item.Item@ccdd1f, com.ebay.domain.item.Item@1c920af, com.ebay.domain.item.Item@180d48a, com.ebay.domain.item.Item@101cc7d, com.ebay.domain.item.Item@118596d, com.ebay.domain.item.Item@1972584, com.ebay.domain.item.Item@203865, com.ebay.domain.item.Item@15693e1, com.ebay.domain.item.Item@106b736, com.ebay.domain.item.Item@1e6535f, com.ebay.domain.item.Item@6b9a8a, com.ebay.domain.item.Item@6ef7fc, com.ebay.domain.item.Item@15afa08, com.ebay.domain.item.Item@1d53f9c, com.ebay.domain.item.Item@1433660, com.ebay.domain.item.Item@1a6fb1f, com.ebay.domain.item.Item@1b0ea84, com.ebay.domain.item.Item@1f48514, com.ebay.domain.item.Item@4d03d3, com.ebay.domain.item.Item@3611cc, com.ebay.domain.item.Item@1ca8903, com.ebay.domain.item.Item@1e9333c, com.ebay.domain.item.Item@122d748, com.ebay.domain.item.Item@63ce17, com.ebay.domain.item.Item@6f87cd, com.ebay.domain.item.Item@3ce38d, com.ebay.domain.item.Item@17f7eba, com.ebay.domain.item.Item@1590e1c, com.ebay.domain.item.Item@1ad6eb4, com.ebay.domain.item.Item@13f1657, com.ebay.domain.item.Item@d3b9c7, com.ebay.domain.item.Item@49ec8e, com.ebay.domain.item.Item@1498ae4, com.ebay.domain.item.Item@13d8693, com.ebay.domain.item.Item@4e2ffe, com.ebay.domain.item.Item@1310338, com.ebay.domain.item.Item@ca6bc9, com.ebay.domain.item.Item@16a85a3, com.ebay.domain.item.Item@6b9215, com.ebay.domain.item.Item@43c4d1, com.ebay.domain.item.Item@12e964d, com.ebay.domain.item.Item@18daa3f, com.ebay.domain.item.Item@1a44c71, com.ebay.domain.item.Item@196b168, com.ebay.domain.item.Item@594fc4, com.ebay.domain.item.Item@184015a, com.ebay.domain.item.Item@174f5ef, com.ebay.domain.item.Item@1be26dd, com.ebay.domain.item.Item@e98251, com.ebay.domain.item.Item@6ad0d4, com.ebay.domain.item.Item@b43db2, com.ebay.domain.item.Item@13ea6d2, com.ebay.domain.item.Item@3a2dd6, com.ebay.domain.item.Item@197513c, com.ebay.domain.item.Item@1563bfb, com.ebay.domain.item.Item@7bfe46, com.ebay.domain.item.Item@72cff8, com.ebay.domain.item.Item@1b3c8f7, com.ebay.domain.item.Item@4eecb2, com.ebay.domain.item.Item@195d9e0, com.ebay.domain.item.Item@1131259, com.ebay.domain.item.Item@119cd1b, com.ebay.domain.item.Item@e8c3df, com.ebay.domain.item.Item@193a690, com.ebay.domain.item.Item@9c6b02, com.ebay.domain.item.Item@1358b16, com.ebay.domain.item.Item@3e908b, com.ebay.domain.item.Item@183d359, com.ebay.domain.item.Item@1a8a2e4, com.ebay.domain.item.Item@5e620e, com.ebay.domain.item.Item@77a833, com.ebay.domain.item.Item@1c3b4b7, com.ebay.domain.item.Item@18d6aab, com.ebay.domain.item.Item@15636b0, com.ebay.domain.item.Item@1207f59, com.ebay.domain.item.Item@88d5ab, com.ebay.domain.item.Item@183e464, com.ebay.domain.item.Item@787f7, com.ebay.domain.item.Item@6f89f8, com.ebay.domain.item.Item@cb1099, com.ebay.domain.item.Item@1aebb93, com.ebay.domain.item.Item@9cdcde, com.ebay.domain.item.Item@687b57, com.ebay.domain.item.Item@179a281, com.ebay.domain.item.Item@9bdc87, com.ebay.domain.item.Item@ab37e5, com.ebay.domain.item.Item@e2a3ef, com.ebay.domain.item.Item@178cd80, com.ebay.domain.item.Item@1fb9255, com.ebay.domain.item.Item@1441098, com.ebay.domain.item.Item@19d846c, com.ebay.domain.item.Item@6105a6, com.ebay.domain.item.Item@1b9ef20, com.ebay.domain.item.Item@25f63, com.ebay.domain.item.Item@1c460b0, com.ebay.domain.item.Item@1a7edc7, com.ebay.domain.item.Item@1eba4aa, com.ebay.domain.item.Item@187b194, com.ebay.domain.item.Item@19b9456, com.ebay.domain.item.Item@127c602, com.ebay.domain.item.Item@38db08, com.ebay.domain.item.Item@b40c2f, com.ebay.domain.item.Item@8bf375, com.ebay.domain.item.Item@1cb4c4, com.ebay.domain.item.Item@9fbd40, com.ebay.domain.item.Item@141df20, com.ebay.domain.item.Item@19fea04, com.ebay.domain.item.Item@1bcc923, com.ebay.domain.item.Item@1394bfc, com.ebay.domain.item.Item@abcea5, com.ebay.domain.item.Item@18bb81c, com.ebay.domain.item.Item@1e44151, com.ebay.domain.item.Item@7c30e3, com.ebay.domain.item.Item@16d94aa, com.ebay.domain.item.Item@13b4da3, com.ebay.domain.item.Item@661a67, com.ebay.domain.item.Item@14f6586, com.ebay.domain.item.Item@1925bc1, com.ebay.domain.item.Item@1c61520, com.ebay.domain.item.Item@195223b]] as "application/json;charset=UTF-8" using [org.springframework.http.converter.json.MappingJacksonHttpMessageConverter@5a42c7]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/selectSingleSeller]
Looking up handler method for path /selectSingleSeller
Returning handler method [public com.ebay.domain.seller.SellerDto com.ebay.controller.CompetitorController.selectDtoSingleSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'competitorcontroller'
Last-Modified value for [/selectSingleSeller] is: -1
Creating new EntityManager for shared EntityManager invocation

    select
        to_days(max(Feed_Date))-to_days(min(Feed_Date)) as col_0_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.Seller=?
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        sum(feedback0_.PRICE) as col_0_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.Seller=? 
    group by
        feedback0_.Seller
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        count(*) as col_0_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.Seller=? 
        and feedback0_.ATTITUDE=? 
    group by
        feedback0_.Seller
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
binding parameter [2] as [VARCHAR] - Positive feedback rating
Result set row: 0
Result row: 
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Creating new EntityManager for shared EntityManager invocation

    select
        count(*) as col_0_0_ 
    from
        FEEDBACK feedback0_ 
    where
        feedback0_.Seller=? 
        and feedback0_.ATTITUDE=? 
    group by
        feedback0_.Seller
Obtaining JDBC connection
Obtained JDBC connection
binding parameter [1] as [VARCHAR] - huyhoang1008
binding parameter [2] as [VARCHAR] - Negative feedback rating
Closing JPA EntityManager
Releasing JDBC connection
Released JDBC connection
Written [com.ebay.domain.seller.SellerDto@d6c6ca] as "application/json;charset=UTF-8" using [org.springframework.http.converter.json.MappingJacksonHttpMessageConverter@5a42c7]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Root WebApplicationContext: initialization started
Refreshing Root WebApplicationContext: startup date [Fri Jun 06 23:04:00 CST 2014]; root of context hierarchy
Initializing new StandardServletEnvironment
Adding [servletConfigInitParams] PropertySource with lowest search precedence
Adding [servletContextInitParams] PropertySource with lowest search precedence
Adding [jndiProperties] PropertySource with lowest search precedence
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]
Replacing [servletContextInitParams] PropertySource with [servletContextInitParams]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from ServletContext resource [/WEB-INF/applicationContext.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Found XML schema [http://www.springframework.org/schema/context/spring-context-3.2.xsd] in classpath: org/springframework/context/config/spring-context-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tool/spring-tool-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-tool-3.2.xsd
Found XML schema [http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd] in classpath: org/springframework/web/servlet/config/spring-mvc-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tx/spring-tx-3.2.xsd] in classpath: org/springframework/transaction/config/spring-tx-3.2.xsd
Loading bean definitions
Loaded NamespaceHandler mappings: {http://www.springframework.org/schema/p=org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler, http://www.springframework.org/schema/mvc=org.springframework.web.servlet.config.MvcNamespaceHandler, http://www.springframework.org/schema/util=org.springframework.beans.factory.xml.UtilNamespaceHandler, http://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler, http://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler, http://www.springframework.org/schema/jdbc=org.springframework.jdbc.config.JdbcNamespaceHandler, http://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler, http://www.springframework.org/schema/c=org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler, http://www.springframework.org/schema/tx=org.springframework.transaction.config.TxNamespaceHandler, http://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler, http://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler, http://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler}
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\controller]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\controller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/controller/**/*.class]
Resolved location pattern [classpath*:com/ebay/controller/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\service]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/service/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerServieImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\dao]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/dao/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedbackDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/common/persistence/**/*.class]
Resolved location pattern [classpath*:com/ebay/common/persistence/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#eed95b]
Neither XML 'id' nor 'name' specified - using generated bean name [org.thymeleaf.spring3.view.ThymeleafViewResolver#0]
Loaded 54 bean definitions from location pattern [/WEB-INF/applicationContext.xml]
Bean factory for Root WebApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory@12ab76e: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor]; root of factory hierarchy
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Eagerly caching bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Adding [environmentProperties] PropertySource with lowest search precedence
Loading properties file from URL [file:/E:/ebay/ebay-develop/target/classes/properties/jdbc.properties]
Adding [localProperties] PropertySource with lowest search precedence
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Eagerly caching bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Eagerly caching bean 'org.springframework.aop.config.internalAutoProxyCreator' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@a49218]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@600ae2]
Unable to locate ThemeSource with name 'themeSource': using default [org.springframework.ui.context.support.ResourceBundleThemeSource@15243f4]
Creating shared instance of singleton bean 'entityManagerFactory'
Creating instance of bean 'entityManagerFactory'
Eagerly caching bean 'entityManagerFactory' to allow for resolving potential circular references
Creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#eed95b'
Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Eagerly caching bean 'org.springframework.transaction.config.internalTransactionAdvisor' to allow for resolving potential circular references
Creating shared instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Eagerly caching bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Finished creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#eed95b'
Invoking afterPropertiesSet() on bean with name 'entityManagerFactory'
Building JPA container EntityManagerFactory for persistence unit 'ePU'
Adding type registration boolean -> org.hibernate.type.BooleanType@bcf6bf
Adding type registration boolean -> org.hibernate.type.BooleanType@bcf6bf
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@bcf6bf
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@cb4888
Adding type registration true_false -> org.hibernate.type.TrueFalseType@1372c26
Adding type registration yes_no -> org.hibernate.type.YesNoType@917c5e
Adding type registration byte -> org.hibernate.type.ByteType@5319cc
Adding type registration byte -> org.hibernate.type.ByteType@5319cc
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@5319cc
Adding type registration character -> org.hibernate.type.CharacterType@1a36912
Adding type registration char -> org.hibernate.type.CharacterType@1a36912
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1a36912
Adding type registration short -> org.hibernate.type.ShortType@c6fd33
Adding type registration short -> org.hibernate.type.ShortType@c6fd33
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@c6fd33
Adding type registration integer -> org.hibernate.type.IntegerType@18d0ff8
Adding type registration int -> org.hibernate.type.IntegerType@18d0ff8
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@18d0ff8
Adding type registration long -> org.hibernate.type.LongType@1f525ec
Adding type registration long -> org.hibernate.type.LongType@1f525ec
Adding type registration java.lang.Long -> org.hibernate.type.LongType@1f525ec
Adding type registration float -> org.hibernate.type.FloatType@1705a11
Adding type registration float -> org.hibernate.type.FloatType@1705a11
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1705a11
Adding type registration double -> org.hibernate.type.DoubleType@1c154c2
Adding type registration double -> org.hibernate.type.DoubleType@1c154c2
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1c154c2
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@a3a141
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@a3a141
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1ece9b5
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1ece9b5
Adding type registration string -> org.hibernate.type.StringType@1eb1172
Adding type registration java.lang.String -> org.hibernate.type.StringType@1eb1172
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1779d1c
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@38c4de
Adding type registration url -> org.hibernate.type.UrlType@1cc2b7a
Adding type registration java.net.URL -> org.hibernate.type.UrlType@1cc2b7a
Adding type registration date -> org.hibernate.type.DateType@1c8da95
Adding type registration java.sql.Date -> org.hibernate.type.DateType@1c8da95
Adding type registration time -> org.hibernate.type.TimeType@2617a
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2617a
Adding type registration timestamp -> org.hibernate.type.TimestampType@82c175
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@82c175
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@82c175
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@bc0383
Adding type registration calendar -> org.hibernate.type.CalendarType@1b6ac6d
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1b6ac6d
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1b6ac6d
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@1fa6fb6
Adding type registration locale -> org.hibernate.type.LocaleType@13f4b39
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@13f4b39
Adding type registration currency -> org.hibernate.type.CurrencyType@319ef6
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@319ef6
Adding type registration timezone -> org.hibernate.type.TimeZoneType@10cfe81
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10cfe81
Adding type registration class -> org.hibernate.type.ClassType@18d6ec4
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@18d6ec4
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@e9311d
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@e9311d
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@1b076c8
Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@17d68f9
Adding type registration binary -> org.hibernate.type.BinaryType@f71002
Adding type registration byte[] -> org.hibernate.type.BinaryType@f71002
Adding type registration [B -> org.hibernate.type.BinaryType@f71002
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@1ad264
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@1ad264
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@1ad264
Adding type registration image -> org.hibernate.type.ImageType@7eeb51
Adding type registration characters -> org.hibernate.type.CharArrayType@6932cb
Adding type registration char[] -> org.hibernate.type.CharArrayType@6932cb
Adding type registration [C -> org.hibernate.type.CharArrayType@6932cb
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@ce7760
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@ce7760
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@ce7760
Adding type registration text -> org.hibernate.type.TextType@d942c2
Adding type registration ntext -> org.hibernate.type.NTextType@1975da5
Adding type registration blob -> org.hibernate.type.BlobType@1ed1906
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1ed1906
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@9ee94e
Adding type registration clob -> org.hibernate.type.ClobType@18b74de
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@18b74de
Adding type registration nclob -> org.hibernate.type.NClobType@1af67f9
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@1af67f9
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@14c031d
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@a59bb6
Adding type registration serializable -> org.hibernate.type.SerializableType@14df922
Adding type registration object -> org.hibernate.type.ObjectType@19cf842
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@19cf842
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@2f8b9
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@11766d3
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@15fbcbf
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@60a675
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1504f9f
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@19b5065
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1bb3782
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@397016
HCANN000001: Hibernate Commons Annotations {4.0.1.Final}
HHH000412: Hibernate Core {4.2.2.Final}
HHH000206: hibernate.properties not found
HHH000021: Bytecode provider name : javassist
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Adding type registration boolean -> org.hibernate.type.BooleanType@bcf6bf
Adding type registration boolean -> org.hibernate.type.BooleanType@bcf6bf
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@bcf6bf
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@cb4888
Adding type registration true_false -> org.hibernate.type.TrueFalseType@1372c26
Adding type registration yes_no -> org.hibernate.type.YesNoType@917c5e
Adding type registration byte -> org.hibernate.type.ByteType@5319cc
Adding type registration byte -> org.hibernate.type.ByteType@5319cc
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@5319cc
Adding type registration character -> org.hibernate.type.CharacterType@1a36912
Adding type registration char -> org.hibernate.type.CharacterType@1a36912
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1a36912
Adding type registration short -> org.hibernate.type.ShortType@c6fd33
Adding type registration short -> org.hibernate.type.ShortType@c6fd33
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@c6fd33
Adding type registration integer -> org.hibernate.type.IntegerType@18d0ff8
Adding type registration int -> org.hibernate.type.IntegerType@18d0ff8
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@18d0ff8
Adding type registration long -> org.hibernate.type.LongType@1f525ec
Adding type registration long -> org.hibernate.type.LongType@1f525ec
Adding type registration java.lang.Long -> org.hibernate.type.LongType@1f525ec
Adding type registration float -> org.hibernate.type.FloatType@1705a11
Adding type registration float -> org.hibernate.type.FloatType@1705a11
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1705a11
Adding type registration double -> org.hibernate.type.DoubleType@1c154c2
Adding type registration double -> org.hibernate.type.DoubleType@1c154c2
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1c154c2
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@a3a141
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@a3a141
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1ece9b5
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1ece9b5
Adding type registration string -> org.hibernate.type.StringType@1eb1172
Adding type registration java.lang.String -> org.hibernate.type.StringType@1eb1172
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1779d1c
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@38c4de
Adding type registration url -> org.hibernate.type.UrlType@1cc2b7a
Adding type registration java.net.URL -> org.hibernate.type.UrlType@1cc2b7a
Adding type registration date -> org.hibernate.type.DateType@1c8da95
Adding type registration java.sql.Date -> org.hibernate.type.DateType@1c8da95
Adding type registration time -> org.hibernate.type.TimeType@2617a
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2617a
Adding type registration timestamp -> org.hibernate.type.TimestampType@82c175
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@82c175
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@82c175
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@bc0383
Adding type registration calendar -> org.hibernate.type.CalendarType@1b6ac6d
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1b6ac6d
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1b6ac6d
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@1fa6fb6
Adding type registration locale -> org.hibernate.type.LocaleType@13f4b39
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@13f4b39
Adding type registration currency -> org.hibernate.type.CurrencyType@319ef6
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@319ef6
Adding type registration timezone -> org.hibernate.type.TimeZoneType@10cfe81
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10cfe81
Adding type registration class -> org.hibernate.type.ClassType@18d6ec4
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@18d6ec4
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@e9311d
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@e9311d
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@1b076c8
Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@17d68f9
Adding type registration binary -> org.hibernate.type.BinaryType@f71002
Adding type registration byte[] -> org.hibernate.type.BinaryType@f71002
Adding type registration [B -> org.hibernate.type.BinaryType@f71002
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@1ad264
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@1ad264
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@1ad264
Adding type registration image -> org.hibernate.type.ImageType@7eeb51
Adding type registration characters -> org.hibernate.type.CharArrayType@6932cb
Adding type registration char[] -> org.hibernate.type.CharArrayType@6932cb
Adding type registration [C -> org.hibernate.type.CharArrayType@6932cb
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@ce7760
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@ce7760
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@ce7760
Adding type registration text -> org.hibernate.type.TextType@d942c2
Adding type registration ntext -> org.hibernate.type.NTextType@1975da5
Adding type registration blob -> org.hibernate.type.BlobType@1ed1906
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1ed1906
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@9ee94e
Adding type registration clob -> org.hibernate.type.ClobType@18b74de
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@18b74de
Adding type registration nclob -> org.hibernate.type.NClobType@1af67f9
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@1af67f9
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@14c031d
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@a59bb6
Adding type registration serializable -> org.hibernate.type.SerializableType@14df922
Adding type registration object -> org.hibernate.type.ObjectType@19cf842
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@19cf842
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@11390c9
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1869237
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@1e961de
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@118431c
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1ddf857
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1db553c
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@b8dd3f
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@c57137
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Processing PersistenceUnitInfo [
	name: ePU
	persistence provider classname: org.hibernate.ejb.HibernatePersistence
	classloader: WebAppClassLoader=18157796@11510e4
	Temporary classloader: org.springframework.instrument.classloading.SimpleThrowawayClassLoader@e3ab86
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/E:/ebay/ebay-develop/target/classes
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		com.ebay.domain.customer.CustomerImpl
		com.ebay.domain.user.User
		com.ebay.domain.seller.SellerImpl
		com.ebay.domain.seller.RecentFeedbackratings
		com.ebay.domain.feedback.FeedBack
		com.ebay.domain.item.ItemDto]
	Mapping files names [
		config/jpa/domain/customer.orm.xml
		config/jpa/domain/user.orm.xml
		config/jpa/domain/rate.orm.xml
		config/jpa/domain/seller.orm.xml
		config/jpa/domain/feedback.orm.xml
		config/jpa/domain/item.orm.xml]
	Properties [
		hibernate.connection.driver_class: com.mysql.jdbc.Driver
		hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
		hibernate.max_fetch_depth: 3
		hibernate.format_sql: true
		hibernate.connection.username: root
		hibernate.hbm2ddl.auto: update
		hibernate.connection.url: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8
		hibernate.connection.password: root
		hibernate.show_sql: true]
Detect class: true; detect hbm: true
Detect class: true; detect hbm: true
Searching mapped entities in jar/par: file:/E:/ebay/ebay-develop/target/classes
Filtering: com.ebay.common.ClientFactory
Filtering: com.ebay.common.Constants
Filtering: com.ebay.common.handler.JAXWSHandler
Filtering: com.ebay.common.handler.ServiceHandlerResolver
Java element filter matched for com.ebay.common
Filtering: com.ebay.common.persistence.EntityConfiguration
Filtering: com.ebay.controller.CompetitorController
Filtering: com.ebay.controller.ItemController
Filtering: com.ebay.controller.LoginController
Filtering: com.ebay.dao.customer.CustomerDao
Filtering: com.ebay.dao.customer.CustomerDaoImpl
Filtering: com.ebay.dao.feedback.FeedbackDao
Filtering: com.ebay.dao.feedback.FeedBackDaoImpl
Filtering: com.ebay.dao.item.ItemDao
Filtering: com.ebay.dao.item.ItemDaoImpl
Filtering: com.ebay.dao.seller.RatesDao
Filtering: com.ebay.dao.seller.RatesDaoImpl
Filtering: com.ebay.dao.seller.SellerDao
Filtering: com.ebay.dao.seller.SellerDaoImpl
Java element filter matched for com.ebay.dao.user
Filtering: com.ebay.dao.user.UserDao
Filtering: com.ebay.dao.user.UserDaoImpl
Filtering: com.ebay.domain.customer.Customer
Filtering: com.ebay.domain.customer.CustomerImpl
Java element filter matched for com.ebay.domain.customer.CustomerImpl
Filtering: com.ebay.domain.feedback.FeedBack
Java element filter matched for com.ebay.domain.feedback.FeedBack
Filtering: com.ebay.domain.item.Item
Filtering: com.ebay.domain.item.ItemDto
Java element filter matched for com.ebay.domain.item.ItemDto
Filtering: com.ebay.domain.item.RecomendPrice
Filtering: com.ebay.domain.price.PriceDot
Filtering: com.ebay.domain.price.Pring
Filtering: com.ebay.domain.seller.DaySellDto
Filtering: com.ebay.domain.seller.RecentFeedbackratings
Java element filter matched for com.ebay.domain.seller.RecentFeedbackratings
Filtering: com.ebay.domain.seller.Seller
Filtering: com.ebay.domain.seller.SellerDto
Filtering: com.ebay.domain.seller.SellerImpl
Java element filter matched for com.ebay.domain.seller.SellerImpl
Filtering: com.ebay.domain.seller.SellerInfoDto
Filtering: com.ebay.domain.seller.WeekSellInfo
Filtering: com.ebay.domain.user.User
Java element filter matched for com.ebay.domain.user.User
Filtering: com.ebay.ebay_develop.App
Filtering: com.ebay.ebay_develop.Img
Filtering: com.ebay.find.FindItemsByCategory
Filtering: com.ebay.find.FindItemsByKeyWords
Filtering: com.ebay.find.FindItemsByProduct
Filtering: com.ebay.find.FindItemsInStore
Filtering: com.ebay.find.TestFind
Filtering: com.ebay.form.UserForm
Filtering: com.ebay.get.GetRecommendedKeyWords
Java element filter matched for com.ebay.get
Filtering: com.ebay.init.ClientConfigInit
Java element filter matched for com.ebay.init
Filtering: com.ebay.service.customer.CustomerService
Filtering: com.ebay.service.customer.CustomerServieImpl
Filtering: com.ebay.service.feedback.FeedbackService
Filtering: com.ebay.service.feedback.FeedbackServiceImpl
Filtering: com.ebay.service.item.ItemService
Filtering: com.ebay.service.item.ItemServiceImpl
Filtering: com.ebay.service.seller.SellerService
Filtering: com.ebay.service.seller.SellerServiceImpl
Java element filter matched for com.ebay.service.user
Filtering: com.ebay.service.user.UserService
Filtering: com.ebay.service.user.UserServiceImpl
Filtering: com.ebay.services.client.ClientConfig
Filtering: com.ebay.services.client.FindingServiceClientFactory
Java element filter matched for com.ebay.services.client
Filtering: com.ebay.services.finding.AckValue
Filtering: com.ebay.services.finding.Adapter1
Filtering: com.ebay.services.finding.Affiliate
Filtering: com.ebay.services.finding.Amount
Filtering: com.ebay.services.finding.Aspect
Filtering: com.ebay.services.finding.AspectFilter
Filtering: com.ebay.services.finding.AspectHistogramContainer
Filtering: com.ebay.services.finding.AspectValueHistogram
Filtering: com.ebay.services.finding.BaseFindingServiceRequest
Filtering: com.ebay.services.finding.BaseFindingServiceResponse
Filtering: com.ebay.services.finding.BaseServiceRequest
Filtering: com.ebay.services.finding.BaseServiceResponse
Filtering: com.ebay.services.finding.Category
Filtering: com.ebay.services.finding.CategoryHistogram
Filtering: com.ebay.services.finding.CategoryHistogramContainer
Filtering: com.ebay.services.finding.Condition
Filtering: com.ebay.services.finding.ConditionHistogram
Filtering: com.ebay.services.finding.ConditionHistogramContainer
Filtering: com.ebay.services.finding.Distance
Filtering: com.ebay.services.finding.DomainFilter
Filtering: com.ebay.services.finding.ErrorCategory
Filtering: com.ebay.services.finding.ErrorData
Filtering: com.ebay.services.finding.ErrorMessage
Filtering: com.ebay.services.finding.ErrorParameter
Filtering: com.ebay.services.finding.ErrorSeverity
Filtering: com.ebay.services.finding.ExtensionType
Filtering: com.ebay.services.finding.FindCompletedItemsRequest
Filtering: com.ebay.services.finding.FindCompletedItemsResponse
Filtering: com.ebay.services.finding.FindingService
Filtering: com.ebay.services.finding.FindingServicePortType
Filtering: com.ebay.services.finding.FindItemsAdvancedRequest
Filtering: com.ebay.services.finding.FindItemsAdvancedResponse
Filtering: com.ebay.services.finding.FindItemsByCategoryRequest
Filtering: com.ebay.services.finding.FindItemsByCategoryResponse
Filtering: com.ebay.services.finding.FindItemsByKeywordsRequest
Filtering: com.ebay.services.finding.FindItemsByKeywordsResponse
Filtering: com.ebay.services.finding.FindItemsByProductRequest
Filtering: com.ebay.services.finding.FindItemsByProductResponse
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchRequest
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchResponse
Filtering: com.ebay.services.finding.FindItemsIneBayStoresRequest
Filtering: com.ebay.services.finding.FindItemsIneBayStoresResponse
Filtering: com.ebay.services.finding.GetHistogramsRequest
Filtering: com.ebay.services.finding.GetHistogramsResponse
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationRequest
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationResponse
Filtering: com.ebay.services.finding.GetVersionRequest
Filtering: com.ebay.services.finding.GetVersionResponse
Filtering: com.ebay.services.finding.ItemFilter
Filtering: com.ebay.services.finding.ItemFilterType
Filtering: com.ebay.services.finding.ListingInfo
Filtering: com.ebay.services.finding.ObjectFactory
Filtering: com.ebay.services.finding.OutputSelectorType
Java element filter matched for com.ebay.services.finding
Filtering: com.ebay.services.finding.PaginationInput
Filtering: com.ebay.services.finding.PaginationOutput
Filtering: com.ebay.services.finding.ProductId
Filtering: com.ebay.services.finding.SearchItem
Filtering: com.ebay.services.finding.SearchResult
Filtering: com.ebay.services.finding.SellerInfo
Filtering: com.ebay.services.finding.SellingStatus
Filtering: com.ebay.services.finding.ShippingInfo
Filtering: com.ebay.services.finding.SortOrderType
Filtering: com.ebay.services.finding.Storefront
Filtering: com.ebay.util.feedback.CatchFeedback
Filtering: com.ebay.util.feedback.CatchFeedbackPlus
Filtering: com.ebay.util.feedback.Date1
Filtering: com.ebay.util.feedback.DealFeedback
Filtering: com.ebay.util.feedback.Feedback
Filtering: com.ebay.util.feedback.GetFeedback
Java element filter matched for com.ebay.util.feedback
Filtering: com.ebay.util.feedback.testsplit
Filtering: com.ebay.util.feedback.Util
Filtering: com.ebay.util.kmeans.Kmeans
Filtering: com.ebay.util.mail.MailSenderInfo
Filtering: com.ebay.util.mail.MyAuthenticator
Java element filter matched for com.ebay.util.mail
Filtering: com.ebay.util.mail.SendEmail
Filtering: com.ebay.util.mail.SimpleMailSender
Filtering: com.ebay.util.seller.CatchSellerInfo
Filtering: com.ebay.util.seller.ConvertStruct
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Mapping Package com.ebay.util.feedback
Mapping Package com.ebay.util.mail
Mapping Package com.ebay.get
Mapping Package com.ebay.init
Mapping Package com.ebay.common
Mapping Package com.ebay.service.user
Mapping Package com.ebay.services.finding
Mapping Package com.ebay.dao.user
Mapping Package com.ebay.services.client
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.ejb.event.JpaIntegrator].
No JNDI name configured for binding Ejb3Configuration
Preparing to build session factory with filters : {}
HHH000402: Using Hibernate built-in connection pool (not for production use!)
HHH000115: Hibernate connection pool size: 20
HHH000006: Autocommit mode: true
HHH000401: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8]
HHH000046: Connection properties: {user=root, password=root, autocommit=true, release_mode=auto}
Opening new JDBC connection
Created connection to: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, Isolation Level: 4
Database ->
       name : MySQL
    version : 5.0.22-community-nt
      major : 5
      minor : 0
Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.24 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
Binding named query: SELECT_CUSTOMERS => select customer from com.ebay.domain.customer.CustomerImpl customer
Binding named query: SELECT_BY_NAME => select count(*) from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_BY_NAME_PASSWORD => select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
Binding named query: GET_PASSWORD_BY_NAME => select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_RATES => select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_RATES_EXITS => select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_BY_SELLERNAME => select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_SELLERNAME => select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_AllDays => select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_BY_TOTALSELL => select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
Binding named query: SELECT_BY_SUCCESSSELL => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
Binding named query: List_FeedBack => from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
Binding named query: SPECIAL_MAX_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: SPECIAL_MIN_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: K_MEANS_PRICE => select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
Binding named query: MONTH_SELLINFO => select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
Binding named query: DAY_SELLINFO => select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
Binding named query: WEEK_SELLINFO => select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
Binding named query: KMEANS_MIN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Binding named query: KMEANS_BETWEEN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Binding named query: KMEANS_MAX => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Binding named query: MAX_PRICE => select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_ITEMS => select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_ALLITEMS => select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_AvgPrice => select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MAXPRICEDTO => select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MINPRICEDTO => select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_RECOMENDPRICE => select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Processing hbm.xml files
Process annotated classes
Binding entity from annotated class: com.ebay.domain.customer.CustomerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name CustomerImpl
Bind entity com.ebay.domain.customer.CustomerImpl on table customer
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_NAME, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property customername with lazy=false
building SimpleValue for customername
Building property customername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=STAR, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.user.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.ebay.domain.user.User on table User
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=USER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=PassWord, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property passWord with lazy=false
building SimpleValue for passWord
Building property passWord
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=UserName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property userName with lazy=false
building SimpleValue for userName
Building property userName
Binding entity from annotated class: com.ebay.domain.seller.SellerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name SellerImpl
Bind entity com.ebay.domain.seller.SellerImpl on table SELLER
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Seller_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property SellerName with lazy=false
building SimpleValue for SellerName
Building property SellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=CreateDate, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sinceDate with lazy=false
building SimpleValue for sinceDate
Building property sinceDate
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Star, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.seller.RecentFeedbackratings
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name RecentFeedbackratings
Bind entity com.ebay.domain.seller.RecentFeedbackratings on table RecentFeedbackratings
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=RecentFeedRate_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Negative with lazy=false
building SimpleValue for one_Negative
Building property one_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Neutral with lazy=false
building SimpleValue for one_Neutral
Building property one_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Positive with lazy=false
building SimpleValue for one_Positive
Building property one_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellerName with lazy=false
building SimpleValue for sellerName
Building property sellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Negative with lazy=false
building SimpleValue for six_Negative
Building property six_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Neutral with lazy=false
building SimpleValue for six_Neutral
Building property six_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Positive with lazy=false
building SimpleValue for six_Positive
Building property six_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Negative with lazy=false
building SimpleValue for twe_Negative
Building property twe_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Neutral with lazy=false
building SimpleValue for twe_Neutral
Building property twe_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Positive with lazy=false
building SimpleValue for twe_Positive
Building property twe_Positive
Binding entity from annotated class: com.ebay.domain.feedback.FeedBack
Import with entity name FeedBack
Bind entity com.ebay.domain.feedback.FeedBack on table FEEDBACK
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=FEEDBACK_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property feedbackId with lazy=false
building SimpleValue for feedbackId
Building property feedbackId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ATTITUDE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property attitude with lazy=false
building SimpleValue for attitude
Building property attitude
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=COMMENT, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property comment with lazy=false
building SimpleValue for comment
Building property comment
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Feed_Date, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property date with lazy=false
building SimpleValue for date
Building property date
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_Name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemName with lazy=false
building SimpleValue for itemName
Building property itemName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=PRICE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Seller, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellername with lazy=false
building SimpleValue for sellername
Building property sellername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=STAR_LEVEL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.item.ItemDto
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name ItemDto
Bind entity com.ebay.domain.item.ItemDto on table ItemDto
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=Id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=galleryURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property galleryURL with lazy=false
building SimpleValue for galleryURL
Building property galleryURL
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=ItemId, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=keyWords, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property keyWords with lazy=false
building SimpleValue for keyWords
Building property keyWords
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=price, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=sellCount, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellCount with lazy=false
building SimpleValue for sellCount
Building property sellCount
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=title, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property title with lazy=false
building SimpleValue for title
Building property title
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=viewItemURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property viewItemURL with lazy=false
building SimpleValue for viewItemURL
Building property viewItemURL
Setting SimpleValue typeName for id
Setting SimpleValue typeName for customername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for passWord
Setting SimpleValue typeName for userName
Setting SimpleValue typeName for id
Setting SimpleValue typeName for SellerName
Setting SimpleValue typeName for country
Setting SimpleValue typeName for sinceDate
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for one_Negative
Setting SimpleValue typeName for one_Neutral
Setting SimpleValue typeName for one_Positive
Setting SimpleValue typeName for sellerName
Setting SimpleValue typeName for six_Negative
Setting SimpleValue typeName for six_Neutral
Setting SimpleValue typeName for six_Positive
Setting SimpleValue typeName for twe_Negative
Setting SimpleValue typeName for twe_Neutral
Setting SimpleValue typeName for twe_Positive
Setting SimpleValue typeName for feedbackId
Setting SimpleValue typeName for attitude
Setting SimpleValue typeName for comment
Setting SimpleValue typeName for date
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for itemName
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for country
Setting SimpleValue typeName for galleryURL
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for keyWords
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellCount
Setting SimpleValue typeName for title
Setting SimpleValue typeName for viewItemURL
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
Automatic flush during beforeCompletion(): disabled
Automatic session close at end of transaction: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: disabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
multi-tenancy strategy : NONE
Connection release mode: auto
HHH000268: Transaction strategy: org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory
Using BatchFetchStyle : LEGACY
Maximum outer join fetch depth: 3
Default batch fetch size: 1
Generate SQL with comments: disabled
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
Default null ordering: none
Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
HHH000397: Using ASTQueryTranslatorFactory
Query language substitutions: {}
JPA-QL strict compliance: enabled
Second-level cache: enabled
Query cache: disabled
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
org.hibernate.cache.internal.NoCachingRegionFactory did not provide constructor accepting java.util.Properties; attempting no-arg constructor.
Optimize cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Named query checking : enabled
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : : disabled
JTA Track by Thread: enabled
Building session factory
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, sun.management.compiler=HotSpot Client Compiler, hibernate.ejb.discard_pc_on_close=false, rjrport=8081, hibernate.transaction.flush_before_completion=false, os.name=Windows 8, sun.boot.class.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\resources.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\rt.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\sunrsasign.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jsse.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jce.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\charsets.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jfr.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\classes, rjrkeystore=C:\Users\林林\.keystore, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, rjrkeypassword=changeit, java.runtime.version=1.7.0_45-b18, hibernate.connection.autocommit=true, rjrscanlist=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.scanlist, user.name=林林, javax.persistence.validation.mode=AUTO, hibernate.connection.release_mode=auto, rjrscanintervalseconds=5, user.language=zh, sun.boot.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin, rjrparentloaderpriority=true, java.version=1.7.0_45, user.timezone=Asia/Shanghai, sun.arch.data.model=32, rjrpassword=changeit, java.endorsed.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, hibernate.format_sql=true, java.class.version=51.0, user.country=CN, java.home=D:\Program Files (x86)\Java\jdk1.7.0_45\jre, java.vm.info=mixed mode, os.version=6.2, hibernate.transaction.factory_class=org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=24.45-b08, hibernate.max_fetch_depth=3, hibernate.connection.password=root, user.variant=, rjrneedclientauth=false, rjrenablessl=false, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, user.script=, user.home=C:\Users\林林, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=update, rjrignoreScanClassFile=true, java.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin;C:\Program Files (x86)\Common Files\NetSarang;C:\Program Files (x86)\AMD APP\bin\x86_64;C:\Program Files (x86)\AMD APP\bin\x86;D:\ActivePython27\;D:\ActivePython27\Scripts;F:\app\lin\product\11.2.0\dbhome_1\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;D:\SVN\bin;D:\MySQL Server 5.0\bin;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin;C:\Users\林林\AppData\Roaming\Python\Scripts;D:\Program Files (x86)\Java\jdk1.7.0_45/bin;D:\Program Files (x86)\Java\jdk1.7.0_45/jre/bin;D:\apache-maven-3.0.5/bin;D:\Google\google_appengine\;., java.vendor.url=http://java.oracle.com/, rjrResourceMapping=, rjrsslport=8443, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=runjettyrun.Bootstrap, java.class.path=D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlets-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-server-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-deploy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-policy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-util-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-rewrite-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-overlay-deployer-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jmx-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.jasper.glassfish-2.2.2.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.annotation_1.1.0.v201105051105.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\servlet-api-3.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-client-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.taglibs.standard.glassfish-1.2.0.v201112081803.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\com.sun.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jndi-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-core-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-webapp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp-2.2.0.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlet-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-continuation-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jsp-impl-2.2.2.b05.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-xml-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.objectweb.asm_3.3.1.v201101071600.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-io-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-security-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp.jstl-1.2.0.v201105211821.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\run-jetty-run-bootstrap-jetty8.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-plus-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-annotations-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-ajp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-websocket-8.1.8.v20121106.jar, hibernate.bytecode.use_reflection_optimizer=false, rjrclasspath=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.classpath, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.7, sun.os.patch.level=, sun.cpu.endian=little, java.io.tmpdir=C:\Users\林林\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, javax.persistence.sharedCache.mode=UNSPECIFIED, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, os.arch=x86, rjrenbaleJNDI=false, java.ext.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, rjrEclipseListener=59527, user.dir=E:\ebay\ebay-develop, line.separator=
, rjrcontext=/ebay-develop, java.vm.name=Java HotSpot(TM) Client VM, rjrwebapp=E:\ebay\ebay-develop\src\main\webapp, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.7, rjrenablescanner=false, hibernate.show_sql=true}
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Static SQL for entity: com.ebay.domain.user.User
 Version select: select USER_ID from User where USER_ID =?
 Snapshot select: select user_.USER_ID, user_.PassWord as PassWord2_4_, user_.UserName as UserName3_4_ from User user_ where user_.USER_ID=?
 Insert 0: insert into User (PassWord, UserName, USER_ID) values (?, ?, ?)
 Update 0: update User set PassWord=?, UserName=? where USER_ID=?
 Delete 0: delete from User where USER_ID=?
 Identity insert: insert into User (PassWord, UserName) values (?, ?)
Static SQL for entity: com.ebay.domain.item.ItemDto
 Version select: select Id from ItemDto where Id =?
 Snapshot select: select itemdto_.Id, itemdto_.country as country2_1_, itemdto_.galleryURL as galleryU3_1_, itemdto_.ItemId as ItemId4_1_, itemdto_.keyWords as keyWords5_1_, itemdto_.price as price6_1_, itemdto_.sellCount as sellCoun7_1_, itemdto_.title as title8_1_, itemdto_.viewItemURL as viewItem9_1_ from ItemDto itemdto_ where itemdto_.Id=?
 Insert 0: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL, Id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update ItemDto set country=?, galleryURL=?, ItemId=?, keyWords=?, price=?, sellCount=?, title=?, viewItemURL=? where Id=?
 Delete 0: delete from ItemDto where Id=?
 Identity insert: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.feedback.FeedBack
 Version select: select FEEDBACK_ID from FEEDBACK where FEEDBACK_ID =?
 Snapshot select: select feedback_.FEEDBACK_ID, feedback_.ATTITUDE as ATTITUDE2_0_, feedback_.COMMENT as COMMENT3_0_, feedback_.Feed_Date as Feed4_0_, feedback_.ITEM_ID as ITEM5_0_, feedback_.ITEM_Name as ITEM6_0_, feedback_.PRICE as PRICE7_0_, feedback_.Seller as Seller8_0_, feedback_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback_ where feedback_.FEEDBACK_ID=?
 Insert 0: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL, FEEDBACK_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update FEEDBACK set ATTITUDE=?, COMMENT=?, Feed_Date=?, ITEM_ID=?, ITEM_Name=?, PRICE=?, Seller=?, STAR_LEVEL=? where FEEDBACK_ID=?
 Delete 0: delete from FEEDBACK where FEEDBACK_ID=?
 Identity insert: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.customer.CustomerImpl
 Version select: select CUSTOMER_ID from customer where CUSTOMER_ID =?
 Snapshot select: select customerim_.CUSTOMER_ID, customerim_.CUSTOMER_NAME as CUSTOMER2_5_, customerim_.STAR as STAR3_5_ from customer customerim_ where customerim_.CUSTOMER_ID=?
 Insert 0: insert into customer (CUSTOMER_NAME, STAR, CUSTOMER_ID) values (?, ?, ?)
 Update 0: update customer set CUSTOMER_NAME=?, STAR=? where CUSTOMER_ID=?
 Delete 0: delete from customer where CUSTOMER_ID=?
 Identity insert: insert into customer (CUSTOMER_NAME, STAR) values (?, ?)
Static SQL for entity: com.ebay.domain.seller.RecentFeedbackratings
 Version select: select RecentFeedRate_ID from RecentFeedbackratings where RecentFeedRate_ID =?
 Snapshot select: select recentfeed_.RecentFeedRate_ID, recentfeed_.one_Negative as one2_2_, recentfeed_.one_Neutral as one3_2_, recentfeed_.one_Positive as one4_2_, recentfeed_.SellerName as SellerNa5_2_, recentfeed_.six_Negative as six6_2_, recentfeed_.six_Neutral as six7_2_, recentfeed_.six_Positive as six8_2_, recentfeed_.twe_Negative as twe9_2_, recentfeed_.twe_Neutral as twe10_2_, recentfeed_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed_ where recentfeed_.RecentFeedRate_ID=?
 Insert 0: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive, RecentFeedRate_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update RecentFeedbackratings set one_Negative=?, one_Neutral=?, one_Positive=?, SellerName=?, six_Negative=?, six_Neutral=?, six_Positive=?, twe_Negative=?, twe_Neutral=?, twe_Positive=? where RecentFeedRate_ID=?
 Delete 0: delete from RecentFeedbackratings where RecentFeedRate_ID=?
 Identity insert: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.seller.SellerImpl
 Version select: select Seller_ID from SELLER where Seller_ID =?
 Snapshot select: select sellerimpl_.Seller_ID, sellerimpl_.SellerName as SellerNa2_3_, sellerimpl_.Country as Country3_3_, sellerimpl_.CreateDate as CreateDa4_3_, sellerimpl_.Star as Star5_3_ from SELLER sellerimpl_ where sellerimpl_.Seller_ID=?
 Insert 0: insert into SELLER (SellerName, Country, CreateDate, Star, Seller_ID) values (?, ?, ?, ?, ?)
 Update 0: update SELLER set SellerName=?, Country=?, CreateDate=?, Star=? where Seller_ID=?
 Delete 0: delete from SELLER where Seller_ID=?
 Identity insert: insert into SELLER (SellerName, Country, CreateDate, Star) values (?, ?, ?, ?)
Static select for entity com.ebay.domain.user.User [NONE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [UPGRADE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [UPGRADE_NOWAIT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [FORCE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? lock in share mode
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_WRITE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [OPTIMISTIC]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.item.ItemDto [NONE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE_NOWAIT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [FORCE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? lock in share mode
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_WRITE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_MERGE on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.customer.CustomerImpl [NONE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE_NOWAIT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [FORCE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? lock in share mode
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_WRITE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [NONE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE_NOWAIT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [FORCE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? lock in share mode
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_WRITE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [NONE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE_NOWAIT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [FORCE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_WRITE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [NONE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE_NOWAIT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [FORCE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_WRITE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@180331
Registering SessionFactory: 9dfacc2e-91cb-4931-869c-ed8869fc26a0 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Instantiated session factory
HHH000228: Running hbm2ddl schema update
HHH000102: Fetching database metadata
HHH000396: Updating schema
Processing hbm.xml files
Process annotated classes
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
HHH000261: Table found: ebay.feedback
HHH000037: Columns: [attitude, price, item_name, item_id, feed_date, feedback_id, comment, seller, star_level]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.itemdto
HHH000037: Columns: [id, viewitemurl, title, price, keywords, galleryurl, sellcount, itemid, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.recentfeedbackratings
HHH000037: Columns: [six_positive, twe_neutral, one_neutral, twe_negative, sellername, twe_positive, six_negative, six_neutral, recentfeedrate_id, one_positive, one_negative]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.seller
HHH000037: Columns: [star, createdate, sellername, seller_id, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.user
HHH000037: Columns: [username, user_id, password]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.customer
HHH000037: Columns: [star, customer_name, customer_id]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
HHH000232: Schema update complete
Checking 28 named HQL queries
Checking named query: WEEK_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'WeekSellInfo'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'WEEKDAY'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'WEEKDAY'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) WeekSellInfo ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.WeekSellInfo,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'WeekSellInfo' {originalText=WeekSellInfo}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@18d0ff8}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, weekday(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by weekday(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECT_MAXPRICEDTO
parse() - HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select max(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: DAY_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'DaySellDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'DAYOFMONTH'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'DAYOFMONTH'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) DaySellDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.DaySellDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'DaySellDto' {originalText=DaySellDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@18d0ff8}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, dayofmonth(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by dayofmonth(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_AllDays
parse() - HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[MINUS] Node: '-'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'TO_DAYS'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[AGGREGATE] Node: 'max'
    |        |        \-[IDENT] Node: 'Feed_Date'
    |        \-[METHOD_CALL] Node: '('
    |           +-[IDENT] Node: 'TO_DAYS'
    |           \-[EXPR_LIST] Node: 'exprList'
    |              \-[AGGREGATE] Node: 'min'
    |                 \-[IDENT] Node: 'Feed_Date'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( - ( ( TO_DAYS ( exprList ( max Feed_Date ) ) ) ( ( TO_DAYS ( exprList ( min Feed_Date ) ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[MINUS] BinaryArithmeticOperatorNode: '-' {dataType=org.hibernate.type.LongType@1f525ec}
    |  |  +-[METHOD_CALL] MethodNode: '('
    |  |  |  +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |  |  \-[EXPR_LIST] SqlNode: 'exprList'
    |  |  |     \-[AGGREGATE] AggregateNode: 'max'
    |  |  |        \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  |  \-[METHOD_CALL] MethodNode: '('
    |  |     +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |     \-[EXPR_LIST] SqlNode: 'exprList'
    |  |        \-[AGGREGATE] AggregateNode: 'min'
    |  |           \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select to_days(max(Feed_Date))-to_days(min(Feed_Date)) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SPECIAL_MIN_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'min'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'min'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select min(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: KMEANS_MAX
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'max'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@1c154c2}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: KMEANS_BETWEEN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'feedback'
          |  |  |  \-[IDENT] Node: 'sellername'
          |  |  \-[COLON] Node: ':'
          |  |     \-[IDENT] Node: 'sellername'
          |  \-[LT] Node: '<'
          |     +-[IDENT] Node: 'price'
          |     \-[COLON] Node: ':'
          |        \-[WEIRD_IDENT] Node: 'max'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[AND] SqlNode: 'and'
          |  +-[EQ] BinaryLogicOperatorNode: '='
          |  |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
          |  \-[LT] BinaryLogicOperatorNode: '<'
          |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
          |     \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@1c154c2}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@1c154c2}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: SELECT_AvgPrice
parse() - HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'avg'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( avg ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'avg'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select avg(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: List_FeedBack
parse() - HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'FeedBack'
    |        \-[ALIAS] Node: 'feedback'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Derived SELECT clause created.
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'feedback0_.FEEDBACK_ID as FEEDBACK1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}}
    |  \-[SQL_TOKEN] SqlFragment: 'feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
SQL: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_, feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_SELLERNAME
parse() - HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'seller'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@1eb1172
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} sellerimpl0_.Seller_ID ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID as Seller1_3_' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
    |  \-[SQL_TOKEN] SqlFragment: 'sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select sellerimpl0_.Seller_ID as Seller1_3_, sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@1eb1172
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: SELECT_RECOMENDPRICE
parse() - HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'RecomendPrice'
    |        +-[AGGREGATE] Node: 'min'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        +-[AGGREGATE] Node: 'avg'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        \-[AGGREGATE] Node: 'max'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'dto'
    |              \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) RecomendPrice ) ( min ( itemdto0_.price itemdto0_.Id price ) ) ( avg ( itemdto0_.price itemdto0_.Id price ) ) ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.RecomendPrice,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'RecomendPrice' {originalText=RecomendPrice}
    |     +-[AGGREGATE] AggregateNode: 'min'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[AGGREGATE] AggregateNode: 'avg'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'max'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_, avg(itemdto0_.price) as col_1_0_, max(itemdto0_.price) as col_2_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_ITEMS
parse() - HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select count(*) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: K_MEANS_PRICE
parse() - HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'price'
    |        |  \-[IDENT] Node: 'PriceDot'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'price'
    |        \-[COUNT] Node: 'count'
    |           \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[IDENT] Node: 'price'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : feedback.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) price ) PriceDot ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ( count * ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( feedback0_.PRICE {synthetic-alias} price ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price.PriceDot,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     |  \-[IDENT] IdentNode: 'PriceDot' {originalText=PriceDot}
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[COUNT] CountNode: 'count'
    |     |  \-[ROW_STAR] SqlNode: '*'
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
    \-[GROUP] SqlNode: 'group'
       \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          \-[IDENT] IdentNode: 'price' {originalText=price}

throwQueryException() : no errors
HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
SQL: select feedback0_.PRICE as col_0_0_, count(*) as col_1_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.PRICE
throwQueryException() : no errors
Checking named query: SELECT_MINPRICEDTO
parse() - HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'min'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'min'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_CUSTOMERS
parse() - HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  |  \-[IDENT] Node: 'ebay'
       |     |  |  |  \-[IDENT] Node: 'domain'
       |     |  |  \-[IDENT] Node: 'customer'
       |     |  \-[IDENT] Node: 'CustomerImpl'
       |     \-[ALIAS] Node: 'customer'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'customer'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.customer.CustomerImpl (customer) -> customerim0_
Resolved : customer -> customerim0_.CUSTOMER_ID
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} customerim0_.CUSTOMER_ID ) ( FromClause{level=1} customer customerim0_ ) )
Using FROM fragment [customer customerim0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (customer)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'customerim0_.CUSTOMER_ID as CUSTOMER1_5_' {alias=customer, className=com.ebay.domain.customer.CustomerImpl, tableAlias=customerim0_}
    |  \-[SQL_TOKEN] SqlFragment: 'customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[customer], fromElementByTableAlias=[customerim0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'customer customerim0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=customer,role=null,tableName=customer,tableAlias=customerim0_,origin=null,columns={,className=com.ebay.domain.customer.CustomerImpl}}

throwQueryException() : no errors
HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
SQL: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_ from customer customerim0_
throwQueryException() : no errors
Checking named query: MONTH_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'SellerInfoDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'Month'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) SellerInfoDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.SellerInfoDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'SellerInfoDto' {originalText=SellerInfoDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, month(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by month(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: KMEANS_MIN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[LT] Node: '<'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
          \-[LT] BinaryLogicOperatorNode: '<'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@1c154c2}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<?
throwQueryException() : no errors
Checking named query: SELECT_RATES
parse() - HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'rate'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@1eb1172
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} recentfeed0_.RecentFeedRate_ID ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID as RecentFe1_2_' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
    |  \-[SQL_TOKEN] SqlFragment: 'recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_, recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SELLERNAME
parse() - HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@1eb1172
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select count(*) as col_0_0_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SUCCESSSELL
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellerName'
    |     \-[EQ] Node: '='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'attitude'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'attitude'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : attitude -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.attitude -> feedback0_.ATTITUDE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( feedback0_.ATTITUDE feedback0_.FEEDBACK_ID attitude ) ? ) ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[DOT] DotNode: 'feedback0_.ATTITUDE' {propertyName=attitude,dereferenceType=ALL,propertyPath=attitude,path=feedback.attitude,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |  \-[IDENT] IdentNode: 'attitude' {originalText=attitude}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=attitude, expectedType=org.hibernate.type.StringType@1eb1172}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.ATTITUDE=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: GET_PASSWORD_BY_NAME
parse() - HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'user'
    |        \-[IDENT] Node: 'passWord'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@1eb1172
Resolved : user.passWord -> user0_.PassWord
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@1eb1172
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( user0_.PassWord user0_.USER_ID passWord ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
    |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
    |  |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
SQL: select user0_.PassWord as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: MAX_PRICE
parse() - HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select max(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECT_RATES_EXITS
parse() - HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@1eb1172
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select count(*) as col_0_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_TOTALSELL
parse() - HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'sum'
    |        \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellerName'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'sum'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
SQL: select sum(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: SELECT_ALLITEMS
parse() - HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'dto'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} itemdto0_.Id ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id as Id1_1_' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  \-[SQL_TOKEN] SqlFragment: 'itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select itemdto0_.Id as Id1_1_, itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SPECIAL_MAX_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'max'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'max'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select max(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME_PASSWORD
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'user'
          |  |  \-[IDENT] Node: 'userName'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'userName'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'user'
             |  \-[IDENT] Node: 'passWord'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'passWord'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@1eb1172
Resolved : user.userName -> user0_.UserName
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@1eb1172
Resolved : user.passWord -> user0_.PassWord
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( and ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ( = ( user0_.PassWord user0_.USER_ID passWord ) ? ) ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@1eb1172}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
             |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
             |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
             \-[NAMED_PARAM] ParameterNode: '?' {name=passWord, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=? and user0_.PassWord=?
throwQueryException() : no errors
Checking 0 named SQL queries
Statistics initialized [enabled=false]
Initializing EntityManagerFactoryRegistry : org.hibernate.ejb.internal.EntityManagerFactoryRegistry@dfea5e
Registering EntityManagerFactory: ePU 
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'entityManagerFactory'
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@12ab76e: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
Returning cached instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating shared instance of singleton bean 'competitorcontroller'
Creating instance of bean 'competitorcontroller'
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Eagerly caching bean 'competitorcontroller' to allow for resolving potential circular references
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Creating shared instance of singleton bean 'sellerService'
Creating instance of bean 'sellerService'
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Eagerly caching bean 'sellerService' to allow for resolving potential circular references
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Creating shared instance of singleton bean 'ebayRatesDao'
Creating instance of bean 'ebayRatesDao'
Registered injected element on class [com.ebay.dao.seller.RatesDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Eagerly caching bean 'ebayRatesDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayRatesDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayRatesDao'
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Creating shared instance of singleton bean 'ebaySellerDao'
Creating instance of bean 'ebaySellerDao'
Registered injected element on class [com.ebay.dao.seller.SellerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Eagerly caching bean 'ebaySellerDao' to allow for resolving potential circular references
Processing injected method of bean 'ebaySellerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebaySellerDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddSeller' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'sellerService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.seller.SellerServiceImpl@147d853]
Finished creating instance of bean 'sellerService'
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Creating shared instance of singleton bean 'feedbackService'
Creating instance of bean 'feedbackService'
Registered injected element on class [com.ebay.service.feedback.FeedbackServiceImpl]: ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Eagerly caching bean 'feedbackService' to allow for resolving potential circular references
Processing injected method of bean 'feedbackService': ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Creating shared instance of singleton bean 'ebayfeedbackdao'
Creating instance of bean 'ebayfeedbackdao'
Registered injected element on class [com.ebay.dao.feedback.FeedBackDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Eagerly caching bean 'ebayfeedbackdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayfeedbackdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddFeedbacks' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'feedbackService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.feedback.FeedbackServiceImpl@f18d6e]
Finished creating instance of bean 'feedbackService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'competitorcontroller'
Creating shared instance of singleton bean 'itemcontroller'
Creating instance of bean 'itemcontroller'
Registered injected element on class [com.ebay.controller.ItemController]: ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Eagerly caching bean 'itemcontroller' to allow for resolving potential circular references
Processing injected method of bean 'itemcontroller': ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Creating shared instance of singleton bean 'itemService'
Creating instance of bean 'itemService'
Registered injected element on class [com.ebay.service.item.ItemServiceImpl]: ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Eagerly caching bean 'itemService' to allow for resolving potential circular references
Processing injected method of bean 'itemService': ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Creating shared instance of singleton bean 'ebayitemdao'
Creating instance of bean 'ebayitemdao'
Registered injected element on class [com.ebay.dao.item.ItemDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Eagerly caching bean 'ebayitemdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayitemdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayitemdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'addItem' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'itemService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.item.ItemServiceImpl@14d7e20]
Finished creating instance of bean 'itemService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'itemcontroller'
Creating shared instance of singleton bean 'loginController'
Creating instance of bean 'loginController'
Registered injected element on class [com.ebay.controller.LoginController]: ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Eagerly caching bean 'loginController' to allow for resolving potential circular references
Processing injected method of bean 'loginController': ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Creating shared instance of singleton bean 'userService'
Creating instance of bean 'userService'
Registered injected element on class [com.ebay.service.user.UserServiceImpl]: ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Eagerly caching bean 'userService' to allow for resolving potential circular references
Processing injected method of bean 'userService': ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Creating shared instance of singleton bean 'ebayUserDao'
Creating instance of bean 'ebayUserDao'
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Eagerly caching bean 'ebayUserDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayUserDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Processing injected method of bean 'ebayUserDao': ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Creating shared instance of singleton bean 'ebayEntityConfiguration'
Creating instance of bean 'ebayEntityConfiguration'
Found init method on class [com.ebay.common.persistence.EntityConfiguration]: public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Registered init method on class [com.ebay.common.persistence.EntityConfiguration]: org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement@a46c92e
Registered injected element on class [com.ebay.common.persistence.EntityConfiguration]: ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Eagerly caching bean 'ebayEntityConfiguration' to allow for resolving potential circular references
Processing injected method of bean 'ebayEntityConfiguration': ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Creating shared instance of singleton bean 'eMergedEntityContexts'
Creating instance of bean 'eMergedEntityContexts'
Eagerly caching bean 'eMergedEntityContexts' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Invoking init method on bean 'ebayEntityConfiguration': public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from class path resource [applicationContext-entity.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Loading bean definitions
Refreshing org.springframework.context.support.GenericXmlApplicationContext@12a3c05: startup date [Fri Jun 06 23:04:06 CST 2014]; root of context hierarchy
Bean factory for org.springframework.context.support.GenericXmlApplicationContext@12a3c05: org.springframework.beans.factory.support.DefaultListableBeanFactory@19af885: defining beans []; root of factory hierarchy
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@5efd5c]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@4bbee7]
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@19af885: defining beans []; root of factory hierarchy
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@f3f8d0]
Returning cached instance of singleton bean 'lifecycleProcessor'
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayEntityConfiguration'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayUserDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'userService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'loginController'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Returning cached instance of singleton bean 'feedbackService'
Returning cached instance of singleton bean 'itemService'
Returning cached instance of singleton bean 'sellerService'
Returning cached instance of singleton bean 'userService'
Creating shared instance of singleton bean 'eCustomerDao'
Creating instance of bean 'eCustomerDao'
Registered injected element on class [com.ebay.dao.customer.CustomerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Eagerly caching bean 'eCustomerDao' to allow for resolving potential circular references
Processing injected method of bean 'eCustomerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eCustomerDao'
Returning cached instance of singleton bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'ebayitemdao'
Returning cached instance of singleton bean 'ebayRatesDao'
Returning cached instance of singleton bean 'ebaySellerDao'
Returning cached instance of singleton bean 'ebayUserDao'
Returning cached instance of singleton bean 'ebayEntityConfiguration'
Creating shared instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean 'mvcContentNegotiationManager'
Eagerly caching bean 'mvcContentNegotiationManager' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mvcContentNegotiationManager'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean '(inner bean)'
Creating shared instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Eagerly caching bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)'
No property editor [org.springframework.web.context.request.WebRequestInterceptorEditor] found for type org.springframework.web.context.request.WebRequestInterceptor according to 'Editor' suffix convention
Eagerly caching bean 'org.springframework.web.servlet.handler.MappedInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Looking for request mappings in application context: Root WebApplicationContext: startup date [Fri Jun 06 23:04:00 CST 2014]; root of context hierarchy
Mapped "{[/selectRates],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.RecentFeedbackratings com.ebay.controller.CompetitorController.selectRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/catchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.CompetitorController.CatchSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
Mapped "{[/selectDayInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.DaySellDto> com.ebay.controller.CompetitorController.selectDayInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectPring],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.price.Pring> com.ebay.controller.CompetitorController.getPricing(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectMonthInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.SellerInfoDto> com.ebay.controller.CompetitorController.selectMonthInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectSingleSeller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.SellerDto com.ebay.controller.CompetitorController.selectDtoSingleSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.Seller com.ebay.controller.CompetitorController.selectCompetitor(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.Item> com.ebay.controller.CompetitorController.selectSpecialItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectWeekInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.WeekSellInfo> com.ebay.controller.CompetitorController.selectWeekInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectFeedBack],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.feedback.FeedBack> com.ebay.controller.CompetitorController.selectAllFeedBack(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.ItemDto> com.ebay.controller.ItemController.selectItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/getRecomendPrices],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.item.RecomendPrice com.ebay.controller.ItemController.selectRprice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/login/controller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.validateLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/competitor/competitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/product/product],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.product(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/sendemail],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.getEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/ebay || /],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.Login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/forgetpassword],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.forgetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#1'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#1'
Creating instance of bean '(inner bean)#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#2'
Creating instance of bean '(inner bean)#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#3'
Creating instance of bean '(inner bean)#4'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#4'
Creating instance of bean '(inner bean)#5'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#5'
Creating instance of bean '(inner bean)#6'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#6'
Creating instance of bean '(inner bean)#7'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#7'
Creating instance of bean '(inner bean)#8'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#8'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Looking for controller advice: Root WebApplicationContext: startup date [Fri Jun 06 23:04:00 CST 2014]; root of context hierarchy
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#9'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#9'
Creating instance of bean '(inner bean)#10'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#10'
Creating instance of bean '(inner bean)#11'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#11'
Creating instance of bean '(inner bean)#12'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#12'
Creating instance of bean '(inner bean)#13'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#13'
Creating instance of bean '(inner bean)#14'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#14'
Creating instance of bean '(inner bean)#15'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#15'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Looking for exception mappings: Root WebApplicationContext: startup date [Fri Jun 06 23:04:00 CST 2014]; root of context hierarchy
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Eagerly caching bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: Root WebApplicationContext: startup date [Fri Jun 06 23:04:00 CST 2014]; root of context hierarchy
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Rejected bean name 'competitorcontroller': no URL paths identified
Rejected bean name 'itemcontroller': no URL paths identified
Rejected bean name 'loginController': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletContext': no URL paths identified
Rejected bean name 'contextParameters': no URL paths identified
Rejected bean name 'contextAttributes': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Mapped URL path [/img/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Mapped URL path [/css/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Mapped URL path [/js/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Mapped URL path [/plugins/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Returning cached instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: Root WebApplicationContext: startup date [Fri Jun 06 23:04:00 CST 2014]; root of context hierarchy
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Root mapping to handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword/] onto handler 'loginController'
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletContext': no URL paths identified
Rejected bean name 'contextParameters': no URL paths identified
Rejected bean name 'contextAttributes': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0' to allow for resolving potential circular references
Creating shared instance of singleton bean 'mappingJacksonHttpMessageConverter'
Creating instance of bean 'mappingJacksonHttpMessageConverter'
Eagerly caching bean 'mappingJacksonHttpMessageConverter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'entityManagerFactory'
Creating shared instance of singleton bean 'templateResolver'
Creating instance of bean 'templateResolver'
Eagerly caching bean 'templateResolver' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateResolver'
Creating shared instance of singleton bean 'templateEngine'
Creating instance of bean 'templateEngine'
Eagerly caching bean 'templateEngine' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateResolver'
Invoking afterPropertiesSet() on bean with name 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateEngine'
Creating shared instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Eagerly caching bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating shared instance of singleton bean 'transactionManager'
Creating instance of bean 'transactionManager'
Eagerly caching bean 'transactionManager' to allow for resolving potential circular references
Returning cached instance of singleton bean 'entityManagerFactory'
Invoking afterPropertiesSet() on bean with name 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating shared instance of singleton bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Eagerly caching bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Finished creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@1abf4ea]
Returning cached instance of singleton bean 'lifecycleProcessor'
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletConfigInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletContextInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.liveBeansView.mbeanDomain]
Converted JNDI name [java:comp/env/spring.liveBeansView.mbeanDomain] not found - trying original name [spring.liveBeansView.mbeanDomain]. javax.naming.NameNotFoundException; remaining name 'env/spring.liveBeansView.mbeanDomain'
Looking up JNDI object with name [spring.liveBeansView.mbeanDomain]
JNDI lookup for name [spring.liveBeansView.mbeanDomain] threw NamingException with message: null. Returning null.
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Published root WebApplicationContext as ServletContext attribute with name [org.springframework.web.context.WebApplicationContext.ROOT]
Root WebApplicationContext: initialization completed in 6837 ms
Initializing new StandardServletEnvironment
Adding [servletConfigInitParams] PropertySource with lowest search precedence
Adding [servletContextInitParams] PropertySource with lowest search precedence
Adding [jndiProperties] PropertySource with lowest search precedence
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]
Initializing filter 'encodingFilter'
Filter 'encodingFilter' configured successfully
Initializing servlet 'dispatcher'
Initializing new StandardServletEnvironment
Adding [servletConfigInitParams] PropertySource with lowest search precedence
Adding [servletContextInitParams] PropertySource with lowest search precedence
Adding [jndiProperties] PropertySource with lowest search precedence
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]
FrameworkServlet 'dispatcher': initialization started
Servlet with name 'dispatcher' will try to create custom WebApplicationContext context of class 'org.springframework.web.context.support.XmlWebApplicationContext', using parent context [Root WebApplicationContext: startup date [Fri Jun 06 23:04:00 CST 2014]; root of context hierarchy]
Searching for key 'spring.profiles.active' in [servletConfigInitParams]
Searching for key 'spring.profiles.active' in [servletContextInitParams]
Searching for key 'spring.profiles.active' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.profiles.active]
Converted JNDI name [java:comp/env/spring.profiles.active] not found - trying original name [spring.profiles.active]. javax.naming.NameNotFoundException; remaining name 'env/spring.profiles.active'
Looking up JNDI object with name [spring.profiles.active]
JNDI lookup for name [spring.profiles.active] threw NamingException with message: null. Returning null.
Searching for key 'spring.profiles.active' in [systemProperties]
Searching for key 'spring.profiles.active' in [systemEnvironment]
Could not find key 'spring.profiles.active' in any property source. Returning [null]
Searching for key 'spring.profiles.default' in [servletConfigInitParams]
Searching for key 'spring.profiles.default' in [servletContextInitParams]
Searching for key 'spring.profiles.default' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.profiles.default]
Converted JNDI name [java:comp/env/spring.profiles.default] not found - trying original name [spring.profiles.default]. javax.naming.NameNotFoundException; remaining name 'env/spring.profiles.default'
Looking up JNDI object with name [spring.profiles.default]
JNDI lookup for name [spring.profiles.default] threw NamingException with message: null. Returning null.
Searching for key 'spring.profiles.default' in [systemProperties]
Searching for key 'spring.profiles.default' in [systemEnvironment]
Could not find key 'spring.profiles.default' in any property source. Returning [null]
Searching for key 'spring.profiles.default' in [servletConfigInitParams]
Searching for key 'spring.profiles.default' in [servletContextInitParams]
Searching for key 'spring.profiles.default' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.profiles.default]
Converted JNDI name [java:comp/env/spring.profiles.default] not found - trying original name [spring.profiles.default]. javax.naming.NameNotFoundException; remaining name 'env/spring.profiles.default'
Looking up JNDI object with name [spring.profiles.default]
JNDI lookup for name [spring.profiles.default] threw NamingException with message: null. Returning null.
Searching for key 'spring.profiles.default' in [systemProperties]
Searching for key 'spring.profiles.default' in [systemEnvironment]
Could not find key 'spring.profiles.default' in any property source. Returning [null]
Replacing [servletContextInitParams] PropertySource with [servletContextInitParams]
Replacing [servletConfigInitParams] PropertySource with [servletConfigInitParams]
Refreshing WebApplicationContext for namespace 'dispatcher-servlet': startup date [Fri Jun 06 23:04:07 CST 2014]; parent: Root WebApplicationContext
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from ServletContext resource [/WEB-INF/applicationContext.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Found XML schema [http://www.springframework.org/schema/context/spring-context-3.2.xsd] in classpath: org/springframework/context/config/spring-context-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tool/spring-tool-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-tool-3.2.xsd
Found XML schema [http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd] in classpath: org/springframework/web/servlet/config/spring-mvc-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tx/spring-tx-3.2.xsd] in classpath: org/springframework/transaction/config/spring-tx-3.2.xsd
Loading bean definitions
Loaded NamespaceHandler mappings: {http://www.springframework.org/schema/p=org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler, http://www.springframework.org/schema/mvc=org.springframework.web.servlet.config.MvcNamespaceHandler, http://www.springframework.org/schema/util=org.springframework.beans.factory.xml.UtilNamespaceHandler, http://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler, http://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler, http://www.springframework.org/schema/jdbc=org.springframework.jdbc.config.JdbcNamespaceHandler, http://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler, http://www.springframework.org/schema/c=org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler, http://www.springframework.org/schema/tx=org.springframework.transaction.config.TxNamespaceHandler, http://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler, http://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler, http://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler}
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\controller]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\controller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/controller/**/*.class]
Resolved location pattern [classpath*:com/ebay/controller/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\service]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/service/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerServieImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\dao]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/dao/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedbackDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/common/persistence/**/*.class]
Resolved location pattern [classpath*:com/ebay/common/persistence/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#10adda9]
Neither XML 'id' nor 'name' specified - using generated bean name [org.thymeleaf.spring3.view.ThymeleafViewResolver#0]
Loaded 54 bean definitions from location pattern [/WEB-INF/applicationContext.xml]
Bean factory for WebApplicationContext for namespace 'dispatcher-servlet': org.springframework.beans.factory.support.DefaultListableBeanFactory@5e8afc: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@12ab76e
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Eagerly caching bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Adding [environmentProperties] PropertySource with lowest search precedence
Loading properties file from URL [file:/E:/ebay/ebay-develop/target/classes/properties/jdbc.properties]
Adding [localProperties] PropertySource with lowest search precedence
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Eagerly caching bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Eagerly caching bean 'org.springframework.aop.config.internalAutoProxyCreator' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@752e9e]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@147c5e1]
Unable to locate ThemeSource with name 'themeSource': using default [org.springframework.ui.context.support.DelegatingThemeSource@11048df]
Creating shared instance of singleton bean 'entityManagerFactory'
Creating instance of bean 'entityManagerFactory'
Eagerly caching bean 'entityManagerFactory' to allow for resolving potential circular references
Creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#10adda9'
Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Eagerly caching bean 'org.springframework.transaction.config.internalTransactionAdvisor' to allow for resolving potential circular references
Creating shared instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Eagerly caching bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Finished creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#10adda9'
Invoking afterPropertiesSet() on bean with name 'entityManagerFactory'
Building JPA container EntityManagerFactory for persistence unit 'ePU'
Adding type registration boolean -> org.hibernate.type.BooleanType@bcf6bf
Adding type registration boolean -> org.hibernate.type.BooleanType@bcf6bf
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@bcf6bf
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@cb4888
Adding type registration true_false -> org.hibernate.type.TrueFalseType@1372c26
Adding type registration yes_no -> org.hibernate.type.YesNoType@917c5e
Adding type registration byte -> org.hibernate.type.ByteType@5319cc
Adding type registration byte -> org.hibernate.type.ByteType@5319cc
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@5319cc
Adding type registration character -> org.hibernate.type.CharacterType@1a36912
Adding type registration char -> org.hibernate.type.CharacterType@1a36912
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@1a36912
Adding type registration short -> org.hibernate.type.ShortType@c6fd33
Adding type registration short -> org.hibernate.type.ShortType@c6fd33
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@c6fd33
Adding type registration integer -> org.hibernate.type.IntegerType@18d0ff8
Adding type registration int -> org.hibernate.type.IntegerType@18d0ff8
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@18d0ff8
Adding type registration long -> org.hibernate.type.LongType@1f525ec
Adding type registration long -> org.hibernate.type.LongType@1f525ec
Adding type registration java.lang.Long -> org.hibernate.type.LongType@1f525ec
Adding type registration float -> org.hibernate.type.FloatType@1705a11
Adding type registration float -> org.hibernate.type.FloatType@1705a11
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1705a11
Adding type registration double -> org.hibernate.type.DoubleType@1c154c2
Adding type registration double -> org.hibernate.type.DoubleType@1c154c2
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@1c154c2
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@a3a141
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@a3a141
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@1ece9b5
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@1ece9b5
Adding type registration string -> org.hibernate.type.StringType@1eb1172
Adding type registration java.lang.String -> org.hibernate.type.StringType@1eb1172
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1779d1c
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@38c4de
Adding type registration url -> org.hibernate.type.UrlType@1cc2b7a
Adding type registration java.net.URL -> org.hibernate.type.UrlType@1cc2b7a
Adding type registration date -> org.hibernate.type.DateType@1c8da95
Adding type registration java.sql.Date -> org.hibernate.type.DateType@1c8da95
Adding type registration time -> org.hibernate.type.TimeType@2617a
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@2617a
Adding type registration timestamp -> org.hibernate.type.TimestampType@82c175
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@82c175
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@82c175
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@bc0383
Adding type registration calendar -> org.hibernate.type.CalendarType@1b6ac6d
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@1b6ac6d
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@1b6ac6d
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@1fa6fb6
Adding type registration locale -> org.hibernate.type.LocaleType@13f4b39
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@13f4b39
Adding type registration currency -> org.hibernate.type.CurrencyType@319ef6
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@319ef6
Adding type registration timezone -> org.hibernate.type.TimeZoneType@10cfe81
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@10cfe81
Adding type registration class -> org.hibernate.type.ClassType@18d6ec4
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@18d6ec4
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@e9311d
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@e9311d
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@1b076c8
Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@17d68f9
Adding type registration binary -> org.hibernate.type.BinaryType@f71002
Adding type registration byte[] -> org.hibernate.type.BinaryType@f71002
Adding type registration [B -> org.hibernate.type.BinaryType@f71002
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@1ad264
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@1ad264
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@1ad264
Adding type registration image -> org.hibernate.type.ImageType@7eeb51
Adding type registration characters -> org.hibernate.type.CharArrayType@6932cb
Adding type registration char[] -> org.hibernate.type.CharArrayType@6932cb
Adding type registration [C -> org.hibernate.type.CharArrayType@6932cb
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@ce7760
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@ce7760
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@ce7760
Adding type registration text -> org.hibernate.type.TextType@d942c2
Adding type registration ntext -> org.hibernate.type.NTextType@1975da5
Adding type registration blob -> org.hibernate.type.BlobType@1ed1906
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@1ed1906
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@9ee94e
Adding type registration clob -> org.hibernate.type.ClobType@18b74de
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@18b74de
Adding type registration nclob -> org.hibernate.type.NClobType@1af67f9
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@1af67f9
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@14c031d
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@a59bb6
Adding type registration serializable -> org.hibernate.type.SerializableType@14df922
Adding type registration object -> org.hibernate.type.ObjectType@19cf842
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@19cf842
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@1506f6c
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@1c3286f
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@193c8bb
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@15fa94b
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@163985a
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1a7591e
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1cbf7c9
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@1f8c9bd
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Processing PersistenceUnitInfo [
	name: ePU
	persistence provider classname: org.hibernate.ejb.HibernatePersistence
	classloader: WebAppClassLoader=18157796@11510e4
	Temporary classloader: org.springframework.instrument.classloading.SimpleThrowawayClassLoader@84afe5
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/E:/ebay/ebay-develop/target/classes
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		com.ebay.domain.customer.CustomerImpl
		com.ebay.domain.user.User
		com.ebay.domain.seller.SellerImpl
		com.ebay.domain.seller.RecentFeedbackratings
		com.ebay.domain.feedback.FeedBack
		com.ebay.domain.item.ItemDto]
	Mapping files names [
		config/jpa/domain/customer.orm.xml
		config/jpa/domain/user.orm.xml
		config/jpa/domain/rate.orm.xml
		config/jpa/domain/seller.orm.xml
		config/jpa/domain/feedback.orm.xml
		config/jpa/domain/item.orm.xml]
	Properties [
		hibernate.connection.driver_class: com.mysql.jdbc.Driver
		hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
		hibernate.max_fetch_depth: 3
		hibernate.format_sql: true
		hibernate.connection.username: root
		hibernate.hbm2ddl.auto: update
		hibernate.connection.url: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8
		hibernate.connection.password: root
		hibernate.show_sql: true]
Detect class: true; detect hbm: true
Detect class: true; detect hbm: true
Searching mapped entities in jar/par: file:/E:/ebay/ebay-develop/target/classes
Filtering: com.ebay.common.ClientFactory
Filtering: com.ebay.common.Constants
Filtering: com.ebay.common.handler.JAXWSHandler
Filtering: com.ebay.common.handler.ServiceHandlerResolver
Java element filter matched for com.ebay.common
Filtering: com.ebay.common.persistence.EntityConfiguration
Filtering: com.ebay.controller.CompetitorController
Filtering: com.ebay.controller.ItemController
Filtering: com.ebay.controller.LoginController
Filtering: com.ebay.dao.customer.CustomerDao
Filtering: com.ebay.dao.customer.CustomerDaoImpl
Filtering: com.ebay.dao.feedback.FeedbackDao
Filtering: com.ebay.dao.feedback.FeedBackDaoImpl
Filtering: com.ebay.dao.item.ItemDao
Filtering: com.ebay.dao.item.ItemDaoImpl
Filtering: com.ebay.dao.seller.RatesDao
Filtering: com.ebay.dao.seller.RatesDaoImpl
Filtering: com.ebay.dao.seller.SellerDao
Filtering: com.ebay.dao.seller.SellerDaoImpl
Java element filter matched for com.ebay.dao.user
Filtering: com.ebay.dao.user.UserDao
Filtering: com.ebay.dao.user.UserDaoImpl
Filtering: com.ebay.domain.customer.Customer
Filtering: com.ebay.domain.customer.CustomerImpl
Java element filter matched for com.ebay.domain.customer.CustomerImpl
Filtering: com.ebay.domain.feedback.FeedBack
Java element filter matched for com.ebay.domain.feedback.FeedBack
Filtering: com.ebay.domain.item.Item
Filtering: com.ebay.domain.item.ItemDto
Java element filter matched for com.ebay.domain.item.ItemDto
Filtering: com.ebay.domain.item.RecomendPrice
Filtering: com.ebay.domain.price.PriceDot
Filtering: com.ebay.domain.price.Pring
Filtering: com.ebay.domain.seller.DaySellDto
Filtering: com.ebay.domain.seller.RecentFeedbackratings
Java element filter matched for com.ebay.domain.seller.RecentFeedbackratings
Filtering: com.ebay.domain.seller.Seller
Filtering: com.ebay.domain.seller.SellerDto
Filtering: com.ebay.domain.seller.SellerImpl
Java element filter matched for com.ebay.domain.seller.SellerImpl
Filtering: com.ebay.domain.seller.SellerInfoDto
Filtering: com.ebay.domain.seller.WeekSellInfo
Filtering: com.ebay.domain.user.User
Java element filter matched for com.ebay.domain.user.User
Filtering: com.ebay.ebay_develop.App
Filtering: com.ebay.ebay_develop.Img
Filtering: com.ebay.find.FindItemsByCategory
Filtering: com.ebay.find.FindItemsByKeyWords
Filtering: com.ebay.find.FindItemsByProduct
Filtering: com.ebay.find.FindItemsInStore
Filtering: com.ebay.find.TestFind
Filtering: com.ebay.form.UserForm
Filtering: com.ebay.get.GetRecommendedKeyWords
Java element filter matched for com.ebay.get
Filtering: com.ebay.init.ClientConfigInit
Java element filter matched for com.ebay.init
Filtering: com.ebay.service.customer.CustomerService
Filtering: com.ebay.service.customer.CustomerServieImpl
Filtering: com.ebay.service.feedback.FeedbackService
Filtering: com.ebay.service.feedback.FeedbackServiceImpl
Filtering: com.ebay.service.item.ItemService
Filtering: com.ebay.service.item.ItemServiceImpl
Filtering: com.ebay.service.seller.SellerService
Filtering: com.ebay.service.seller.SellerServiceImpl
Java element filter matched for com.ebay.service.user
Filtering: com.ebay.service.user.UserService
Filtering: com.ebay.service.user.UserServiceImpl
Filtering: com.ebay.services.client.ClientConfig
Filtering: com.ebay.services.client.FindingServiceClientFactory
Java element filter matched for com.ebay.services.client
Filtering: com.ebay.services.finding.AckValue
Filtering: com.ebay.services.finding.Adapter1
Filtering: com.ebay.services.finding.Affiliate
Filtering: com.ebay.services.finding.Amount
Filtering: com.ebay.services.finding.Aspect
Filtering: com.ebay.services.finding.AspectFilter
Filtering: com.ebay.services.finding.AspectHistogramContainer
Filtering: com.ebay.services.finding.AspectValueHistogram
Filtering: com.ebay.services.finding.BaseFindingServiceRequest
Filtering: com.ebay.services.finding.BaseFindingServiceResponse
Filtering: com.ebay.services.finding.BaseServiceRequest
Filtering: com.ebay.services.finding.BaseServiceResponse
Filtering: com.ebay.services.finding.Category
Filtering: com.ebay.services.finding.CategoryHistogram
Filtering: com.ebay.services.finding.CategoryHistogramContainer
Filtering: com.ebay.services.finding.Condition
Filtering: com.ebay.services.finding.ConditionHistogram
Filtering: com.ebay.services.finding.ConditionHistogramContainer
Filtering: com.ebay.services.finding.Distance
Filtering: com.ebay.services.finding.DomainFilter
Filtering: com.ebay.services.finding.ErrorCategory
Filtering: com.ebay.services.finding.ErrorData
Filtering: com.ebay.services.finding.ErrorMessage
Filtering: com.ebay.services.finding.ErrorParameter
Filtering: com.ebay.services.finding.ErrorSeverity
Filtering: com.ebay.services.finding.ExtensionType
Filtering: com.ebay.services.finding.FindCompletedItemsRequest
Filtering: com.ebay.services.finding.FindCompletedItemsResponse
Filtering: com.ebay.services.finding.FindingService
Filtering: com.ebay.services.finding.FindingServicePortType
Filtering: com.ebay.services.finding.FindItemsAdvancedRequest
Filtering: com.ebay.services.finding.FindItemsAdvancedResponse
Filtering: com.ebay.services.finding.FindItemsByCategoryRequest
Filtering: com.ebay.services.finding.FindItemsByCategoryResponse
Filtering: com.ebay.services.finding.FindItemsByKeywordsRequest
Filtering: com.ebay.services.finding.FindItemsByKeywordsResponse
Filtering: com.ebay.services.finding.FindItemsByProductRequest
Filtering: com.ebay.services.finding.FindItemsByProductResponse
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchRequest
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchResponse
Filtering: com.ebay.services.finding.FindItemsIneBayStoresRequest
Filtering: com.ebay.services.finding.FindItemsIneBayStoresResponse
Filtering: com.ebay.services.finding.GetHistogramsRequest
Filtering: com.ebay.services.finding.GetHistogramsResponse
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationRequest
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationResponse
Filtering: com.ebay.services.finding.GetVersionRequest
Filtering: com.ebay.services.finding.GetVersionResponse
Filtering: com.ebay.services.finding.ItemFilter
Filtering: com.ebay.services.finding.ItemFilterType
Filtering: com.ebay.services.finding.ListingInfo
Filtering: com.ebay.services.finding.ObjectFactory
Filtering: com.ebay.services.finding.OutputSelectorType
Java element filter matched for com.ebay.services.finding
Filtering: com.ebay.services.finding.PaginationInput
Filtering: com.ebay.services.finding.PaginationOutput
Filtering: com.ebay.services.finding.ProductId
Filtering: com.ebay.services.finding.SearchItem
Filtering: com.ebay.services.finding.SearchResult
Filtering: com.ebay.services.finding.SellerInfo
Filtering: com.ebay.services.finding.SellingStatus
Filtering: com.ebay.services.finding.ShippingInfo
Filtering: com.ebay.services.finding.SortOrderType
Filtering: com.ebay.services.finding.Storefront
Filtering: com.ebay.util.feedback.CatchFeedback
Filtering: com.ebay.util.feedback.CatchFeedbackPlus
Filtering: com.ebay.util.feedback.Date1
Filtering: com.ebay.util.feedback.DealFeedback
Filtering: com.ebay.util.feedback.Feedback
Filtering: com.ebay.util.feedback.GetFeedback
Java element filter matched for com.ebay.util.feedback
Filtering: com.ebay.util.feedback.testsplit
Filtering: com.ebay.util.feedback.Util
Filtering: com.ebay.util.kmeans.Kmeans
Filtering: com.ebay.util.mail.MailSenderInfo
Filtering: com.ebay.util.mail.MyAuthenticator
Java element filter matched for com.ebay.util.mail
Filtering: com.ebay.util.mail.SendEmail
Filtering: com.ebay.util.mail.SimpleMailSender
Filtering: com.ebay.util.seller.CatchSellerInfo
Filtering: com.ebay.util.seller.ConvertStruct
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Mapping Package com.ebay.util.feedback
Mapping Package com.ebay.util.mail
Mapping Package com.ebay.get
Mapping Package com.ebay.init
Mapping Package com.ebay.common
Mapping Package com.ebay.service.user
Mapping Package com.ebay.services.finding
Mapping Package com.ebay.dao.user
Mapping Package com.ebay.services.client
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.ejb.event.JpaIntegrator].
No JNDI name configured for binding Ejb3Configuration
Preparing to build session factory with filters : {}
HHH000402: Using Hibernate built-in connection pool (not for production use!)
HHH000115: Hibernate connection pool size: 20
HHH000006: Autocommit mode: true
HHH000401: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8]
HHH000046: Connection properties: {user=root, password=root, autocommit=true, release_mode=auto}
Opening new JDBC connection
Created connection to: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, Isolation Level: 4
Database ->
       name : MySQL
    version : 5.0.22-community-nt
      major : 5
      minor : 0
Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.24 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
Binding named query: SELECT_CUSTOMERS => select customer from com.ebay.domain.customer.CustomerImpl customer
Binding named query: SELECT_BY_NAME => select count(*) from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_BY_NAME_PASSWORD => select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
Binding named query: GET_PASSWORD_BY_NAME => select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_RATES => select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_RATES_EXITS => select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_BY_SELLERNAME => select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_SELLERNAME => select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_AllDays => select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_BY_TOTALSELL => select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
Binding named query: SELECT_BY_SUCCESSSELL => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
Binding named query: List_FeedBack => from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
Binding named query: SPECIAL_MAX_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: SPECIAL_MIN_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: K_MEANS_PRICE => select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
Binding named query: MONTH_SELLINFO => select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
Binding named query: DAY_SELLINFO => select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
Binding named query: WEEK_SELLINFO => select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
Binding named query: KMEANS_MIN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Binding named query: KMEANS_BETWEEN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Binding named query: KMEANS_MAX => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Binding named query: MAX_PRICE => select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_ITEMS => select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_ALLITEMS => select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_AvgPrice => select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MAXPRICEDTO => select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MINPRICEDTO => select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_RECOMENDPRICE => select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Processing hbm.xml files
Process annotated classes
Binding entity from annotated class: com.ebay.domain.customer.CustomerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name CustomerImpl
Bind entity com.ebay.domain.customer.CustomerImpl on table customer
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_NAME, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property customername with lazy=false
building SimpleValue for customername
Building property customername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=STAR, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.user.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.ebay.domain.user.User on table User
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=USER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=PassWord, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property passWord with lazy=false
building SimpleValue for passWord
Building property passWord
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=UserName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property userName with lazy=false
building SimpleValue for userName
Building property userName
Binding entity from annotated class: com.ebay.domain.seller.SellerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name SellerImpl
Bind entity com.ebay.domain.seller.SellerImpl on table SELLER
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Seller_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property SellerName with lazy=false
building SimpleValue for SellerName
Building property SellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=CreateDate, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sinceDate with lazy=false
building SimpleValue for sinceDate
Building property sinceDate
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Star, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.seller.RecentFeedbackratings
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name RecentFeedbackratings
Bind entity com.ebay.domain.seller.RecentFeedbackratings on table RecentFeedbackratings
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=RecentFeedRate_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Negative with lazy=false
building SimpleValue for one_Negative
Building property one_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Neutral with lazy=false
building SimpleValue for one_Neutral
Building property one_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Positive with lazy=false
building SimpleValue for one_Positive
Building property one_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellerName with lazy=false
building SimpleValue for sellerName
Building property sellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Negative with lazy=false
building SimpleValue for six_Negative
Building property six_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Neutral with lazy=false
building SimpleValue for six_Neutral
Building property six_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Positive with lazy=false
building SimpleValue for six_Positive
Building property six_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Negative with lazy=false
building SimpleValue for twe_Negative
Building property twe_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Neutral with lazy=false
building SimpleValue for twe_Neutral
Building property twe_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Positive with lazy=false
building SimpleValue for twe_Positive
Building property twe_Positive
Binding entity from annotated class: com.ebay.domain.feedback.FeedBack
Import with entity name FeedBack
Bind entity com.ebay.domain.feedback.FeedBack on table FEEDBACK
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=FEEDBACK_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property feedbackId with lazy=false
building SimpleValue for feedbackId
Building property feedbackId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ATTITUDE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property attitude with lazy=false
building SimpleValue for attitude
Building property attitude
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=COMMENT, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property comment with lazy=false
building SimpleValue for comment
Building property comment
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Feed_Date, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property date with lazy=false
building SimpleValue for date
Building property date
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_Name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemName with lazy=false
building SimpleValue for itemName
Building property itemName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=PRICE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Seller, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellername with lazy=false
building SimpleValue for sellername
Building property sellername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=STAR_LEVEL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.item.ItemDto
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name ItemDto
Bind entity com.ebay.domain.item.ItemDto on table ItemDto
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=Id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=galleryURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property galleryURL with lazy=false
building SimpleValue for galleryURL
Building property galleryURL
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=ItemId, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=keyWords, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property keyWords with lazy=false
building SimpleValue for keyWords
Building property keyWords
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=price, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=sellCount, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellCount with lazy=false
building SimpleValue for sellCount
Building property sellCount
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=title, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property title with lazy=false
building SimpleValue for title
Building property title
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=viewItemURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property viewItemURL with lazy=false
building SimpleValue for viewItemURL
Building property viewItemURL
Setting SimpleValue typeName for id
Setting SimpleValue typeName for customername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for passWord
Setting SimpleValue typeName for userName
Setting SimpleValue typeName for id
Setting SimpleValue typeName for SellerName
Setting SimpleValue typeName for country
Setting SimpleValue typeName for sinceDate
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for one_Negative
Setting SimpleValue typeName for one_Neutral
Setting SimpleValue typeName for one_Positive
Setting SimpleValue typeName for sellerName
Setting SimpleValue typeName for six_Negative
Setting SimpleValue typeName for six_Neutral
Setting SimpleValue typeName for six_Positive
Setting SimpleValue typeName for twe_Negative
Setting SimpleValue typeName for twe_Neutral
Setting SimpleValue typeName for twe_Positive
Setting SimpleValue typeName for feedbackId
Setting SimpleValue typeName for attitude
Setting SimpleValue typeName for comment
Setting SimpleValue typeName for date
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for itemName
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for country
Setting SimpleValue typeName for galleryURL
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for keyWords
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellCount
Setting SimpleValue typeName for title
Setting SimpleValue typeName for viewItemURL
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
Automatic flush during beforeCompletion(): disabled
Automatic session close at end of transaction: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: disabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
multi-tenancy strategy : NONE
Connection release mode: auto
HHH000268: Transaction strategy: org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory
Using BatchFetchStyle : LEGACY
Maximum outer join fetch depth: 3
Default batch fetch size: 1
Generate SQL with comments: disabled
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
Default null ordering: none
Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
HHH000397: Using ASTQueryTranslatorFactory
Query language substitutions: {}
JPA-QL strict compliance: enabled
Second-level cache: enabled
Query cache: disabled
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
org.hibernate.cache.internal.NoCachingRegionFactory did not provide constructor accepting java.util.Properties; attempting no-arg constructor.
Optimize cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Named query checking : enabled
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : : disabled
JTA Track by Thread: enabled
Building session factory
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, sun.management.compiler=HotSpot Client Compiler, hibernate.ejb.discard_pc_on_close=false, rjrport=8081, hibernate.transaction.flush_before_completion=false, os.name=Windows 8, sun.boot.class.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\resources.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\rt.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\sunrsasign.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jsse.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jce.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\charsets.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jfr.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\classes, rjrkeystore=C:\Users\林林\.keystore, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, rjrkeypassword=changeit, java.runtime.version=1.7.0_45-b18, hibernate.connection.autocommit=true, rjrscanlist=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.scanlist, user.name=林林, javax.persistence.validation.mode=AUTO, hibernate.connection.release_mode=auto, rjrscanintervalseconds=5, user.language=zh, sun.boot.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin, rjrparentloaderpriority=true, java.version=1.7.0_45, user.timezone=Asia/Shanghai, sun.arch.data.model=32, rjrpassword=changeit, java.endorsed.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, hibernate.format_sql=true, java.class.version=51.0, user.country=CN, java.home=D:\Program Files (x86)\Java\jdk1.7.0_45\jre, java.vm.info=mixed mode, os.version=6.2, hibernate.transaction.factory_class=org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=24.45-b08, hibernate.max_fetch_depth=3, hibernate.connection.password=root, user.variant=, rjrneedclientauth=false, rjrenablessl=false, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, user.script=, user.home=C:\Users\林林, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=update, rjrignoreScanClassFile=true, java.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin;C:\Program Files (x86)\Common Files\NetSarang;C:\Program Files (x86)\AMD APP\bin\x86_64;C:\Program Files (x86)\AMD APP\bin\x86;D:\ActivePython27\;D:\ActivePython27\Scripts;F:\app\lin\product\11.2.0\dbhome_1\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;D:\SVN\bin;D:\MySQL Server 5.0\bin;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin;C:\Users\林林\AppData\Roaming\Python\Scripts;D:\Program Files (x86)\Java\jdk1.7.0_45/bin;D:\Program Files (x86)\Java\jdk1.7.0_45/jre/bin;D:\apache-maven-3.0.5/bin;D:\Google\google_appengine\;., java.vendor.url=http://java.oracle.com/, rjrResourceMapping=, rjrsslport=8443, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=runjettyrun.Bootstrap, java.class.path=D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlets-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-server-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-deploy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-policy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-util-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-rewrite-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-overlay-deployer-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jmx-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.jasper.glassfish-2.2.2.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.annotation_1.1.0.v201105051105.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\servlet-api-3.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-client-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.taglibs.standard.glassfish-1.2.0.v201112081803.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\com.sun.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jndi-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-core-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-webapp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp-2.2.0.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlet-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-continuation-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jsp-impl-2.2.2.b05.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-xml-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.objectweb.asm_3.3.1.v201101071600.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-io-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-security-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp.jstl-1.2.0.v201105211821.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\run-jetty-run-bootstrap-jetty8.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-plus-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-annotations-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-ajp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-websocket-8.1.8.v20121106.jar, hibernate.bytecode.use_reflection_optimizer=false, rjrclasspath=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.classpath, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.7, sun.os.patch.level=, sun.cpu.endian=little, java.io.tmpdir=C:\Users\林林\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, javax.persistence.sharedCache.mode=UNSPECIFIED, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, os.arch=x86, rjrenbaleJNDI=false, java.ext.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, rjrEclipseListener=59527, user.dir=E:\ebay\ebay-develop, line.separator=
, rjrcontext=/ebay-develop, java.vm.name=Java HotSpot(TM) Client VM, rjrwebapp=E:\ebay\ebay-develop\src\main\webapp, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.7, rjrenablescanner=false, hibernate.show_sql=true}
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Static SQL for entity: com.ebay.domain.user.User
 Version select: select USER_ID from User where USER_ID =?
 Snapshot select: select user_.USER_ID, user_.PassWord as PassWord2_4_, user_.UserName as UserName3_4_ from User user_ where user_.USER_ID=?
 Insert 0: insert into User (PassWord, UserName, USER_ID) values (?, ?, ?)
 Update 0: update User set PassWord=?, UserName=? where USER_ID=?
 Delete 0: delete from User where USER_ID=?
 Identity insert: insert into User (PassWord, UserName) values (?, ?)
Static SQL for entity: com.ebay.domain.item.ItemDto
 Version select: select Id from ItemDto where Id =?
 Snapshot select: select itemdto_.Id, itemdto_.country as country2_1_, itemdto_.galleryURL as galleryU3_1_, itemdto_.ItemId as ItemId4_1_, itemdto_.keyWords as keyWords5_1_, itemdto_.price as price6_1_, itemdto_.sellCount as sellCoun7_1_, itemdto_.title as title8_1_, itemdto_.viewItemURL as viewItem9_1_ from ItemDto itemdto_ where itemdto_.Id=?
 Insert 0: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL, Id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update ItemDto set country=?, galleryURL=?, ItemId=?, keyWords=?, price=?, sellCount=?, title=?, viewItemURL=? where Id=?
 Delete 0: delete from ItemDto where Id=?
 Identity insert: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.feedback.FeedBack
 Version select: select FEEDBACK_ID from FEEDBACK where FEEDBACK_ID =?
 Snapshot select: select feedback_.FEEDBACK_ID, feedback_.ATTITUDE as ATTITUDE2_0_, feedback_.COMMENT as COMMENT3_0_, feedback_.Feed_Date as Feed4_0_, feedback_.ITEM_ID as ITEM5_0_, feedback_.ITEM_Name as ITEM6_0_, feedback_.PRICE as PRICE7_0_, feedback_.Seller as Seller8_0_, feedback_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback_ where feedback_.FEEDBACK_ID=?
 Insert 0: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL, FEEDBACK_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update FEEDBACK set ATTITUDE=?, COMMENT=?, Feed_Date=?, ITEM_ID=?, ITEM_Name=?, PRICE=?, Seller=?, STAR_LEVEL=? where FEEDBACK_ID=?
 Delete 0: delete from FEEDBACK where FEEDBACK_ID=?
 Identity insert: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.customer.CustomerImpl
 Version select: select CUSTOMER_ID from customer where CUSTOMER_ID =?
 Snapshot select: select customerim_.CUSTOMER_ID, customerim_.CUSTOMER_NAME as CUSTOMER2_5_, customerim_.STAR as STAR3_5_ from customer customerim_ where customerim_.CUSTOMER_ID=?
 Insert 0: insert into customer (CUSTOMER_NAME, STAR, CUSTOMER_ID) values (?, ?, ?)
 Update 0: update customer set CUSTOMER_NAME=?, STAR=? where CUSTOMER_ID=?
 Delete 0: delete from customer where CUSTOMER_ID=?
 Identity insert: insert into customer (CUSTOMER_NAME, STAR) values (?, ?)
Static SQL for entity: com.ebay.domain.seller.RecentFeedbackratings
 Version select: select RecentFeedRate_ID from RecentFeedbackratings where RecentFeedRate_ID =?
 Snapshot select: select recentfeed_.RecentFeedRate_ID, recentfeed_.one_Negative as one2_2_, recentfeed_.one_Neutral as one3_2_, recentfeed_.one_Positive as one4_2_, recentfeed_.SellerName as SellerNa5_2_, recentfeed_.six_Negative as six6_2_, recentfeed_.six_Neutral as six7_2_, recentfeed_.six_Positive as six8_2_, recentfeed_.twe_Negative as twe9_2_, recentfeed_.twe_Neutral as twe10_2_, recentfeed_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed_ where recentfeed_.RecentFeedRate_ID=?
 Insert 0: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive, RecentFeedRate_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update RecentFeedbackratings set one_Negative=?, one_Neutral=?, one_Positive=?, SellerName=?, six_Negative=?, six_Neutral=?, six_Positive=?, twe_Negative=?, twe_Neutral=?, twe_Positive=? where RecentFeedRate_ID=?
 Delete 0: delete from RecentFeedbackratings where RecentFeedRate_ID=?
 Identity insert: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.seller.SellerImpl
 Version select: select Seller_ID from SELLER where Seller_ID =?
 Snapshot select: select sellerimpl_.Seller_ID, sellerimpl_.SellerName as SellerNa2_3_, sellerimpl_.Country as Country3_3_, sellerimpl_.CreateDate as CreateDa4_3_, sellerimpl_.Star as Star5_3_ from SELLER sellerimpl_ where sellerimpl_.Seller_ID=?
 Insert 0: insert into SELLER (SellerName, Country, CreateDate, Star, Seller_ID) values (?, ?, ?, ?, ?)
 Update 0: update SELLER set SellerName=?, Country=?, CreateDate=?, Star=? where Seller_ID=?
 Delete 0: delete from SELLER where Seller_ID=?
 Identity insert: insert into SELLER (SellerName, Country, CreateDate, Star) values (?, ?, ?, ?)
Static select for entity com.ebay.domain.user.User [NONE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [UPGRADE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [UPGRADE_NOWAIT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [FORCE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? lock in share mode
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_WRITE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [OPTIMISTIC]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.item.ItemDto [NONE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE_NOWAIT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [FORCE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? lock in share mode
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_WRITE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_MERGE on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.customer.CustomerImpl [NONE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE_NOWAIT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [FORCE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? lock in share mode
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_WRITE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [NONE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE_NOWAIT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [FORCE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? lock in share mode
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_WRITE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [NONE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE_NOWAIT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [FORCE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_WRITE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [NONE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE_NOWAIT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [FORCE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_WRITE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Registering SessionFactory: 4ab307f7-b3cb-45a5-b426-436fa8e6c95c (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Instantiated session factory
HHH000228: Running hbm2ddl schema update
HHH000102: Fetching database metadata
HHH000396: Updating schema
Processing hbm.xml files
Process annotated classes
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
HHH000261: Table found: ebay.feedback
HHH000037: Columns: [attitude, price, item_name, item_id, feed_date, feedback_id, comment, seller, star_level]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.itemdto
HHH000037: Columns: [id, viewitemurl, title, price, keywords, galleryurl, sellcount, itemid, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.recentfeedbackratings
HHH000037: Columns: [six_positive, twe_neutral, one_neutral, twe_negative, sellername, twe_positive, six_negative, six_neutral, recentfeedrate_id, one_positive, one_negative]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.seller
HHH000037: Columns: [star, createdate, sellername, seller_id, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.user
HHH000037: Columns: [username, user_id, password]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.customer
HHH000037: Columns: [star, customer_name, customer_id]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
HHH000232: Schema update complete
Checking 28 named HQL queries
Checking named query: WEEK_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'WeekSellInfo'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'WEEKDAY'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'WEEKDAY'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) WeekSellInfo ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.WeekSellInfo,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'WeekSellInfo' {originalText=WeekSellInfo}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@18d0ff8}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, weekday(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by weekday(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECT_MAXPRICEDTO
parse() - HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select max(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: DAY_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'DaySellDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'DAYOFMONTH'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'DAYOFMONTH'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) DaySellDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.DaySellDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'DaySellDto' {originalText=DaySellDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@18d0ff8}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, dayofmonth(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by dayofmonth(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_AllDays
parse() - HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[MINUS] Node: '-'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'TO_DAYS'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[AGGREGATE] Node: 'max'
    |        |        \-[IDENT] Node: 'Feed_Date'
    |        \-[METHOD_CALL] Node: '('
    |           +-[IDENT] Node: 'TO_DAYS'
    |           \-[EXPR_LIST] Node: 'exprList'
    |              \-[AGGREGATE] Node: 'min'
    |                 \-[IDENT] Node: 'Feed_Date'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( - ( ( TO_DAYS ( exprList ( max Feed_Date ) ) ) ( ( TO_DAYS ( exprList ( min Feed_Date ) ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[MINUS] BinaryArithmeticOperatorNode: '-' {dataType=org.hibernate.type.LongType@1f525ec}
    |  |  +-[METHOD_CALL] MethodNode: '('
    |  |  |  +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |  |  \-[EXPR_LIST] SqlNode: 'exprList'
    |  |  |     \-[AGGREGATE] AggregateNode: 'max'
    |  |  |        \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  |  \-[METHOD_CALL] MethodNode: '('
    |  |     +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |     \-[EXPR_LIST] SqlNode: 'exprList'
    |  |        \-[AGGREGATE] AggregateNode: 'min'
    |  |           \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select to_days(max(Feed_Date))-to_days(min(Feed_Date)) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SPECIAL_MIN_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'min'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'min'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select min(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: KMEANS_MAX
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'max'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@1c154c2}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: KMEANS_BETWEEN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'feedback'
          |  |  |  \-[IDENT] Node: 'sellername'
          |  |  \-[COLON] Node: ':'
          |  |     \-[IDENT] Node: 'sellername'
          |  \-[LT] Node: '<'
          |     +-[IDENT] Node: 'price'
          |     \-[COLON] Node: ':'
          |        \-[WEIRD_IDENT] Node: 'max'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[AND] SqlNode: 'and'
          |  +-[EQ] BinaryLogicOperatorNode: '='
          |  |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
          |  \-[LT] BinaryLogicOperatorNode: '<'
          |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
          |     \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@1c154c2}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@1c154c2}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: SELECT_AvgPrice
parse() - HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'avg'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( avg ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'avg'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select avg(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: List_FeedBack
parse() - HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'FeedBack'
    |        \-[ALIAS] Node: 'feedback'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Derived SELECT clause created.
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'feedback0_.FEEDBACK_ID as FEEDBACK1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}}
    |  \-[SQL_TOKEN] SqlFragment: 'feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
SQL: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_, feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_SELLERNAME
parse() - HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'seller'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@1eb1172
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} sellerimpl0_.Seller_ID ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID as Seller1_3_' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
    |  \-[SQL_TOKEN] SqlFragment: 'sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select sellerimpl0_.Seller_ID as Seller1_3_, sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@1eb1172
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: SELECT_RECOMENDPRICE
parse() - HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'RecomendPrice'
    |        +-[AGGREGATE] Node: 'min'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        +-[AGGREGATE] Node: 'avg'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        \-[AGGREGATE] Node: 'max'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'dto'
    |              \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) RecomendPrice ) ( min ( itemdto0_.price itemdto0_.Id price ) ) ( avg ( itemdto0_.price itemdto0_.Id price ) ) ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.RecomendPrice,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'RecomendPrice' {originalText=RecomendPrice}
    |     +-[AGGREGATE] AggregateNode: 'min'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[AGGREGATE] AggregateNode: 'avg'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'max'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_, avg(itemdto0_.price) as col_1_0_, max(itemdto0_.price) as col_2_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_ITEMS
parse() - HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select count(*) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: K_MEANS_PRICE
parse() - HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'price'
    |        |  \-[IDENT] Node: 'PriceDot'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'price'
    |        \-[COUNT] Node: 'count'
    |           \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[IDENT] Node: 'price'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : feedback.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) price ) PriceDot ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ( count * ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( feedback0_.PRICE {synthetic-alias} price ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price.PriceDot,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     |  \-[IDENT] IdentNode: 'PriceDot' {originalText=PriceDot}
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[COUNT] CountNode: 'count'
    |     |  \-[ROW_STAR] SqlNode: '*'
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
    \-[GROUP] SqlNode: 'group'
       \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          \-[IDENT] IdentNode: 'price' {originalText=price}

throwQueryException() : no errors
HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
SQL: select feedback0_.PRICE as col_0_0_, count(*) as col_1_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.PRICE
throwQueryException() : no errors
Checking named query: SELECT_MINPRICEDTO
parse() - HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'min'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'min'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_CUSTOMERS
parse() - HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  |  \-[IDENT] Node: 'ebay'
       |     |  |  |  \-[IDENT] Node: 'domain'
       |     |  |  \-[IDENT] Node: 'customer'
       |     |  \-[IDENT] Node: 'CustomerImpl'
       |     \-[ALIAS] Node: 'customer'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'customer'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.customer.CustomerImpl (customer) -> customerim0_
Resolved : customer -> customerim0_.CUSTOMER_ID
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} customerim0_.CUSTOMER_ID ) ( FromClause{level=1} customer customerim0_ ) )
Using FROM fragment [customer customerim0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (customer)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'customerim0_.CUSTOMER_ID as CUSTOMER1_5_' {alias=customer, className=com.ebay.domain.customer.CustomerImpl, tableAlias=customerim0_}
    |  \-[SQL_TOKEN] SqlFragment: 'customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[customer], fromElementByTableAlias=[customerim0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'customer customerim0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=customer,role=null,tableName=customer,tableAlias=customerim0_,origin=null,columns={,className=com.ebay.domain.customer.CustomerImpl}}

throwQueryException() : no errors
HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
SQL: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_ from customer customerim0_
throwQueryException() : no errors
Checking named query: MONTH_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'SellerInfoDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'Month'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@82c175
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) SellerInfoDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.SellerInfoDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'SellerInfoDto' {originalText=SellerInfoDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, month(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by month(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: KMEANS_MIN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[LT] Node: '<'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}
          \-[LT] BinaryLogicOperatorNode: '<'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@1c154c2}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<?
throwQueryException() : no errors
Checking named query: SELECT_RATES
parse() - HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'rate'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@1eb1172
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} recentfeed0_.RecentFeedRate_ID ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID as RecentFe1_2_' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
    |  \-[SQL_TOKEN] SqlFragment: 'recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_, recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SELLERNAME
parse() - HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@1eb1172
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select count(*) as col_0_0_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SUCCESSSELL
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellerName'
    |     \-[EQ] Node: '='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'attitude'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'attitude'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : attitude -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.attitude -> feedback0_.ATTITUDE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( feedback0_.ATTITUDE feedback0_.FEEDBACK_ID attitude ) ? ) ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[DOT] DotNode: 'feedback0_.ATTITUDE' {propertyName=attitude,dereferenceType=ALL,propertyPath=attitude,path=feedback.attitude,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |  \-[IDENT] IdentNode: 'attitude' {originalText=attitude}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=attitude, expectedType=org.hibernate.type.StringType@1eb1172}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.ATTITUDE=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: GET_PASSWORD_BY_NAME
parse() - HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'user'
    |        \-[IDENT] Node: 'passWord'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@1eb1172
Resolved : user.passWord -> user0_.PassWord
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@1eb1172
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( user0_.PassWord user0_.USER_ID passWord ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
    |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
    |  |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
SQL: select user0_.PassWord as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: MAX_PRICE
parse() - HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select max(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECT_RATES_EXITS
parse() - HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@1eb1172
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select count(*) as col_0_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_TOTALSELL
parse() - HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'sum'
    |        \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellerName'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'sum'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@1eb1172}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
SQL: select sum(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: SELECT_ALLITEMS
parse() - HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'dto'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@1eb1172
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} itemdto0_.Id ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id as Id1_1_' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  \-[SQL_TOKEN] SqlFragment: 'itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select itemdto0_.Id as Id1_1_, itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SPECIAL_MAX_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'max'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@1c154c2
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@1eb1172
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'max'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select max(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME_PASSWORD
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'user'
          |  |  \-[IDENT] Node: 'userName'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'userName'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'user'
             |  \-[IDENT] Node: 'passWord'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'passWord'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@1eb1172
Resolved : user.userName -> user0_.UserName
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@1eb1172
Resolved : user.passWord -> user0_.PassWord
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( and ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ( = ( user0_.PassWord user0_.USER_ID passWord ) ? ) ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@1eb1172}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
             |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
             |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
             \-[NAMED_PARAM] ParameterNode: '?' {name=passWord, expectedType=org.hibernate.type.StringType@1eb1172}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=? and user0_.PassWord=?
throwQueryException() : no errors
Checking 0 named SQL queries
Statistics initialized [enabled=false]
Registering EntityManagerFactory: ePU 
HHH000436: Entity manager factory name (ePU) is already registered.  If entity manager will be clustered or passivated, specify a unique value for property 'hibernate.ejb.entitymanager_factory_name'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'entityManagerFactory'
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@5e8afc: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@12ab76e
Returning cached instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating shared instance of singleton bean 'competitorcontroller'
Creating instance of bean 'competitorcontroller'
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Eagerly caching bean 'competitorcontroller' to allow for resolving potential circular references
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Creating shared instance of singleton bean 'sellerService'
Creating instance of bean 'sellerService'
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Eagerly caching bean 'sellerService' to allow for resolving potential circular references
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Creating shared instance of singleton bean 'ebayRatesDao'
Creating instance of bean 'ebayRatesDao'
Registered injected element on class [com.ebay.dao.seller.RatesDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Eagerly caching bean 'ebayRatesDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayRatesDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayRatesDao'
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Creating shared instance of singleton bean 'ebaySellerDao'
Creating instance of bean 'ebaySellerDao'
Registered injected element on class [com.ebay.dao.seller.SellerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Eagerly caching bean 'ebaySellerDao' to allow for resolving potential circular references
Processing injected method of bean 'ebaySellerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebaySellerDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddSeller' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'sellerService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.seller.SellerServiceImpl@39ce3c]
Finished creating instance of bean 'sellerService'
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Creating shared instance of singleton bean 'feedbackService'
Creating instance of bean 'feedbackService'
Registered injected element on class [com.ebay.service.feedback.FeedbackServiceImpl]: ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Eagerly caching bean 'feedbackService' to allow for resolving potential circular references
Processing injected method of bean 'feedbackService': ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Creating shared instance of singleton bean 'ebayfeedbackdao'
Creating instance of bean 'ebayfeedbackdao'
Registered injected element on class [com.ebay.dao.feedback.FeedBackDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Eagerly caching bean 'ebayfeedbackdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayfeedbackdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddFeedbacks' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'feedbackService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.feedback.FeedbackServiceImpl@112ca62]
Finished creating instance of bean 'feedbackService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'competitorcontroller'
Creating shared instance of singleton bean 'itemcontroller'
Creating instance of bean 'itemcontroller'
Registered injected element on class [com.ebay.controller.ItemController]: ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Eagerly caching bean 'itemcontroller' to allow for resolving potential circular references
Processing injected method of bean 'itemcontroller': ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Creating shared instance of singleton bean 'itemService'
Creating instance of bean 'itemService'
Registered injected element on class [com.ebay.service.item.ItemServiceImpl]: ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Eagerly caching bean 'itemService' to allow for resolving potential circular references
Processing injected method of bean 'itemService': ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Creating shared instance of singleton bean 'ebayitemdao'
Creating instance of bean 'ebayitemdao'
Registered injected element on class [com.ebay.dao.item.ItemDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Eagerly caching bean 'ebayitemdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayitemdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayitemdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'addItem' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'itemService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.item.ItemServiceImpl@a5159d]
Finished creating instance of bean 'itemService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'itemcontroller'
Creating shared instance of singleton bean 'loginController'
Creating instance of bean 'loginController'
Registered injected element on class [com.ebay.controller.LoginController]: ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Eagerly caching bean 'loginController' to allow for resolving potential circular references
Processing injected method of bean 'loginController': ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Creating shared instance of singleton bean 'userService'
Creating instance of bean 'userService'
Registered injected element on class [com.ebay.service.user.UserServiceImpl]: ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Eagerly caching bean 'userService' to allow for resolving potential circular references
Processing injected method of bean 'userService': ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Creating shared instance of singleton bean 'ebayUserDao'
Creating instance of bean 'ebayUserDao'
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Eagerly caching bean 'ebayUserDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayUserDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Processing injected method of bean 'ebayUserDao': ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Creating shared instance of singleton bean 'ebayEntityConfiguration'
Creating instance of bean 'ebayEntityConfiguration'
Found init method on class [com.ebay.common.persistence.EntityConfiguration]: public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Registered init method on class [com.ebay.common.persistence.EntityConfiguration]: org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement@a46c92e
Registered injected element on class [com.ebay.common.persistence.EntityConfiguration]: ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Eagerly caching bean 'ebayEntityConfiguration' to allow for resolving potential circular references
Processing injected method of bean 'ebayEntityConfiguration': ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Creating shared instance of singleton bean 'eMergedEntityContexts'
Creating instance of bean 'eMergedEntityContexts'
Eagerly caching bean 'eMergedEntityContexts' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Invoking init method on bean 'ebayEntityConfiguration': public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from class path resource [applicationContext-entity.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Loading bean definitions
Refreshing org.springframework.context.support.GenericXmlApplicationContext@2e27fc: startup date [Fri Jun 06 23:04:08 CST 2014]; root of context hierarchy
Bean factory for org.springframework.context.support.GenericXmlApplicationContext@2e27fc: org.springframework.beans.factory.support.DefaultListableBeanFactory@710755: defining beans []; root of factory hierarchy
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@13b044a]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@196bcdc]
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@710755: defining beans []; root of factory hierarchy
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@1491782]
Returning cached instance of singleton bean 'lifecycleProcessor'
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayEntityConfiguration'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayUserDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'userService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'loginController'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Returning cached instance of singleton bean 'feedbackService'
Returning cached instance of singleton bean 'itemService'
Returning cached instance of singleton bean 'sellerService'
Returning cached instance of singleton bean 'userService'
Creating shared instance of singleton bean 'eCustomerDao'
Creating instance of bean 'eCustomerDao'
Registered injected element on class [com.ebay.dao.customer.CustomerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Eagerly caching bean 'eCustomerDao' to allow for resolving potential circular references
Processing injected method of bean 'eCustomerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eCustomerDao'
Returning cached instance of singleton bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'ebayitemdao'
Returning cached instance of singleton bean 'ebayRatesDao'
Returning cached instance of singleton bean 'ebaySellerDao'
Returning cached instance of singleton bean 'ebayUserDao'
Returning cached instance of singleton bean 'ebayEntityConfiguration'
Creating shared instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean 'mvcContentNegotiationManager'
Eagerly caching bean 'mvcContentNegotiationManager' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mvcContentNegotiationManager'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean '(inner bean)'
Creating shared instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Eagerly caching bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)'
Eagerly caching bean 'org.springframework.web.servlet.handler.MappedInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Looking for request mappings in application context: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Fri Jun 06 23:04:07 CST 2014]; parent: Root WebApplicationContext
Mapped "{[/selectRates],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.RecentFeedbackratings com.ebay.controller.CompetitorController.selectRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/catchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.CompetitorController.CatchSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
Mapped "{[/selectDayInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.DaySellDto> com.ebay.controller.CompetitorController.selectDayInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectPring],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.price.Pring> com.ebay.controller.CompetitorController.getPricing(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectMonthInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.SellerInfoDto> com.ebay.controller.CompetitorController.selectMonthInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectSingleSeller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.SellerDto com.ebay.controller.CompetitorController.selectDtoSingleSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.Seller com.ebay.controller.CompetitorController.selectCompetitor(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.Item> com.ebay.controller.CompetitorController.selectSpecialItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectWeekInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.WeekSellInfo> com.ebay.controller.CompetitorController.selectWeekInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectFeedBack],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.feedback.FeedBack> com.ebay.controller.CompetitorController.selectAllFeedBack(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.ItemDto> com.ebay.controller.ItemController.selectItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/getRecomendPrices],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.item.RecomendPrice com.ebay.controller.ItemController.selectRprice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/login/controller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.validateLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/competitor/competitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/product/product],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.product(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/sendemail],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.getEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/ebay || /],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.Login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/forgetpassword],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.forgetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#1'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#1'
Creating instance of bean '(inner bean)#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#2'
Creating instance of bean '(inner bean)#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#3'
Creating instance of bean '(inner bean)#4'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#4'
Creating instance of bean '(inner bean)#5'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#5'
Creating instance of bean '(inner bean)#6'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#6'
Creating instance of bean '(inner bean)#7'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#7'
Creating instance of bean '(inner bean)#8'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#8'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Looking for controller advice: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Fri Jun 06 23:04:07 CST 2014]; parent: Root WebApplicationContext
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#9'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#9'
Creating instance of bean '(inner bean)#10'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#10'
Creating instance of bean '(inner bean)#11'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#11'
Creating instance of bean '(inner bean)#12'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#12'
Creating instance of bean '(inner bean)#13'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#13'
Creating instance of bean '(inner bean)#14'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#14'
Creating instance of bean '(inner bean)#15'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#15'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Looking for exception mappings: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Fri Jun 06 23:04:07 CST 2014]; parent: Root WebApplicationContext
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Eagerly caching bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Fri Jun 06 23:04:07 CST 2014]; parent: Root WebApplicationContext
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Rejected bean name 'competitorcontroller': no URL paths identified
Rejected bean name 'itemcontroller': no URL paths identified
Rejected bean name 'loginController': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletConfig': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Mapped URL path [/img/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Mapped URL path [/css/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Mapped URL path [/js/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Mapped URL path [/plugins/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Returning cached instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Fri Jun 06 23:04:07 CST 2014]; parent: Root WebApplicationContext
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Root mapping to handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword/] onto handler 'loginController'
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletConfig': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0' to allow for resolving potential circular references
Creating shared instance of singleton bean 'mappingJacksonHttpMessageConverter'
Creating instance of bean 'mappingJacksonHttpMessageConverter'
Eagerly caching bean 'mappingJacksonHttpMessageConverter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'entityManagerFactory'
Creating shared instance of singleton bean 'templateResolver'
Creating instance of bean 'templateResolver'
Eagerly caching bean 'templateResolver' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateResolver'
Creating shared instance of singleton bean 'templateEngine'
Creating instance of bean 'templateEngine'
Eagerly caching bean 'templateEngine' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateResolver'
Invoking afterPropertiesSet() on bean with name 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateEngine'
Creating shared instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Eagerly caching bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating shared instance of singleton bean 'transactionManager'
Creating instance of bean 'transactionManager'
Eagerly caching bean 'transactionManager' to allow for resolving potential circular references
Returning cached instance of singleton bean 'entityManagerFactory'
Invoking afterPropertiesSet() on bean with name 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating shared instance of singleton bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Eagerly caching bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Finished creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@63b542]
Returning cached instance of singleton bean 'lifecycleProcessor'
Unable to locate MultipartResolver with name 'multipartResolver': no multipart request handling provided
Creating instance of bean 'org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver'
Unable to locate LocaleResolver with name 'localeResolver': using default [org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver@6c3faa]
Creating instance of bean 'org.springframework.web.servlet.theme.FixedThemeResolver'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.theme.FixedThemeResolver'
Unable to locate ThemeResolver with name 'themeResolver': using default [org.springframework.web.servlet.theme.FixedThemeResolver@abbd83]
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator'
Unable to locate RequestToViewNameTranslator with name 'viewNameTranslator': using default [org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@11732a2]
Returning cached instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Returning cached instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating instance of bean 'org.springframework.web.servlet.support.SessionFlashMapManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.support.SessionFlashMapManager'
Unable to locate FlashMapManager with name 'flashMapManager': using default [org.springframework.web.servlet.support.SessionFlashMapManager@197ae63]
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletConfigInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletContextInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.liveBeansView.mbeanDomain]
Converted JNDI name [java:comp/env/spring.liveBeansView.mbeanDomain] not found - trying original name [spring.liveBeansView.mbeanDomain]. javax.naming.NameNotFoundException; remaining name 'env/spring.liveBeansView.mbeanDomain'
Looking up JNDI object with name [spring.liveBeansView.mbeanDomain]
JNDI lookup for name [spring.liveBeansView.mbeanDomain] threw NamingException with message: null. Returning null.
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Published WebApplicationContext of servlet 'dispatcher' as ServletContext attribute with name [org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher]
FrameworkServlet 'dispatcher': initialization completed in 1412 ms
Servlet 'dispatcher' configured successfully
DispatcherServlet with name 'dispatcher' processing GET request for [/competitor/competitor]
Looking up handler method for path /competitor/competitor
Returning handler method [public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'loginController'
Last-Modified value for [/competitor/competitor] is: -1
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Rendering view [org.thymeleaf.spring3.view.ThymeleafView@cb499] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/jqx.base.css]
Looking up handler method for path /css/jqx.base.css
DispatcherServlet with name 'dispatcher' processing GET request for [/css/competitor.css]
Looking up handler method for path /css/competitor.css
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxcore.js]
Looking up handler method for path /js/jqxcore.js
Did not find handler method for [/css/jqx.base.css]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/home.css]
Did not find handler method for [/css/competitor.css]
Matching patterns for request [/css/jqx.base.css] are [/css/**]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jquery-1.10.2.min.js]
URI Template variables for request [/css/jqx.base.css] are {}
Did not find handler method for [/js/jqxcore.js]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxbuttons.js]
Matching patterns for request [/js/jqxcore.js] are [/js/**]
Looking up handler method for path /js/jquery-1.10.2.min.js
Matching patterns for request [/css/competitor.css] are [/css/**]
URI Template variables for request [/css/competitor.css] are {}
Looking up handler method for path /css/home.css
Mapping [/css/jqx.base.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Did not find handler method for [/js/jquery-1.10.2.min.js]
Mapping [/css/competitor.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
URI Template variables for request [/js/jqxcore.js] are {}
Looking up handler method for path /js/jqxbuttons.js
Mapping [/js/jqxcore.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Did not find handler method for [/css/home.css]
Last-Modified value for [/css/competitor.css] is: -1
Matching patterns for request [/js/jquery-1.10.2.min.js] are [/js/**]
Last-Modified value for [/css/jqx.base.css] is: -1
Trying relative path [competitor.css] against base location: ServletContext resource [/css/]
URI Template variables for request [/js/jquery-1.10.2.min.js] are {}
Did not find handler method for [/js/jqxbuttons.js]
Matching patterns for request [/css/home.css] are [/css/**]
Last-Modified value for [/js/jqxcore.js] is: -1
URI Template variables for request [/css/home.css] are {}
Mapping [/css/home.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Matching patterns for request [/js/jqxbuttons.js] are [/js/**]
Mapping [/js/jquery-1.10.2.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Trying relative path [jqx.base.css] against base location: ServletContext resource [/css/]
Last-Modified value for [/js/jquery-1.10.2.min.js] is: -1
URI Template variables for request [/js/jqxbuttons.js] are {}
Last-Modified value for [/css/home.css] is: -1
Trying relative path [jqxcore.js] against base location: ServletContext resource [/js/]
Trying relative path [home.css] against base location: ServletContext resource [/css/]
Mapping [/js/jqxbuttons.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Trying relative path [jquery-1.10.2.min.js] against base location: ServletContext resource [/js/]
Last-Modified value for [/js/jqxbuttons.js] is: -1
Trying relative path [jqxbuttons.js] against base location: ServletContext resource [/js/]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxcore.js]
DispatcherServlet with name 'dispatcher' processing GET request for [/competitor/competitor]
Looking up handler method for path /js/jqxcore.js
Looking up handler method for path /competitor/competitor
Returning handler method [public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'loginController'
Last-Modified value for [/competitor/competitor] is: -1
Did not find handler method for [/js/jqxcore.js]
Matching patterns for request [/js/jqxcore.js] are [/js/**]
URI Template variables for request [/js/jqxcore.js] are {}
Mapping [/js/jqxcore.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Last-Modified value for [/js/jqxcore.js] is: -1
Rendering view [org.thymeleaf.spring3.view.ThymeleafView@cb499] in DispatcherServlet with name 'dispatcher'
Trying relative path [jqxcore.js] against base location: ServletContext resource [/js/]
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/home.css]
Looking up handler method for path /css/home.css
Did not find handler method for [/css/home.css]
Matching patterns for request [/css/home.css] are [/css/**]
URI Template variables for request [/css/home.css] are {}
Mapping [/css/home.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/home.css] is: -1
Trying relative path [home.css] against base location: ServletContext resource [/css/]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/competitor.css]
Looking up handler method for path /css/competitor.css
DispatcherServlet with name 'dispatcher' processing GET request for [/css/jqx.base.css]
Looking up handler method for path /css/jqx.base.css
Did not find handler method for [/css/competitor.css]
Matching patterns for request [/css/competitor.css] are [/css/**]
URI Template variables for request [/css/competitor.css] are {}
Mapping [/css/competitor.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Did not find handler method for [/css/jqx.base.css]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jquery-1.10.2.min.js]
Last-Modified value for [/css/competitor.css] is: -1
Trying relative path [competitor.css] against base location: ServletContext resource [/css/]
Looking up handler method for path /js/jquery-1.10.2.min.js
Did not find handler method for [/js/jquery-1.10.2.min.js]
Matching patterns for request [/css/jqx.base.css] are [/css/**]
URI Template variables for request [/css/jqx.base.css] are {}
Mapping [/css/jqx.base.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/jqx.base.css] is: -1
Trying relative path [jqx.base.css] against base location: ServletContext resource [/css/]
Matching patterns for request [/js/jquery-1.10.2.min.js] are [/js/**]
URI Template variables for request [/js/jquery-1.10.2.min.js] are {}
Mapping [/js/jquery-1.10.2.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Last-Modified value for [/js/jquery-1.10.2.min.js] is: -1
Trying relative path [jquery-1.10.2.min.js] against base location: ServletContext resource [/js/]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxcore.js]
Looking up handler method for path /js/jqxcore.js
Did not find handler method for [/js/jqxcore.js]
Matching patterns for request [/js/jqxcore.js] are [/js/**]
URI Template variables for request [/js/jqxcore.js] are {}
Mapping [/js/jqxcore.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Last-Modified value for [/js/jqxcore.js] is: -1
Trying relative path [jqxcore.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/css/competitor.css]
Determined media type 'text/css' for ServletContext resource [/css/competitor.css]
Found matching resource: ServletContext resource [/css/competitor.css]
Determined media type 'text/css' for ServletContext resource [/css/competitor.css]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxbuttons.js]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxscrollbar.js]
Looking up handler method for path /js/jqxbuttons.js
Looking up handler method for path /js/jqxscrollbar.js
Did not find handler method for [/js/jqxbuttons.js]
Did not find handler method for [/js/jqxscrollbar.js]
Matching patterns for request [/js/jqxbuttons.js] are [/js/**]
Matching patterns for request [/js/jqxscrollbar.js] are [/js/**]
URI Template variables for request [/js/jqxscrollbar.js] are {}
URI Template variables for request [/js/jqxbuttons.js] are {}
Mapping [/js/jqxscrollbar.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Mapping [/js/jqxbuttons.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Last-Modified value for [/js/jqxscrollbar.js] is: -1
Last-Modified value for [/js/jqxbuttons.js] is: -1
Trying relative path [jqxscrollbar.js] against base location: ServletContext resource [/js/]
Trying relative path [jqxbuttons.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/css/home.css]
Found matching resource: ServletContext resource [/css/home.css]
Determined media type 'text/css' for ServletContext resource [/css/home.css]
Determined media type 'text/css' for ServletContext resource [/css/home.css]
Found matching resource: ServletContext resource [/js/jqxbuttons.js]
Found matching resource: ServletContext resource [/js/jqxbuttons.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxbuttons.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxbuttons.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxlistbox.js]
Looking up handler method for path /js/jqxlistbox.js
Did not find handler method for [/js/jqxlistbox.js]
Matching patterns for request [/js/jqxlistbox.js] are [/js/**]
URI Template variables for request [/js/jqxlistbox.js] are {}
Mapping [/js/jqxlistbox.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Last-Modified value for [/js/jqxlistbox.js] is: -1
Trying relative path [jqxlistbox.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/js/jqxscrollbar.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxscrollbar.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Resolving exception from handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b]: org.eclipse.jetty.io.EofException
Resolving exception from handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b]: org.eclipse.jetty.io.EofException
Could not complete request
org.eclipse.jetty.io.EofException
	at org.eclipse.jetty.http.HttpGenerator.flushBuffer(HttpGenerator.java:914)
	at org.eclipse.jetty.http.AbstractGenerator.blockForOutput(AbstractGenerator.java:523)
	at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:170)
	at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:107)
	at org.springframework.util.StreamUtils.copy(StreamUtils.java:125)
	at org.springframework.util.FileCopyUtils.copy(FileCopyUtils.java:109)
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:244)
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:145)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:734)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:847)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1336)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1307)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:453)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:560)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1072)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:382)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1006)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:365)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:485)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:926)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:988)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:635)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.io.IOException: 你的主机中的软件中止了一个已建立的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:487)
	at org.eclipse.jetty.io.nio.ChannelEndPoint.flush(ChannelEndPoint.java:310)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.flush(SelectChannelEndPoint.java:362)
	at org.eclipse.jetty.http.HttpGenerator.flushBuffer(HttpGenerator.java:853)
	... 42 more
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxcombobox.js]
Looking up handler method for path /js/jqxcombobox.js
Did not find handler method for [/js/jqxcombobox.js]
Matching patterns for request [/js/jqxcombobox.js] are [/js/**]
URI Template variables for request [/js/jqxcombobox.js] are {}
Mapping [/js/jqxcombobox.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Last-Modified value for [/js/jqxcombobox.js] is: -1
Trying relative path [jqxcombobox.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/css/jqx.base.css]
Determined media type 'text/css' for ServletContext resource [/css/jqx.base.css]
Found matching resource: ServletContext resource [/js/jqxcore.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxcore.js]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/ProgressBar.js]
Looking up handler method for path /js/ProgressBar.js
Did not find handler method for [/js/ProgressBar.js]
Matching patterns for request [/js/ProgressBar.js] are [/js/**]
URI Template variables for request [/js/ProgressBar.js] are {}
Mapping [/js/ProgressBar.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Last-Modified value for [/js/ProgressBar.js] is: -1
Trying relative path [ProgressBar.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/css/jqx.base.css]
Determined media type 'text/css' for ServletContext resource [/css/jqx.base.css]
Found matching resource: ServletContext resource [/js/jqxcore.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxcore.js]
Resolving exception from handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b]: org.eclipse.jetty.io.EofException
Resolving exception from handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b]: org.eclipse.jetty.io.EofException
Found matching resource: ServletContext resource [/js/jqxcore.js]
Could not complete request
org.eclipse.jetty.io.EofException
	at org.eclipse.jetty.http.HttpGenerator.flushBuffer(HttpGenerator.java:914)
	at org.eclipse.jetty.http.AbstractGenerator.blockForOutput(AbstractGenerator.java:523)
	at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:170)
	at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:107)
	at org.springframework.util.StreamUtils.copy(StreamUtils.java:125)
	at org.springframework.util.FileCopyUtils.copy(FileCopyUtils.java:109)
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:244)
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:145)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:734)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:847)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1336)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1307)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:453)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:560)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1072)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:382)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1006)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:365)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:485)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:926)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:988)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:635)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.io.IOException: 你的主机中的软件中止了一个已建立的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:487)
	at org.eclipse.jetty.io.nio.ChannelEndPoint.flush(ChannelEndPoint.java:310)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.flush(SelectChannelEndPoint.java:362)
	at org.eclipse.jetty.http.HttpGenerator.flushBuffer(HttpGenerator.java:853)
	... 42 more
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxcore.js]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jquery.jqplot.min.js]
Looking up handler method for path /js/jquery.jqplot.min.js
Did not find handler method for [/js/jquery.jqplot.min.js]
Matching patterns for request [/js/jquery.jqplot.min.js] are [/js/**]
URI Template variables for request [/js/jquery.jqplot.min.js] are {}
Mapping [/js/jquery.jqplot.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Last-Modified value for [/js/jquery.jqplot.min.js] is: -1
Trying relative path [jquery.jqplot.min.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/js/jqxlistbox.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxlistbox.js]
Found matching resource: ServletContext resource [/js/jquery-1.10.2.min.js]
Found matching resource: ServletContext resource [/js/jquery-1.10.2.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jquery-1.10.2.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jquery-1.10.2.min.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Resolving exception from handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496]: org.eclipse.jetty.io.EofException
Successfully completed request
Resolving exception from handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496]: org.eclipse.jetty.io.EofException
Could not complete request
org.eclipse.jetty.io.EofException
	at org.eclipse.jetty.http.HttpGenerator.flushBuffer(HttpGenerator.java:914)
	at org.eclipse.jetty.http.AbstractGenerator.blockForOutput(AbstractGenerator.java:523)
	at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:170)
	at org.eclipse.jetty.server.HttpOutput.write(HttpOutput.java:107)
	at org.springframework.util.StreamUtils.copy(StreamUtils.java:125)
	at org.springframework.util.FileCopyUtils.copy(FileCopyUtils.java:109)
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.writeContent(ResourceHttpRequestHandler.java:244)
	at org.springframework.web.servlet.resource.ResourceHttpRequestHandler.handleRequest(ResourceHttpRequestHandler.java:145)
	at org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter.handle(HttpRequestHandlerAdapter.java:49)
	at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:925)
	at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:856)
	at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:936)
	at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:827)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:734)
	at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:812)
	at javax.servlet.http.HttpServlet.service(HttpServlet.java:847)
	at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:669)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1336)
	at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:88)
	at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:107)
	at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1307)
	at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:453)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:137)
	at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:560)
	at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:231)
	at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1072)
	at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:382)
	at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:193)
	at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1006)
	at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:135)
	at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:116)
	at org.eclipse.jetty.server.Server.handle(Server.java:365)
	at org.eclipse.jetty.server.AbstractHttpConnection.handleRequest(AbstractHttpConnection.java:485)
	at org.eclipse.jetty.server.AbstractHttpConnection.headerComplete(AbstractHttpConnection.java:926)
	at org.eclipse.jetty.server.AbstractHttpConnection$RequestHandler.headerComplete(AbstractHttpConnection.java:988)
	at org.eclipse.jetty.http.HttpParser.parseNext(HttpParser.java:635)
	at org.eclipse.jetty.http.HttpParser.parseAvailable(HttpParser.java:235)
	at org.eclipse.jetty.server.AsyncHttpConnection.handle(AsyncHttpConnection.java:82)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.handle(SelectChannelEndPoint.java:628)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint$1.run(SelectChannelEndPoint.java:52)
	at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:608)
	at org.eclipse.jetty.util.thread.QueuedThreadPool$3.run(QueuedThreadPool.java:543)
	at java.lang.Thread.run(Thread.java:744)
Caused by: java.io.IOException: 你的主机中的软件中止了一个已建立的连接。
	at sun.nio.ch.SocketDispatcher.write0(Native Method)
	at sun.nio.ch.SocketDispatcher.write(SocketDispatcher.java:51)
	at sun.nio.ch.IOUtil.writeFromNativeBuffer(IOUtil.java:93)
	at sun.nio.ch.IOUtil.write(IOUtil.java:65)
	at sun.nio.ch.SocketChannelImpl.write(SocketChannelImpl.java:487)
	at org.eclipse.jetty.io.nio.ChannelEndPoint.flush(ChannelEndPoint.java:310)
	at org.eclipse.jetty.io.nio.SelectChannelEndPoint.flush(SelectChannelEndPoint.java:362)
	at org.eclipse.jetty.http.HttpGenerator.flushBuffer(HttpGenerator.java:853)
	... 42 more
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.pieRenderer.min.js]
Looking up handler method for path /plugins/jqplot.pieRenderer.min.js
Did not find handler method for [/plugins/jqplot.pieRenderer.min.js]
Matching patterns for request [/plugins/jqplot.pieRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.pieRenderer.min.js] are {}
Mapping [/plugins/jqplot.pieRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1307377] and 1 interceptor
Last-Modified value for [/plugins/jqplot.pieRenderer.min.js] is: -1
Trying relative path [jqplot.pieRenderer.min.js] against base location: ServletContext resource [/plugins/]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Found matching resource: ServletContext resource [/js/jqxcombobox.js]
Successfully completed request
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxcombobox.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.donutRenderer.min.js]
Looking up handler method for path /plugins/jqplot.donutRenderer.min.js
Did not find handler method for [/plugins/jqplot.donutRenderer.min.js]
Matching patterns for request [/plugins/jqplot.donutRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.donutRenderer.min.js] are {}
Mapping [/plugins/jqplot.donutRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1307377] and 1 interceptor
Last-Modified value for [/plugins/jqplot.donutRenderer.min.js] is: -1
Trying relative path [jqplot.donutRenderer.min.js] against base location: ServletContext resource [/plugins/]
Found matching resource: ServletContext resource [/js/ProgressBar.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/ProgressBar.js]
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.dateAxisRenderer.min.js]
Looking up handler method for path /plugins/jqplot.dateAxisRenderer.min.js
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.canvasTextRenderer.min.js]
Looking up handler method for path /plugins/jqplot.canvasTextRenderer.min.js
Did not find handler method for [/plugins/jqplot.dateAxisRenderer.min.js]
Matching patterns for request [/plugins/jqplot.dateAxisRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.dateAxisRenderer.min.js] are {}
Mapping [/plugins/jqplot.dateAxisRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1307377] and 1 interceptor
Last-Modified value for [/plugins/jqplot.dateAxisRenderer.min.js] is: -1
Trying relative path [jqplot.dateAxisRenderer.min.js] against base location: ServletContext resource [/plugins/]
Did not find handler method for [/plugins/jqplot.canvasTextRenderer.min.js]
Matching patterns for request [/plugins/jqplot.canvasTextRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.canvasTextRenderer.min.js] are {}
Mapping [/plugins/jqplot.canvasTextRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1307377] and 1 interceptor
Last-Modified value for [/plugins/jqplot.canvasTextRenderer.min.js] is: -1
Trying relative path [jqplot.canvasTextRenderer.min.js] against base location: ServletContext resource [/plugins/]
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.canvasAxisTickRenderer.min.js]
Looking up handler method for path /plugins/jqplot.canvasAxisTickRenderer.min.js
Did not find handler method for [/plugins/jqplot.canvasAxisTickRenderer.min.js]
Matching patterns for request [/plugins/jqplot.canvasAxisTickRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.canvasAxisTickRenderer.min.js] are {}
Mapping [/plugins/jqplot.canvasAxisTickRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1307377] and 1 interceptor
Last-Modified value for [/plugins/jqplot.canvasAxisTickRenderer.min.js] is: -1
Trying relative path [jqplot.canvasAxisTickRenderer.min.js] against base location: ServletContext resource [/plugins/]
Found matching resource: ServletContext resource [/js/jquery.jqplot.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jquery.jqplot.min.js]
Found matching resource: ServletContext resource [/plugins/jqplot.canvasAxisTickRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.canvasAxisTickRenderer.min.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.categoryAxisRenderer.min.js]
Looking up handler method for path /plugins/jqplot.categoryAxisRenderer.min.js
Did not find handler method for [/plugins/jqplot.categoryAxisRenderer.min.js]
Matching patterns for request [/plugins/jqplot.categoryAxisRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.categoryAxisRenderer.min.js] are {}
Mapping [/plugins/jqplot.categoryAxisRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1307377] and 1 interceptor
Last-Modified value for [/plugins/jqplot.categoryAxisRenderer.min.js] is: -1
Trying relative path [jqplot.categoryAxisRenderer.min.js] against base location: ServletContext resource [/plugins/]
Found matching resource: ServletContext resource [/plugins/jqplot.dateAxisRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.dateAxisRenderer.min.js]
Found matching resource: ServletContext resource [/plugins/jqplot.canvasTextRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.canvasTextRenderer.min.js]
Found matching resource: ServletContext resource [/plugins/jqplot.donutRenderer.min.js]
Found matching resource: ServletContext resource [/plugins/jqplot.pieRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.donutRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.pieRenderer.min.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.barRenderer.min.js]
Looking up handler method for path /plugins/jqplot.barRenderer.min.js
Did not find handler method for [/plugins/jqplot.barRenderer.min.js]
Matching patterns for request [/plugins/jqplot.barRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.barRenderer.min.js] are {}
Mapping [/plugins/jqplot.barRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1307377] and 1 interceptor
Last-Modified value for [/plugins/jqplot.barRenderer.min.js] is: -1
Trying relative path [jqplot.barRenderer.min.js] against base location: ServletContext resource [/plugins/]
Found matching resource: ServletContext resource [/plugins/jqplot.categoryAxisRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.categoryAxisRenderer.min.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/plugins/jqplot.barRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.barRenderer.min.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/img/tp_ebay_transparent.png]
Looking up handler method for path /img/tp_ebay_transparent.png
Did not find handler method for [/img/tp_ebay_transparent.png]
Matching patterns for request [/img/tp_ebay_transparent.png] are [/img/**]
URI Template variables for request [/img/tp_ebay_transparent.png] are {}
Mapping [/img/tp_ebay_transparent.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@150188b] and 1 interceptor
Last-Modified value for [/img/tp_ebay_transparent.png] is: -1
Trying relative path [tp_ebay_transparent.png] against base location: ServletContext resource [/img/]
DispatcherServlet with name 'dispatcher' processing GET request for [/img/logo_new.png]
DispatcherServlet with name 'dispatcher' processing GET request for [/img/tp_amazon_transparent.png]
Looking up handler method for path /img/logo_new.png
Looking up handler method for path /img/tp_amazon_transparent.png
Did not find handler method for [/img/logo_new.png]
Did not find handler method for [/img/tp_amazon_transparent.png]
Matching patterns for request [/img/logo_new.png] are [/img/**]
URI Template variables for request [/img/logo_new.png] are {}
Matching patterns for request [/img/tp_amazon_transparent.png] are [/img/**]
Mapping [/img/logo_new.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@150188b] and 1 interceptor
URI Template variables for request [/img/tp_amazon_transparent.png] are {}
Last-Modified value for [/img/logo_new.png] is: -1
Mapping [/img/tp_amazon_transparent.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@150188b] and 1 interceptor
Trying relative path [logo_new.png] against base location: ServletContext resource [/img/]
Last-Modified value for [/img/tp_amazon_transparent.png] is: -1
Trying relative path [tp_amazon_transparent.png] against base location: ServletContext resource [/img/]
Found matching resource: ServletContext resource [/img/logo_new.png]
Determined media type 'image/png' for ServletContext resource [/img/logo_new.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/img/tp_ebay_transparent.png]
Determined media type 'image/png' for ServletContext resource [/img/tp_ebay_transparent.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/img/tp_amazon_transparent.png]
Determined media type 'image/png' for ServletContext resource [/img/tp_amazon_transparent.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
DispatcherServlet with name 'dispatcher' processing GET request for [/img/sprit.png]
Looking up handler method for path /img/sprit.png
Did not find handler method for [/img/sprit.png]
Matching patterns for request [/img/sprit.png] are [/img/**]
URI Template variables for request [/img/sprit.png] are {}
Mapping [/img/sprit.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@150188b] and 1 interceptor
Last-Modified value for [/img/sprit.png] is: -1
Trying relative path [sprit.png] against base location: ServletContext resource [/img/]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.woff]
Looking up handler method for path /css/fontawesome-webfont.woff
Did not find handler method for [/css/undefined]
Matching patterns for request [/css/undefined] are [/css/**]
URI Template variables for request [/css/undefined] are {}
Did not find handler method for [/css/fontawesome-webfont.woff]
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Matching patterns for request [/css/fontawesome-webfont.woff] are [/css/**]
Last-Modified value for [/css/undefined] is: -1
URI Template variables for request [/css/fontawesome-webfont.woff] are {}
Trying relative path [undefined] against base location: ServletContext resource [/css/]
Mapping [/css/fontawesome-webfont.woff] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/fontawesome-webfont.woff] is: -1
Trying relative path [fontawesome-webfont.woff] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/img/breadcrumb.png]
DispatcherServlet with name 'dispatcher' processing GET request for [/img/arrow-drop-down.png]
Looking up handler method for path /img/breadcrumb.png
Looking up handler method for path /img/arrow-drop-down.png
Did not find handler method for [/img/breadcrumb.png]
Did not find handler method for [/img/arrow-drop-down.png]
Matching patterns for request [/img/breadcrumb.png] are [/img/**]
Matching patterns for request [/img/arrow-drop-down.png] are [/img/**]
URI Template variables for request [/img/breadcrumb.png] are {}
URI Template variables for request [/img/arrow-drop-down.png] are {}
Mapping [/img/breadcrumb.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@150188b] and 1 interceptor
Mapping [/img/arrow-drop-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@150188b] and 1 interceptor
Last-Modified value for [/img/breadcrumb.png] is: -1
Last-Modified value for [/img/arrow-drop-down.png] is: -1
Trying relative path [breadcrumb.png] against base location: ServletContext resource [/img/]
Trying relative path [arrow-drop-down.png] against base location: ServletContext resource [/img/]
Found matching resource: ServletContext resource [/img/sprit.png]
Determined media type 'image/png' for ServletContext resource [/img/sprit.png]
Found matching resource: ServletContext resource [/img/arrow-drop-down.png]
Determined media type 'image/png' for ServletContext resource [/img/arrow-drop-down.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/img/breadcrumb.png]
Determined media type 'image/png' for ServletContext resource [/img/breadcrumb.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/images/icon-down.png]
Looking up handler method for path /css/images/icon-down.png
Did not find handler method for [/css/images/icon-down.png]
Matching patterns for request [/css/images/icon-down.png] are [/css/**]
URI Template variables for request [/css/images/icon-down.png] are {}
Mapping [/css/images/icon-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/images/icon-down.png] is: -1
Trying relative path [images/icon-down.png] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.ttf]
Looking up handler method for path /css/fontawesome-webfont.ttf
Did not find handler method for [/css/fontawesome-webfont.ttf]
Matching patterns for request [/css/fontawesome-webfont.ttf] are [/css/**]
URI Template variables for request [/css/fontawesome-webfont.ttf] are {}
Mapping [/css/fontawesome-webfont.ttf] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/fontawesome-webfont.ttf] is: -1
Trying relative path [fontawesome-webfont.ttf] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/favicon.ico]
Looking up handler method for path /favicon.ico
Did not find handler method for [/favicon.ico]
No mapping found for HTTP request with URI [/favicon.ico] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/product/product]
Looking up handler method for path /product/product
Returning handler method [public java.lang.String com.ebay.controller.LoginController.product(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'loginController'
Last-Modified value for [/product/product] is: -1
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Rendering view [org.thymeleaf.spring3.view.ThymeleafView@18b2165] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/product.css]
Looking up handler method for path /css/product.css
Did not find handler method for [/css/product.css]
Matching patterns for request [/css/product.css] are [/css/**]
URI Template variables for request [/css/product.css] are {}
Mapping [/css/product.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/product.css] is: -1
Trying relative path [product.css] against base location: ServletContext resource [/css/]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/demo_page.css]
Looking up handler method for path /css/demo_page.css
Did not find handler method for [/css/demo_page.css]
Matching patterns for request [/css/demo_page.css] are [/css/**]
URI Template variables for request [/css/demo_page.css] are {}
Mapping [/css/demo_page.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/demo_page.css] is: -1
Trying relative path [demo_page.css] against base location: ServletContext resource [/css/]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/demo_table_jui.css]
Looking up handler method for path /css/demo_table_jui.css
Did not find handler method for [/css/demo_table_jui.css]
Matching patterns for request [/css/demo_table_jui.css] are [/css/**]
URI Template variables for request [/css/demo_table_jui.css] are {}
Mapping [/css/demo_table_jui.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/demo_table_jui.css] is: -1
Trying relative path [demo_table_jui.css] against base location: ServletContext resource [/css/]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jquery.dataTables.js]
Looking up handler method for path /js/jquery.dataTables.js
Did not find handler method for [/js/jquery.dataTables.js]
Matching patterns for request [/js/jquery.dataTables.js] are [/js/**]
URI Template variables for request [/js/jquery.dataTables.js] are {}
Mapping [/js/jquery.dataTables.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@1134496] and 1 interceptor
Last-Modified value for [/js/jquery.dataTables.js] is: -1
Trying relative path [jquery.dataTables.js] against base location: ServletContext resource [/js/]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/demo_table.css]
Looking up handler method for path /css/demo_table.css
Did not find handler method for [/css/demo_table.css]
Matching patterns for request [/css/demo_table.css] are [/css/**]
URI Template variables for request [/css/demo_table.css] are {}
Mapping [/css/demo_table.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/demo_table.css] is: -1
Trying relative path [demo_table.css] against base location: ServletContext resource [/css/]
Found matching resource: ServletContext resource [/css/product.css]
Determined media type 'text/css' for ServletContext resource [/css/product.css]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/css/demo_table_jui.css]
Determined media type 'text/css' for ServletContext resource [/css/demo_table_jui.css]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/css/demo_table.css]
Determined media type 'text/css' for ServletContext resource [/css/demo_table.css]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/css/demo_page.css]
Determined media type 'text/css' for ServletContext resource [/css/demo_page.css]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/js/jquery.dataTables.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jquery.dataTables.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.woff]
Looking up handler method for path /css/undefined
Looking up handler method for path /css/fontawesome-webfont.woff
Did not find handler method for [/css/undefined]
Did not find handler method for [/css/fontawesome-webfont.woff]
Matching patterns for request [/css/undefined] are [/css/**]
Matching patterns for request [/css/fontawesome-webfont.woff] are [/css/**]
URI Template variables for request [/css/undefined] are {}
URI Template variables for request [/css/fontawesome-webfont.woff] are {}
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Mapping [/css/fontawesome-webfont.woff] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
Last-Modified value for [/css/fontawesome-webfont.woff] is: -1
Trying relative path [undefined] against base location: ServletContext resource [/css/]
Trying relative path [fontawesome-webfont.woff] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/ui-bg_flat_75_ffffff_40x100.png]
Looking up handler method for path /css/ui-bg_flat_75_ffffff_40x100.png
Did not find handler method for [/css/ui-bg_flat_75_ffffff_40x100.png]
Matching patterns for request [/css/ui-bg_flat_75_ffffff_40x100.png] are [/css/**]
URI Template variables for request [/css/ui-bg_flat_75_ffffff_40x100.png] are {}
Mapping [/css/ui-bg_flat_75_ffffff_40x100.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/ui-bg_flat_75_ffffff_40x100.png] is: -1
Trying relative path [ui-bg_flat_75_ffffff_40x100.png] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/images/icon-down.png]
Looking up handler method for path /css/images/icon-down.png
Did not find handler method for [/css/images/icon-down.png]
Matching patterns for request [/css/images/icon-down.png] are [/css/**]
URI Template variables for request [/css/images/icon-down.png] are {}
Mapping [/css/images/icon-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/images/icon-down.png] is: -1
Trying relative path [images/icon-down.png] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.ttf]
Looking up handler method for path /css/fontawesome-webfont.ttf
Did not find handler method for [/css/fontawesome-webfont.ttf]
Matching patterns for request [/css/fontawesome-webfont.ttf] are [/css/**]
URI Template variables for request [/css/fontawesome-webfont.ttf] are {}
Mapping [/css/fontawesome-webfont.ttf] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@4a962b] and 1 interceptor
Last-Modified value for [/css/fontawesome-webfont.ttf] is: -1
Trying relative path [fontawesome-webfont.ttf] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Root WebApplicationContext: initialization started
Refreshing Root WebApplicationContext: startup date [Mon Jun 23 23:03:19 CST 2014]; root of context hierarchy
Initializing new StandardServletEnvironment
Adding [servletConfigInitParams] PropertySource with lowest search precedence
Adding [servletContextInitParams] PropertySource with lowest search precedence
Adding [jndiProperties] PropertySource with lowest search precedence
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]
Replacing [servletContextInitParams] PropertySource with [servletContextInitParams]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from ServletContext resource [/WEB-INF/applicationContext.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Found XML schema [http://www.springframework.org/schema/context/spring-context-3.2.xsd] in classpath: org/springframework/context/config/spring-context-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tool/spring-tool-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-tool-3.2.xsd
Found XML schema [http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd] in classpath: org/springframework/web/servlet/config/spring-mvc-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tx/spring-tx-3.2.xsd] in classpath: org/springframework/transaction/config/spring-tx-3.2.xsd
Loading bean definitions
Loaded NamespaceHandler mappings: {http://www.springframework.org/schema/p=org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler, http://www.springframework.org/schema/mvc=org.springframework.web.servlet.config.MvcNamespaceHandler, http://www.springframework.org/schema/util=org.springframework.beans.factory.xml.UtilNamespaceHandler, http://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler, http://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler, http://www.springframework.org/schema/jdbc=org.springframework.jdbc.config.JdbcNamespaceHandler, http://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler, http://www.springframework.org/schema/c=org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler, http://www.springframework.org/schema/tx=org.springframework.transaction.config.TxNamespaceHandler, http://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler, http://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler, http://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler}
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\controller]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\controller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/controller/**/*.class]
Resolved location pattern [classpath*:com/ebay/controller/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\service]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/service/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerServieImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\dao]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/dao/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedbackDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/common/persistence/**/*.class]
Resolved location pattern [classpath*:com/ebay/common/persistence/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#4cdc2]
Neither XML 'id' nor 'name' specified - using generated bean name [org.thymeleaf.spring3.view.ThymeleafViewResolver#0]
Loaded 54 bean definitions from location pattern [/WEB-INF/applicationContext.xml]
Bean factory for Root WebApplicationContext: org.springframework.beans.factory.support.DefaultListableBeanFactory@11f6c01: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor]; root of factory hierarchy
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Eagerly caching bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Adding [environmentProperties] PropertySource with lowest search precedence
Loading properties file from URL [file:/E:/ebay/ebay-develop/target/classes/properties/jdbc.properties]
Adding [localProperties] PropertySource with lowest search precedence
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Eagerly caching bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Eagerly caching bean 'org.springframework.aop.config.internalAutoProxyCreator' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@19e3300]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@30b604]
Unable to locate ThemeSource with name 'themeSource': using default [org.springframework.ui.context.support.ResourceBundleThemeSource@1ce28a]
Creating shared instance of singleton bean 'entityManagerFactory'
Creating instance of bean 'entityManagerFactory'
Eagerly caching bean 'entityManagerFactory' to allow for resolving potential circular references
Creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#4cdc2'
Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Eagerly caching bean 'org.springframework.transaction.config.internalTransactionAdvisor' to allow for resolving potential circular references
Creating shared instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Eagerly caching bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Finished creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#4cdc2'
Invoking afterPropertiesSet() on bean with name 'entityManagerFactory'
Building JPA container EntityManagerFactory for persistence unit 'ePU'
Adding type registration boolean -> org.hibernate.type.BooleanType@482fc1
Adding type registration boolean -> org.hibernate.type.BooleanType@482fc1
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@482fc1
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@18d9133
Adding type registration true_false -> org.hibernate.type.TrueFalseType@1ea9ef5
Adding type registration yes_no -> org.hibernate.type.YesNoType@1c2cb54
Adding type registration byte -> org.hibernate.type.ByteType@b167ca
Adding type registration byte -> org.hibernate.type.ByteType@b167ca
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@b167ca
Adding type registration character -> org.hibernate.type.CharacterType@195dc41
Adding type registration char -> org.hibernate.type.CharacterType@195dc41
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@195dc41
Adding type registration short -> org.hibernate.type.ShortType@1bce7e2
Adding type registration short -> org.hibernate.type.ShortType@1bce7e2
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1bce7e2
Adding type registration integer -> org.hibernate.type.IntegerType@48abc
Adding type registration int -> org.hibernate.type.IntegerType@48abc
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@48abc
Adding type registration long -> org.hibernate.type.LongType@1292965
Adding type registration long -> org.hibernate.type.LongType@1292965
Adding type registration java.lang.Long -> org.hibernate.type.LongType@1292965
Adding type registration float -> org.hibernate.type.FloatType@1d7a58d
Adding type registration float -> org.hibernate.type.FloatType@1d7a58d
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1d7a58d
Adding type registration double -> org.hibernate.type.DoubleType@10dbbc9
Adding type registration double -> org.hibernate.type.DoubleType@10dbbc9
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@10dbbc9
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1d9b479
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1d9b479
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@a1eeed
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@a1eeed
Adding type registration string -> org.hibernate.type.StringType@15b74a5
Adding type registration java.lang.String -> org.hibernate.type.StringType@15b74a5
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1793e97
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@14ee262
Adding type registration url -> org.hibernate.type.UrlType@18dba4b
Adding type registration java.net.URL -> org.hibernate.type.UrlType@18dba4b
Adding type registration date -> org.hibernate.type.DateType@fb76c8
Adding type registration java.sql.Date -> org.hibernate.type.DateType@fb76c8
Adding type registration time -> org.hibernate.type.TimeType@6afa06
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@6afa06
Adding type registration timestamp -> org.hibernate.type.TimestampType@172ef50
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@172ef50
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@172ef50
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@d65731
Adding type registration calendar -> org.hibernate.type.CalendarType@b03bd5
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@b03bd5
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@b03bd5
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79d211
Adding type registration locale -> org.hibernate.type.LocaleType@15346ac
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@15346ac
Adding type registration currency -> org.hibernate.type.CurrencyType@13029db
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@13029db
Adding type registration timezone -> org.hibernate.type.TimeZoneType@16eba72
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@16eba72
Adding type registration class -> org.hibernate.type.ClassType@ad481c
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ad481c
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@14559a7
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@14559a7
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@ff95e1
Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@f103bf
Adding type registration binary -> org.hibernate.type.BinaryType@de861c
Adding type registration byte[] -> org.hibernate.type.BinaryType@de861c
Adding type registration [B -> org.hibernate.type.BinaryType@de861c
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@378bdc
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@378bdc
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@378bdc
Adding type registration image -> org.hibernate.type.ImageType@dc77c4
Adding type registration characters -> org.hibernate.type.CharArrayType@2eec5a
Adding type registration char[] -> org.hibernate.type.CharArrayType@2eec5a
Adding type registration [C -> org.hibernate.type.CharArrayType@2eec5a
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1b61143
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1b61143
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1b61143
Adding type registration text -> org.hibernate.type.TextType@583596
Adding type registration ntext -> org.hibernate.type.NTextType@fe4b97
Adding type registration blob -> org.hibernate.type.BlobType@328bc5
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@328bc5
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@1f196f2
Adding type registration clob -> org.hibernate.type.ClobType@1677282
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1677282
Adding type registration nclob -> org.hibernate.type.NClobType@15ad51a
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@15ad51a
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@1dc90ef
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@93b4f0
Adding type registration serializable -> org.hibernate.type.SerializableType@177da8a
Adding type registration object -> org.hibernate.type.ObjectType@12cae4e
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@12cae4e
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@102e20a
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@460a53
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@4fef15
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@1d98133
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@b16854
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1386741
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@2f8b9
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@11766d3
HCANN000001: Hibernate Commons Annotations {4.0.1.Final}
HHH000412: Hibernate Core {4.2.2.Final}
HHH000206: hibernate.properties not found
HHH000021: Bytecode provider name : javassist
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Adding type registration boolean -> org.hibernate.type.BooleanType@482fc1
Adding type registration boolean -> org.hibernate.type.BooleanType@482fc1
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@482fc1
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@18d9133
Adding type registration true_false -> org.hibernate.type.TrueFalseType@1ea9ef5
Adding type registration yes_no -> org.hibernate.type.YesNoType@1c2cb54
Adding type registration byte -> org.hibernate.type.ByteType@b167ca
Adding type registration byte -> org.hibernate.type.ByteType@b167ca
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@b167ca
Adding type registration character -> org.hibernate.type.CharacterType@195dc41
Adding type registration char -> org.hibernate.type.CharacterType@195dc41
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@195dc41
Adding type registration short -> org.hibernate.type.ShortType@1bce7e2
Adding type registration short -> org.hibernate.type.ShortType@1bce7e2
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1bce7e2
Adding type registration integer -> org.hibernate.type.IntegerType@48abc
Adding type registration int -> org.hibernate.type.IntegerType@48abc
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@48abc
Adding type registration long -> org.hibernate.type.LongType@1292965
Adding type registration long -> org.hibernate.type.LongType@1292965
Adding type registration java.lang.Long -> org.hibernate.type.LongType@1292965
Adding type registration float -> org.hibernate.type.FloatType@1d7a58d
Adding type registration float -> org.hibernate.type.FloatType@1d7a58d
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1d7a58d
Adding type registration double -> org.hibernate.type.DoubleType@10dbbc9
Adding type registration double -> org.hibernate.type.DoubleType@10dbbc9
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@10dbbc9
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1d9b479
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1d9b479
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@a1eeed
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@a1eeed
Adding type registration string -> org.hibernate.type.StringType@15b74a5
Adding type registration java.lang.String -> org.hibernate.type.StringType@15b74a5
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1793e97
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@14ee262
Adding type registration url -> org.hibernate.type.UrlType@18dba4b
Adding type registration java.net.URL -> org.hibernate.type.UrlType@18dba4b
Adding type registration date -> org.hibernate.type.DateType@fb76c8
Adding type registration java.sql.Date -> org.hibernate.type.DateType@fb76c8
Adding type registration time -> org.hibernate.type.TimeType@6afa06
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@6afa06
Adding type registration timestamp -> org.hibernate.type.TimestampType@172ef50
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@172ef50
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@172ef50
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@d65731
Adding type registration calendar -> org.hibernate.type.CalendarType@b03bd5
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@b03bd5
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@b03bd5
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79d211
Adding type registration locale -> org.hibernate.type.LocaleType@15346ac
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@15346ac
Adding type registration currency -> org.hibernate.type.CurrencyType@13029db
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@13029db
Adding type registration timezone -> org.hibernate.type.TimeZoneType@16eba72
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@16eba72
Adding type registration class -> org.hibernate.type.ClassType@ad481c
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ad481c
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@14559a7
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@14559a7
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@ff95e1
Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@f103bf
Adding type registration binary -> org.hibernate.type.BinaryType@de861c
Adding type registration byte[] -> org.hibernate.type.BinaryType@de861c
Adding type registration [B -> org.hibernate.type.BinaryType@de861c
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@378bdc
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@378bdc
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@378bdc
Adding type registration image -> org.hibernate.type.ImageType@dc77c4
Adding type registration characters -> org.hibernate.type.CharArrayType@2eec5a
Adding type registration char[] -> org.hibernate.type.CharArrayType@2eec5a
Adding type registration [C -> org.hibernate.type.CharArrayType@2eec5a
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1b61143
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1b61143
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1b61143
Adding type registration text -> org.hibernate.type.TextType@583596
Adding type registration ntext -> org.hibernate.type.NTextType@fe4b97
Adding type registration blob -> org.hibernate.type.BlobType@328bc5
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@328bc5
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@1f196f2
Adding type registration clob -> org.hibernate.type.ClobType@1677282
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1677282
Adding type registration nclob -> org.hibernate.type.NClobType@15ad51a
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@15ad51a
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@1dc90ef
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@93b4f0
Adding type registration serializable -> org.hibernate.type.SerializableType@177da8a
Adding type registration object -> org.hibernate.type.ObjectType@12cae4e
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@12cae4e
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@c1011b
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@12f9b2e
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@74fa07
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@1cb0093
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@92c540
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1d42055
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@196dd99
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@1ae98d6
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Processing PersistenceUnitInfo [
	name: ePU
	persistence provider classname: org.hibernate.ejb.HibernatePersistence
	classloader: WebAppClassLoader=1822525@1bcf3d
	Temporary classloader: org.springframework.instrument.classloading.SimpleThrowawayClassLoader@3d7e47
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/E:/ebay/ebay-develop/target/classes
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		com.ebay.domain.customer.CustomerImpl
		com.ebay.domain.user.User
		com.ebay.domain.seller.SellerImpl
		com.ebay.domain.seller.RecentFeedbackratings
		com.ebay.domain.feedback.FeedBack
		com.ebay.domain.item.ItemDto]
	Mapping files names [
		config/jpa/domain/customer.orm.xml
		config/jpa/domain/user.orm.xml
		config/jpa/domain/rate.orm.xml
		config/jpa/domain/seller.orm.xml
		config/jpa/domain/feedback.orm.xml
		config/jpa/domain/item.orm.xml]
	Properties [
		hibernate.connection.driver_class: com.mysql.jdbc.Driver
		hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
		hibernate.max_fetch_depth: 3
		hibernate.format_sql: true
		hibernate.connection.username: root
		hibernate.hbm2ddl.auto: update
		hibernate.connection.url: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8
		hibernate.connection.password: root
		hibernate.show_sql: true]
Detect class: true; detect hbm: true
Detect class: true; detect hbm: true
Searching mapped entities in jar/par: file:/E:/ebay/ebay-develop/target/classes
Filtering: com.ebay.common.ClientFactory
Filtering: com.ebay.common.Constants
Filtering: com.ebay.common.handler.JAXWSHandler
Filtering: com.ebay.common.handler.ServiceHandlerResolver
Java element filter matched for com.ebay.common
Filtering: com.ebay.common.persistence.EntityConfiguration
Filtering: com.ebay.controller.CompetitorController
Filtering: com.ebay.controller.ItemController
Filtering: com.ebay.controller.LoginController
Filtering: com.ebay.dao.customer.CustomerDao
Filtering: com.ebay.dao.customer.CustomerDaoImpl
Filtering: com.ebay.dao.feedback.FeedbackDao
Filtering: com.ebay.dao.feedback.FeedBackDaoImpl
Filtering: com.ebay.dao.item.ItemDao
Filtering: com.ebay.dao.item.ItemDaoImpl
Filtering: com.ebay.dao.seller.RatesDao
Filtering: com.ebay.dao.seller.RatesDaoImpl
Filtering: com.ebay.dao.seller.SellerDao
Filtering: com.ebay.dao.seller.SellerDaoImpl
Java element filter matched for com.ebay.dao.user
Filtering: com.ebay.dao.user.UserDao
Filtering: com.ebay.dao.user.UserDaoImpl
Filtering: com.ebay.domain.customer.Customer
Filtering: com.ebay.domain.customer.CustomerImpl
Java element filter matched for com.ebay.domain.customer.CustomerImpl
Filtering: com.ebay.domain.feedback.FeedBack
Java element filter matched for com.ebay.domain.feedback.FeedBack
Filtering: com.ebay.domain.item.Item
Filtering: com.ebay.domain.item.ItemDto
Java element filter matched for com.ebay.domain.item.ItemDto
Filtering: com.ebay.domain.item.RecomendPrice
Filtering: com.ebay.domain.price.PriceDot
Filtering: com.ebay.domain.price.Pring
Filtering: com.ebay.domain.seller.DaySellDto
Filtering: com.ebay.domain.seller.RecentFeedbackratings
Java element filter matched for com.ebay.domain.seller.RecentFeedbackratings
Filtering: com.ebay.domain.seller.Seller
Filtering: com.ebay.domain.seller.SellerDto
Filtering: com.ebay.domain.seller.SellerImpl
Java element filter matched for com.ebay.domain.seller.SellerImpl
Filtering: com.ebay.domain.seller.SellerInfoDto
Filtering: com.ebay.domain.seller.WeekSellInfo
Filtering: com.ebay.domain.user.User
Java element filter matched for com.ebay.domain.user.User
Filtering: com.ebay.ebay_develop.App
Filtering: com.ebay.ebay_develop.Img
Filtering: com.ebay.find.FindItemsByCategory
Filtering: com.ebay.find.FindItemsByKeyWords
Filtering: com.ebay.find.FindItemsByProduct
Filtering: com.ebay.find.FindItemsInStore
Filtering: com.ebay.find.TestFind
Filtering: com.ebay.form.UserForm
Filtering: com.ebay.get.GetRecommendedKeyWords
Java element filter matched for com.ebay.get
Filtering: com.ebay.init.ClientConfigInit
Java element filter matched for com.ebay.init
Filtering: com.ebay.service.customer.CustomerService
Filtering: com.ebay.service.customer.CustomerServieImpl
Filtering: com.ebay.service.feedback.FeedbackService
Filtering: com.ebay.service.feedback.FeedbackServiceImpl
Filtering: com.ebay.service.item.ItemService
Filtering: com.ebay.service.item.ItemServiceImpl
Filtering: com.ebay.service.seller.SellerService
Filtering: com.ebay.service.seller.SellerServiceImpl
Java element filter matched for com.ebay.service.user
Filtering: com.ebay.service.user.UserService
Filtering: com.ebay.service.user.UserServiceImpl
Filtering: com.ebay.services.client.ClientConfig
Filtering: com.ebay.services.client.FindingServiceClientFactory
Java element filter matched for com.ebay.services.client
Filtering: com.ebay.services.finding.AckValue
Filtering: com.ebay.services.finding.Adapter1
Filtering: com.ebay.services.finding.Affiliate
Filtering: com.ebay.services.finding.Amount
Filtering: com.ebay.services.finding.Aspect
Filtering: com.ebay.services.finding.AspectFilter
Filtering: com.ebay.services.finding.AspectHistogramContainer
Filtering: com.ebay.services.finding.AspectValueHistogram
Filtering: com.ebay.services.finding.BaseFindingServiceRequest
Filtering: com.ebay.services.finding.BaseFindingServiceResponse
Filtering: com.ebay.services.finding.BaseServiceRequest
Filtering: com.ebay.services.finding.BaseServiceResponse
Filtering: com.ebay.services.finding.Category
Filtering: com.ebay.services.finding.CategoryHistogram
Filtering: com.ebay.services.finding.CategoryHistogramContainer
Filtering: com.ebay.services.finding.Condition
Filtering: com.ebay.services.finding.ConditionHistogram
Filtering: com.ebay.services.finding.ConditionHistogramContainer
Filtering: com.ebay.services.finding.Distance
Filtering: com.ebay.services.finding.DomainFilter
Filtering: com.ebay.services.finding.ErrorCategory
Filtering: com.ebay.services.finding.ErrorData
Filtering: com.ebay.services.finding.ErrorMessage
Filtering: com.ebay.services.finding.ErrorParameter
Filtering: com.ebay.services.finding.ErrorSeverity
Filtering: com.ebay.services.finding.ExtensionType
Filtering: com.ebay.services.finding.FindCompletedItemsRequest
Filtering: com.ebay.services.finding.FindCompletedItemsResponse
Filtering: com.ebay.services.finding.FindingService
Filtering: com.ebay.services.finding.FindingServicePortType
Filtering: com.ebay.services.finding.FindItemsAdvancedRequest
Filtering: com.ebay.services.finding.FindItemsAdvancedResponse
Filtering: com.ebay.services.finding.FindItemsByCategoryRequest
Filtering: com.ebay.services.finding.FindItemsByCategoryResponse
Filtering: com.ebay.services.finding.FindItemsByKeywordsRequest
Filtering: com.ebay.services.finding.FindItemsByKeywordsResponse
Filtering: com.ebay.services.finding.FindItemsByProductRequest
Filtering: com.ebay.services.finding.FindItemsByProductResponse
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchRequest
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchResponse
Filtering: com.ebay.services.finding.FindItemsIneBayStoresRequest
Filtering: com.ebay.services.finding.FindItemsIneBayStoresResponse
Filtering: com.ebay.services.finding.GetHistogramsRequest
Filtering: com.ebay.services.finding.GetHistogramsResponse
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationRequest
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationResponse
Filtering: com.ebay.services.finding.GetVersionRequest
Filtering: com.ebay.services.finding.GetVersionResponse
Filtering: com.ebay.services.finding.ItemFilter
Filtering: com.ebay.services.finding.ItemFilterType
Filtering: com.ebay.services.finding.ListingInfo
Filtering: com.ebay.services.finding.ObjectFactory
Filtering: com.ebay.services.finding.OutputSelectorType
Java element filter matched for com.ebay.services.finding
Filtering: com.ebay.services.finding.PaginationInput
Filtering: com.ebay.services.finding.PaginationOutput
Filtering: com.ebay.services.finding.ProductId
Filtering: com.ebay.services.finding.SearchItem
Filtering: com.ebay.services.finding.SearchResult
Filtering: com.ebay.services.finding.SellerInfo
Filtering: com.ebay.services.finding.SellingStatus
Filtering: com.ebay.services.finding.ShippingInfo
Filtering: com.ebay.services.finding.SortOrderType
Filtering: com.ebay.services.finding.Storefront
Filtering: com.ebay.util.feedback.CatchFeedback
Filtering: com.ebay.util.feedback.CatchFeedbackPlus
Filtering: com.ebay.util.feedback.Date1
Filtering: com.ebay.util.feedback.DealFeedback
Filtering: com.ebay.util.feedback.Feedback
Filtering: com.ebay.util.feedback.GetFeedback
Java element filter matched for com.ebay.util.feedback
Filtering: com.ebay.util.feedback.testsplit
Filtering: com.ebay.util.feedback.Util
Filtering: com.ebay.util.kmeans.Kmeans
Filtering: com.ebay.util.mail.MailSenderInfo
Filtering: com.ebay.util.mail.MyAuthenticator
Java element filter matched for com.ebay.util.mail
Filtering: com.ebay.util.mail.SendEmail
Filtering: com.ebay.util.mail.SimpleMailSender
Filtering: com.ebay.util.seller.CatchSellerInfo
Filtering: com.ebay.util.seller.ConvertStruct
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Mapping Package com.ebay.util.feedback
Mapping Package com.ebay.util.mail
Mapping Package com.ebay.get
Mapping Package com.ebay.init
Mapping Package com.ebay.common
Mapping Package com.ebay.service.user
Mapping Package com.ebay.services.finding
Mapping Package com.ebay.dao.user
Mapping Package com.ebay.services.client
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.ejb.event.JpaIntegrator].
No JNDI name configured for binding Ejb3Configuration
Preparing to build session factory with filters : {}
HHH000402: Using Hibernate built-in connection pool (not for production use!)
HHH000115: Hibernate connection pool size: 20
HHH000006: Autocommit mode: true
HHH000401: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8]
HHH000046: Connection properties: {user=root, password=root, autocommit=true, release_mode=auto}
Opening new JDBC connection
Created connection to: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, Isolation Level: 4
Database ->
       name : MySQL
    version : 5.0.22-community-nt
      major : 5
      minor : 0
Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.24 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
Binding named query: SELECT_CUSTOMERS => select customer from com.ebay.domain.customer.CustomerImpl customer
Binding named query: SELECT_BY_NAME => select count(*) from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_BY_NAME_PASSWORD => select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
Binding named query: GET_PASSWORD_BY_NAME => select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_RATES => select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_RATES_EXITS => select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_BY_SELLERNAME => select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_SELLERNAME => select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_AllDays => select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_BY_TOTALSELL => select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
Binding named query: SELECT_BY_SUCCESSSELL => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
Binding named query: List_FeedBack => from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
Binding named query: SPECIAL_MAX_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: SPECIAL_MIN_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: K_MEANS_PRICE => select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
Binding named query: MONTH_SELLINFO => select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
Binding named query: DAY_SELLINFO => select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
Binding named query: WEEK_SELLINFO => select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
Binding named query: KMEANS_MIN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Binding named query: KMEANS_BETWEEN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Binding named query: KMEANS_MAX => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Binding named query: MAX_PRICE => select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_ITEMS => select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_ALLITEMS => select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_AvgPrice => select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MAXPRICEDTO => select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MINPRICEDTO => select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_RECOMENDPRICE => select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Processing hbm.xml files
Process annotated classes
Binding entity from annotated class: com.ebay.domain.customer.CustomerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name CustomerImpl
Bind entity com.ebay.domain.customer.CustomerImpl on table customer
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_NAME, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property customername with lazy=false
building SimpleValue for customername
Building property customername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=STAR, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.user.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.ebay.domain.user.User on table User
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=USER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=PassWord, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property passWord with lazy=false
building SimpleValue for passWord
Building property passWord
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=UserName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property userName with lazy=false
building SimpleValue for userName
Building property userName
Binding entity from annotated class: com.ebay.domain.seller.SellerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name SellerImpl
Bind entity com.ebay.domain.seller.SellerImpl on table SELLER
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Seller_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property SellerName with lazy=false
building SimpleValue for SellerName
Building property SellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=CreateDate, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sinceDate with lazy=false
building SimpleValue for sinceDate
Building property sinceDate
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Star, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.seller.RecentFeedbackratings
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name RecentFeedbackratings
Bind entity com.ebay.domain.seller.RecentFeedbackratings on table RecentFeedbackratings
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=RecentFeedRate_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Negative with lazy=false
building SimpleValue for one_Negative
Building property one_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Neutral with lazy=false
building SimpleValue for one_Neutral
Building property one_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Positive with lazy=false
building SimpleValue for one_Positive
Building property one_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellerName with lazy=false
building SimpleValue for sellerName
Building property sellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Negative with lazy=false
building SimpleValue for six_Negative
Building property six_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Neutral with lazy=false
building SimpleValue for six_Neutral
Building property six_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Positive with lazy=false
building SimpleValue for six_Positive
Building property six_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Negative with lazy=false
building SimpleValue for twe_Negative
Building property twe_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Neutral with lazy=false
building SimpleValue for twe_Neutral
Building property twe_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Positive with lazy=false
building SimpleValue for twe_Positive
Building property twe_Positive
Binding entity from annotated class: com.ebay.domain.feedback.FeedBack
Import with entity name FeedBack
Bind entity com.ebay.domain.feedback.FeedBack on table FEEDBACK
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=FEEDBACK_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property feedbackId with lazy=false
building SimpleValue for feedbackId
Building property feedbackId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ATTITUDE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property attitude with lazy=false
building SimpleValue for attitude
Building property attitude
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=COMMENT, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property comment with lazy=false
building SimpleValue for comment
Building property comment
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Feed_Date, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property date with lazy=false
building SimpleValue for date
Building property date
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_Name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemName with lazy=false
building SimpleValue for itemName
Building property itemName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=PRICE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Seller, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellername with lazy=false
building SimpleValue for sellername
Building property sellername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=STAR_LEVEL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.item.ItemDto
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name ItemDto
Bind entity com.ebay.domain.item.ItemDto on table ItemDto
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=Id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=galleryURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property galleryURL with lazy=false
building SimpleValue for galleryURL
Building property galleryURL
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=ItemId, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=keyWords, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property keyWords with lazy=false
building SimpleValue for keyWords
Building property keyWords
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=price, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=sellCount, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellCount with lazy=false
building SimpleValue for sellCount
Building property sellCount
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=title, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property title with lazy=false
building SimpleValue for title
Building property title
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=viewItemURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property viewItemURL with lazy=false
building SimpleValue for viewItemURL
Building property viewItemURL
Setting SimpleValue typeName for id
Setting SimpleValue typeName for customername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for passWord
Setting SimpleValue typeName for userName
Setting SimpleValue typeName for id
Setting SimpleValue typeName for SellerName
Setting SimpleValue typeName for country
Setting SimpleValue typeName for sinceDate
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for one_Negative
Setting SimpleValue typeName for one_Neutral
Setting SimpleValue typeName for one_Positive
Setting SimpleValue typeName for sellerName
Setting SimpleValue typeName for six_Negative
Setting SimpleValue typeName for six_Neutral
Setting SimpleValue typeName for six_Positive
Setting SimpleValue typeName for twe_Negative
Setting SimpleValue typeName for twe_Neutral
Setting SimpleValue typeName for twe_Positive
Setting SimpleValue typeName for feedbackId
Setting SimpleValue typeName for attitude
Setting SimpleValue typeName for comment
Setting SimpleValue typeName for date
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for itemName
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for country
Setting SimpleValue typeName for galleryURL
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for keyWords
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellCount
Setting SimpleValue typeName for title
Setting SimpleValue typeName for viewItemURL
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
Automatic flush during beforeCompletion(): disabled
Automatic session close at end of transaction: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: disabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
multi-tenancy strategy : NONE
Connection release mode: auto
HHH000268: Transaction strategy: org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory
Using BatchFetchStyle : LEGACY
Maximum outer join fetch depth: 3
Default batch fetch size: 1
Generate SQL with comments: disabled
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
Default null ordering: none
Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
HHH000397: Using ASTQueryTranslatorFactory
Query language substitutions: {}
JPA-QL strict compliance: enabled
Second-level cache: enabled
Query cache: disabled
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
org.hibernate.cache.internal.NoCachingRegionFactory did not provide constructor accepting java.util.Properties; attempting no-arg constructor.
Optimize cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Named query checking : enabled
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : : disabled
JTA Track by Thread: enabled
Building session factory
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, sun.management.compiler=HotSpot Client Compiler, hibernate.ejb.discard_pc_on_close=false, rjrport=8081, hibernate.transaction.flush_before_completion=false, os.name=Windows 8, sun.boot.class.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\resources.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\rt.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\sunrsasign.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jsse.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jce.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\charsets.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jfr.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\classes, rjrkeystore=C:\Users\林林\.keystore, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, rjrkeypassword=changeit, java.runtime.version=1.7.0_45-b18, hibernate.connection.autocommit=true, rjrscanlist=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.scanlist, user.name=林林, javax.persistence.validation.mode=AUTO, hibernate.connection.release_mode=auto, rjrscanintervalseconds=5, user.language=zh, sun.boot.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin, rjrparentloaderpriority=true, java.version=1.7.0_45, user.timezone=Asia/Shanghai, sun.arch.data.model=32, rjrpassword=changeit, java.endorsed.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, hibernate.format_sql=true, java.class.version=51.0, user.country=CN, java.home=D:\Program Files (x86)\Java\jdk1.7.0_45\jre, java.vm.info=mixed mode, os.version=6.2, hibernate.transaction.factory_class=org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=24.45-b08, hibernate.max_fetch_depth=3, hibernate.connection.password=root, user.variant=, rjrneedclientauth=false, rjrenablessl=false, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, user.script=, user.home=C:\Users\林林, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=update, rjrignoreScanClassFile=true, java.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin;C:\Program Files (x86)\Common Files\NetSarang;C:\Program Files (x86)\AMD APP\bin\x86_64;C:\Program Files (x86)\AMD APP\bin\x86;D:\ActivePython27\;D:\ActivePython27\Scripts;F:\app\lin\product\11.2.0\dbhome_1\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;D:\SVN\bin;D:\MySQL Server 5.0\bin;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin;C:\Users\林林\AppData\Roaming\Python\Scripts;D:\Program Files (x86)\Java\jdk1.7.0_45/bin;D:\Program Files (x86)\Java\jdk1.7.0_45/jre/bin;D:\apache-maven-3.0.5/bin;D:\Google\google_appengine\;., java.vendor.url=http://java.oracle.com/, rjrResourceMapping=, rjrsslport=8443, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=runjettyrun.Bootstrap, java.class.path=D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlets-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-server-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-deploy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-policy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-util-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-rewrite-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-overlay-deployer-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jmx-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.jasper.glassfish-2.2.2.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.annotation_1.1.0.v201105051105.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\servlet-api-3.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-client-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.taglibs.standard.glassfish-1.2.0.v201112081803.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\com.sun.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jndi-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-core-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-webapp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp-2.2.0.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlet-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-continuation-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jsp-impl-2.2.2.b05.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-xml-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.objectweb.asm_3.3.1.v201101071600.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-io-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-security-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp.jstl-1.2.0.v201105211821.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\run-jetty-run-bootstrap-jetty8.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-plus-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-annotations-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-ajp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-websocket-8.1.8.v20121106.jar, hibernate.bytecode.use_reflection_optimizer=false, rjrclasspath=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.classpath, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.7, sun.os.patch.level=, sun.cpu.endian=little, java.io.tmpdir=C:\Users\林林\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, javax.persistence.sharedCache.mode=UNSPECIFIED, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, os.arch=x86, rjrenbaleJNDI=false, java.ext.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, rjrEclipseListener=52471, user.dir=E:\ebay\ebay-develop, line.separator=
, rjrcontext=/ebay-develop, java.vm.name=Java HotSpot(TM) Client VM, rjrwebapp=E:\ebay\ebay-develop\src\main\webapp, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.7, rjrenablescanner=false, hibernate.show_sql=true}
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Static SQL for entity: com.ebay.domain.user.User
 Version select: select USER_ID from User where USER_ID =?
 Snapshot select: select user_.USER_ID, user_.PassWord as PassWord2_4_, user_.UserName as UserName3_4_ from User user_ where user_.USER_ID=?
 Insert 0: insert into User (PassWord, UserName, USER_ID) values (?, ?, ?)
 Update 0: update User set PassWord=?, UserName=? where USER_ID=?
 Delete 0: delete from User where USER_ID=?
 Identity insert: insert into User (PassWord, UserName) values (?, ?)
Static SQL for entity: com.ebay.domain.item.ItemDto
 Version select: select Id from ItemDto where Id =?
 Snapshot select: select itemdto_.Id, itemdto_.country as country2_1_, itemdto_.galleryURL as galleryU3_1_, itemdto_.ItemId as ItemId4_1_, itemdto_.keyWords as keyWords5_1_, itemdto_.price as price6_1_, itemdto_.sellCount as sellCoun7_1_, itemdto_.title as title8_1_, itemdto_.viewItemURL as viewItem9_1_ from ItemDto itemdto_ where itemdto_.Id=?
 Insert 0: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL, Id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update ItemDto set country=?, galleryURL=?, ItemId=?, keyWords=?, price=?, sellCount=?, title=?, viewItemURL=? where Id=?
 Delete 0: delete from ItemDto where Id=?
 Identity insert: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.feedback.FeedBack
 Version select: select FEEDBACK_ID from FEEDBACK where FEEDBACK_ID =?
 Snapshot select: select feedback_.FEEDBACK_ID, feedback_.ATTITUDE as ATTITUDE2_0_, feedback_.COMMENT as COMMENT3_0_, feedback_.Feed_Date as Feed4_0_, feedback_.ITEM_ID as ITEM5_0_, feedback_.ITEM_Name as ITEM6_0_, feedback_.PRICE as PRICE7_0_, feedback_.Seller as Seller8_0_, feedback_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback_ where feedback_.FEEDBACK_ID=?
 Insert 0: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL, FEEDBACK_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update FEEDBACK set ATTITUDE=?, COMMENT=?, Feed_Date=?, ITEM_ID=?, ITEM_Name=?, PRICE=?, Seller=?, STAR_LEVEL=? where FEEDBACK_ID=?
 Delete 0: delete from FEEDBACK where FEEDBACK_ID=?
 Identity insert: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.customer.CustomerImpl
 Version select: select CUSTOMER_ID from customer where CUSTOMER_ID =?
 Snapshot select: select customerim_.CUSTOMER_ID, customerim_.CUSTOMER_NAME as CUSTOMER2_5_, customerim_.STAR as STAR3_5_ from customer customerim_ where customerim_.CUSTOMER_ID=?
 Insert 0: insert into customer (CUSTOMER_NAME, STAR, CUSTOMER_ID) values (?, ?, ?)
 Update 0: update customer set CUSTOMER_NAME=?, STAR=? where CUSTOMER_ID=?
 Delete 0: delete from customer where CUSTOMER_ID=?
 Identity insert: insert into customer (CUSTOMER_NAME, STAR) values (?, ?)
Static SQL for entity: com.ebay.domain.seller.RecentFeedbackratings
 Version select: select RecentFeedRate_ID from RecentFeedbackratings where RecentFeedRate_ID =?
 Snapshot select: select recentfeed_.RecentFeedRate_ID, recentfeed_.one_Negative as one2_2_, recentfeed_.one_Neutral as one3_2_, recentfeed_.one_Positive as one4_2_, recentfeed_.SellerName as SellerNa5_2_, recentfeed_.six_Negative as six6_2_, recentfeed_.six_Neutral as six7_2_, recentfeed_.six_Positive as six8_2_, recentfeed_.twe_Negative as twe9_2_, recentfeed_.twe_Neutral as twe10_2_, recentfeed_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed_ where recentfeed_.RecentFeedRate_ID=?
 Insert 0: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive, RecentFeedRate_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update RecentFeedbackratings set one_Negative=?, one_Neutral=?, one_Positive=?, SellerName=?, six_Negative=?, six_Neutral=?, six_Positive=?, twe_Negative=?, twe_Neutral=?, twe_Positive=? where RecentFeedRate_ID=?
 Delete 0: delete from RecentFeedbackratings where RecentFeedRate_ID=?
 Identity insert: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.seller.SellerImpl
 Version select: select Seller_ID from SELLER where Seller_ID =?
 Snapshot select: select sellerimpl_.Seller_ID, sellerimpl_.SellerName as SellerNa2_3_, sellerimpl_.Country as Country3_3_, sellerimpl_.CreateDate as CreateDa4_3_, sellerimpl_.Star as Star5_3_ from SELLER sellerimpl_ where sellerimpl_.Seller_ID=?
 Insert 0: insert into SELLER (SellerName, Country, CreateDate, Star, Seller_ID) values (?, ?, ?, ?, ?)
 Update 0: update SELLER set SellerName=?, Country=?, CreateDate=?, Star=? where Seller_ID=?
 Delete 0: delete from SELLER where Seller_ID=?
 Identity insert: insert into SELLER (SellerName, Country, CreateDate, Star) values (?, ?, ?, ?)
Static select for entity com.ebay.domain.user.User [NONE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [UPGRADE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [UPGRADE_NOWAIT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [FORCE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? lock in share mode
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_WRITE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [OPTIMISTIC]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.item.ItemDto [NONE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE_NOWAIT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [FORCE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? lock in share mode
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_WRITE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_MERGE on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.customer.CustomerImpl [NONE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE_NOWAIT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [FORCE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? lock in share mode
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_WRITE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [NONE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE_NOWAIT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [FORCE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? lock in share mode
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_WRITE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [NONE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE_NOWAIT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [FORCE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_WRITE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [NONE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE_NOWAIT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [FORCE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_WRITE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Initializing SessionFactoryRegistry : org.hibernate.internal.SessionFactoryRegistry@17e70e8
Registering SessionFactory: a3804ae1-c8e2-49bc-9488-07d3912c0492 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Instantiated session factory
HHH000228: Running hbm2ddl schema update
HHH000102: Fetching database metadata
HHH000396: Updating schema
Processing hbm.xml files
Process annotated classes
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
HHH000261: Table found: ebay.feedback
HHH000037: Columns: [attitude, price, item_name, item_id, feed_date, feedback_id, comment, seller, star_level]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.itemdto
HHH000037: Columns: [id, viewitemurl, title, price, keywords, galleryurl, sellcount, itemid, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.recentfeedbackratings
HHH000037: Columns: [six_positive, twe_neutral, one_neutral, twe_negative, sellername, twe_positive, six_negative, six_neutral, recentfeedrate_id, one_positive, one_negative]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.seller
HHH000037: Columns: [star, createdate, sellername, seller_id, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.user
HHH000037: Columns: [username, user_id, password]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.customer
HHH000037: Columns: [star, customer_name, customer_id]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
HHH000232: Schema update complete
Checking 28 named HQL queries
Checking named query: WEEK_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'WeekSellInfo'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'WEEKDAY'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'WEEKDAY'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) WeekSellInfo ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.WeekSellInfo,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'WeekSellInfo' {originalText=WeekSellInfo}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@48abc}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, weekday(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by weekday(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECT_MAXPRICEDTO
parse() - HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select max(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: DAY_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'DaySellDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'DAYOFMONTH'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'DAYOFMONTH'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) DaySellDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.DaySellDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'DaySellDto' {originalText=DaySellDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@48abc}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, dayofmonth(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by dayofmonth(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_AllDays
parse() - HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[MINUS] Node: '-'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'TO_DAYS'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[AGGREGATE] Node: 'max'
    |        |        \-[IDENT] Node: 'Feed_Date'
    |        \-[METHOD_CALL] Node: '('
    |           +-[IDENT] Node: 'TO_DAYS'
    |           \-[EXPR_LIST] Node: 'exprList'
    |              \-[AGGREGATE] Node: 'min'
    |                 \-[IDENT] Node: 'Feed_Date'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( - ( ( TO_DAYS ( exprList ( max Feed_Date ) ) ) ( ( TO_DAYS ( exprList ( min Feed_Date ) ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[MINUS] BinaryArithmeticOperatorNode: '-' {dataType=org.hibernate.type.LongType@1292965}
    |  |  +-[METHOD_CALL] MethodNode: '('
    |  |  |  +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |  |  \-[EXPR_LIST] SqlNode: 'exprList'
    |  |  |     \-[AGGREGATE] AggregateNode: 'max'
    |  |  |        \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  |  \-[METHOD_CALL] MethodNode: '('
    |  |     +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |     \-[EXPR_LIST] SqlNode: 'exprList'
    |  |        \-[AGGREGATE] AggregateNode: 'min'
    |  |           \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select to_days(max(Feed_Date))-to_days(min(Feed_Date)) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SPECIAL_MIN_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'min'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'min'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select min(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: KMEANS_MAX
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'max'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@10dbbc9}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: KMEANS_BETWEEN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'feedback'
          |  |  |  \-[IDENT] Node: 'sellername'
          |  |  \-[COLON] Node: ':'
          |  |     \-[IDENT] Node: 'sellername'
          |  \-[LT] Node: '<'
          |     +-[IDENT] Node: 'price'
          |     \-[COLON] Node: ':'
          |        \-[WEIRD_IDENT] Node: 'max'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[AND] SqlNode: 'and'
          |  +-[EQ] BinaryLogicOperatorNode: '='
          |  |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
          |  \-[LT] BinaryLogicOperatorNode: '<'
          |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
          |     \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@10dbbc9}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@10dbbc9}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: SELECT_AvgPrice
parse() - HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'avg'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( avg ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'avg'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select avg(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: List_FeedBack
parse() - HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'FeedBack'
    |        \-[ALIAS] Node: 'feedback'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Derived SELECT clause created.
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'feedback0_.FEEDBACK_ID as FEEDBACK1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}}
    |  \-[SQL_TOKEN] SqlFragment: 'feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
SQL: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_, feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_SELLERNAME
parse() - HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'seller'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@15b74a5
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} sellerimpl0_.Seller_ID ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID as Seller1_3_' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
    |  \-[SQL_TOKEN] SqlFragment: 'sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select sellerimpl0_.Seller_ID as Seller1_3_, sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@15b74a5
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: SELECT_RECOMENDPRICE
parse() - HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'RecomendPrice'
    |        +-[AGGREGATE] Node: 'min'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        +-[AGGREGATE] Node: 'avg'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        \-[AGGREGATE] Node: 'max'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'dto'
    |              \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) RecomendPrice ) ( min ( itemdto0_.price itemdto0_.Id price ) ) ( avg ( itemdto0_.price itemdto0_.Id price ) ) ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.RecomendPrice,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'RecomendPrice' {originalText=RecomendPrice}
    |     +-[AGGREGATE] AggregateNode: 'min'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[AGGREGATE] AggregateNode: 'avg'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'max'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_, avg(itemdto0_.price) as col_1_0_, max(itemdto0_.price) as col_2_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_ITEMS
parse() - HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select count(*) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: K_MEANS_PRICE
parse() - HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'price'
    |        |  \-[IDENT] Node: 'PriceDot'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'price'
    |        \-[COUNT] Node: 'count'
    |           \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[IDENT] Node: 'price'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : feedback.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) price ) PriceDot ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ( count * ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( feedback0_.PRICE {synthetic-alias} price ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price.PriceDot,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     |  \-[IDENT] IdentNode: 'PriceDot' {originalText=PriceDot}
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[COUNT] CountNode: 'count'
    |     |  \-[ROW_STAR] SqlNode: '*'
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
    \-[GROUP] SqlNode: 'group'
       \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          \-[IDENT] IdentNode: 'price' {originalText=price}

throwQueryException() : no errors
HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
SQL: select feedback0_.PRICE as col_0_0_, count(*) as col_1_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.PRICE
throwQueryException() : no errors
Checking named query: SELECT_MINPRICEDTO
parse() - HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'min'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'min'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_CUSTOMERS
parse() - HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  |  \-[IDENT] Node: 'ebay'
       |     |  |  |  \-[IDENT] Node: 'domain'
       |     |  |  \-[IDENT] Node: 'customer'
       |     |  \-[IDENT] Node: 'CustomerImpl'
       |     \-[ALIAS] Node: 'customer'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'customer'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.customer.CustomerImpl (customer) -> customerim0_
Resolved : customer -> customerim0_.CUSTOMER_ID
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} customerim0_.CUSTOMER_ID ) ( FromClause{level=1} customer customerim0_ ) )
Using FROM fragment [customer customerim0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (customer)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'customerim0_.CUSTOMER_ID as CUSTOMER1_5_' {alias=customer, className=com.ebay.domain.customer.CustomerImpl, tableAlias=customerim0_}
    |  \-[SQL_TOKEN] SqlFragment: 'customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[customer], fromElementByTableAlias=[customerim0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'customer customerim0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=customer,role=null,tableName=customer,tableAlias=customerim0_,origin=null,columns={,className=com.ebay.domain.customer.CustomerImpl}}

throwQueryException() : no errors
HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
SQL: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_ from customer customerim0_
throwQueryException() : no errors
Checking named query: MONTH_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'SellerInfoDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'Month'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) SellerInfoDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.SellerInfoDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'SellerInfoDto' {originalText=SellerInfoDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, month(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by month(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: KMEANS_MIN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[LT] Node: '<'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
          \-[LT] BinaryLogicOperatorNode: '<'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@10dbbc9}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<?
throwQueryException() : no errors
Checking named query: SELECT_RATES
parse() - HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'rate'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@15b74a5
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} recentfeed0_.RecentFeedRate_ID ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID as RecentFe1_2_' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
    |  \-[SQL_TOKEN] SqlFragment: 'recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_, recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SELLERNAME
parse() - HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@15b74a5
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select count(*) as col_0_0_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SUCCESSSELL
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellerName'
    |     \-[EQ] Node: '='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'attitude'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'attitude'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : attitude -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.attitude -> feedback0_.ATTITUDE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( feedback0_.ATTITUDE feedback0_.FEEDBACK_ID attitude ) ? ) ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[DOT] DotNode: 'feedback0_.ATTITUDE' {propertyName=attitude,dereferenceType=ALL,propertyPath=attitude,path=feedback.attitude,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |  \-[IDENT] IdentNode: 'attitude' {originalText=attitude}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=attitude, expectedType=org.hibernate.type.StringType@15b74a5}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.ATTITUDE=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: GET_PASSWORD_BY_NAME
parse() - HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'user'
    |        \-[IDENT] Node: 'passWord'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@15b74a5
Resolved : user.passWord -> user0_.PassWord
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@15b74a5
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( user0_.PassWord user0_.USER_ID passWord ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
    |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
    |  |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
SQL: select user0_.PassWord as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: MAX_PRICE
parse() - HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select max(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECT_RATES_EXITS
parse() - HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@15b74a5
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select count(*) as col_0_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_TOTALSELL
parse() - HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'sum'
    |        \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellerName'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'sum'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
SQL: select sum(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: SELECT_ALLITEMS
parse() - HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'dto'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} itemdto0_.Id ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id as Id1_1_' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  \-[SQL_TOKEN] SqlFragment: 'itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select itemdto0_.Id as Id1_1_, itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SPECIAL_MAX_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'max'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'max'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select max(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME_PASSWORD
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'user'
          |  |  \-[IDENT] Node: 'userName'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'userName'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'user'
             |  \-[IDENT] Node: 'passWord'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'passWord'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@15b74a5
Resolved : user.userName -> user0_.UserName
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@15b74a5
Resolved : user.passWord -> user0_.PassWord
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( and ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ( = ( user0_.PassWord user0_.USER_ID passWord ) ? ) ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@15b74a5}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
             |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
             |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
             \-[NAMED_PARAM] ParameterNode: '?' {name=passWord, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=? and user0_.PassWord=?
throwQueryException() : no errors
Checking 0 named SQL queries
Statistics initialized [enabled=false]
Initializing EntityManagerFactoryRegistry : org.hibernate.ejb.internal.EntityManagerFactoryRegistry@19c3dee
Registering EntityManagerFactory: ePU 
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'entityManagerFactory'
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@11f6c01: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; root of factory hierarchy
Returning cached instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating shared instance of singleton bean 'competitorcontroller'
Creating instance of bean 'competitorcontroller'
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Eagerly caching bean 'competitorcontroller' to allow for resolving potential circular references
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Creating shared instance of singleton bean 'sellerService'
Creating instance of bean 'sellerService'
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Eagerly caching bean 'sellerService' to allow for resolving potential circular references
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Creating shared instance of singleton bean 'ebayRatesDao'
Creating instance of bean 'ebayRatesDao'
Registered injected element on class [com.ebay.dao.seller.RatesDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Eagerly caching bean 'ebayRatesDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayRatesDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayRatesDao'
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Creating shared instance of singleton bean 'ebaySellerDao'
Creating instance of bean 'ebaySellerDao'
Registered injected element on class [com.ebay.dao.seller.SellerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Eagerly caching bean 'ebaySellerDao' to allow for resolving potential circular references
Processing injected method of bean 'ebaySellerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebaySellerDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddSeller' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'sellerService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.seller.SellerServiceImpl@1786c8a]
Finished creating instance of bean 'sellerService'
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Creating shared instance of singleton bean 'feedbackService'
Creating instance of bean 'feedbackService'
Registered injected element on class [com.ebay.service.feedback.FeedbackServiceImpl]: ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Eagerly caching bean 'feedbackService' to allow for resolving potential circular references
Processing injected method of bean 'feedbackService': ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Creating shared instance of singleton bean 'ebayfeedbackdao'
Creating instance of bean 'ebayfeedbackdao'
Registered injected element on class [com.ebay.dao.feedback.FeedBackDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Eagerly caching bean 'ebayfeedbackdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayfeedbackdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddFeedbacks' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'feedbackService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.feedback.FeedbackServiceImpl@172f092]
Finished creating instance of bean 'feedbackService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'competitorcontroller'
Creating shared instance of singleton bean 'itemcontroller'
Creating instance of bean 'itemcontroller'
Registered injected element on class [com.ebay.controller.ItemController]: ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Eagerly caching bean 'itemcontroller' to allow for resolving potential circular references
Processing injected method of bean 'itemcontroller': ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Creating shared instance of singleton bean 'itemService'
Creating instance of bean 'itemService'
Registered injected element on class [com.ebay.service.item.ItemServiceImpl]: ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Eagerly caching bean 'itemService' to allow for resolving potential circular references
Processing injected method of bean 'itemService': ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Creating shared instance of singleton bean 'ebayitemdao'
Creating instance of bean 'ebayitemdao'
Registered injected element on class [com.ebay.dao.item.ItemDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Eagerly caching bean 'ebayitemdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayitemdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayitemdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'addItem' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'itemService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.item.ItemServiceImpl@eb9c5b]
Finished creating instance of bean 'itemService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'itemcontroller'
Creating shared instance of singleton bean 'loginController'
Creating instance of bean 'loginController'
Registered injected element on class [com.ebay.controller.LoginController]: ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Eagerly caching bean 'loginController' to allow for resolving potential circular references
Processing injected method of bean 'loginController': ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Creating shared instance of singleton bean 'userService'
Creating instance of bean 'userService'
Registered injected element on class [com.ebay.service.user.UserServiceImpl]: ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Eagerly caching bean 'userService' to allow for resolving potential circular references
Processing injected method of bean 'userService': ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Creating shared instance of singleton bean 'ebayUserDao'
Creating instance of bean 'ebayUserDao'
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Eagerly caching bean 'ebayUserDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayUserDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Processing injected method of bean 'ebayUserDao': ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Creating shared instance of singleton bean 'ebayEntityConfiguration'
Creating instance of bean 'ebayEntityConfiguration'
Found init method on class [com.ebay.common.persistence.EntityConfiguration]: public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Registered init method on class [com.ebay.common.persistence.EntityConfiguration]: org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement@a46c92e
Registered injected element on class [com.ebay.common.persistence.EntityConfiguration]: ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Eagerly caching bean 'ebayEntityConfiguration' to allow for resolving potential circular references
Processing injected method of bean 'ebayEntityConfiguration': ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Creating shared instance of singleton bean 'eMergedEntityContexts'
Creating instance of bean 'eMergedEntityContexts'
Eagerly caching bean 'eMergedEntityContexts' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Invoking init method on bean 'ebayEntityConfiguration': public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from class path resource [applicationContext-entity.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Loading bean definitions
Refreshing org.springframework.context.support.GenericXmlApplicationContext@1913eb5: startup date [Mon Jun 23 23:03:30 CST 2014]; root of context hierarchy
Bean factory for org.springframework.context.support.GenericXmlApplicationContext@1913eb5: org.springframework.beans.factory.support.DefaultListableBeanFactory@b57546: defining beans []; root of factory hierarchy
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@d82934]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@1792ae5]
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@b57546: defining beans []; root of factory hierarchy
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@feab22]
Returning cached instance of singleton bean 'lifecycleProcessor'
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayEntityConfiguration'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayUserDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'userService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'loginController'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Returning cached instance of singleton bean 'feedbackService'
Returning cached instance of singleton bean 'itemService'
Returning cached instance of singleton bean 'sellerService'
Returning cached instance of singleton bean 'userService'
Creating shared instance of singleton bean 'eCustomerDao'
Creating instance of bean 'eCustomerDao'
Registered injected element on class [com.ebay.dao.customer.CustomerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Eagerly caching bean 'eCustomerDao' to allow for resolving potential circular references
Processing injected method of bean 'eCustomerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eCustomerDao'
Returning cached instance of singleton bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'ebayitemdao'
Returning cached instance of singleton bean 'ebayRatesDao'
Returning cached instance of singleton bean 'ebaySellerDao'
Returning cached instance of singleton bean 'ebayUserDao'
Returning cached instance of singleton bean 'ebayEntityConfiguration'
Creating shared instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean 'mvcContentNegotiationManager'
Eagerly caching bean 'mvcContentNegotiationManager' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mvcContentNegotiationManager'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean '(inner bean)'
Creating shared instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Eagerly caching bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)'
No property editor [org.springframework.web.context.request.WebRequestInterceptorEditor] found for type org.springframework.web.context.request.WebRequestInterceptor according to 'Editor' suffix convention
Eagerly caching bean 'org.springframework.web.servlet.handler.MappedInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Looking for request mappings in application context: Root WebApplicationContext: startup date [Mon Jun 23 23:03:19 CST 2014]; root of context hierarchy
Mapped "{[/catchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.CompetitorController.CatchSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
Mapped "{[/selectRates],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.RecentFeedbackratings com.ebay.controller.CompetitorController.selectRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectDayInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.DaySellDto> com.ebay.controller.CompetitorController.selectDayInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectPring],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.price.Pring> com.ebay.controller.CompetitorController.getPricing(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectMonthInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.SellerInfoDto> com.ebay.controller.CompetitorController.selectMonthInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectWeekInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.WeekSellInfo> com.ebay.controller.CompetitorController.selectWeekInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectFeedBack],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.feedback.FeedBack> com.ebay.controller.CompetitorController.selectAllFeedBack(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectSingleSeller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.SellerDto com.ebay.controller.CompetitorController.selectDtoSingleSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.Seller com.ebay.controller.CompetitorController.selectCompetitor(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.Item> com.ebay.controller.CompetitorController.selectSpecialItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.ItemDto> com.ebay.controller.ItemController.selectItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/getRecomendPrices],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.item.RecomendPrice com.ebay.controller.ItemController.selectRprice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/ebay || /],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.Login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/login/controller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.validateLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/competitor/competitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/product/product],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.product(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/sendemail],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.getEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/forgetpassword],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.forgetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#1'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#1'
Creating instance of bean '(inner bean)#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#2'
Creating instance of bean '(inner bean)#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#3'
Creating instance of bean '(inner bean)#4'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#4'
Creating instance of bean '(inner bean)#5'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#5'
Creating instance of bean '(inner bean)#6'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#6'
Creating instance of bean '(inner bean)#7'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#7'
Creating instance of bean '(inner bean)#8'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#8'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Looking for controller advice: Root WebApplicationContext: startup date [Mon Jun 23 23:03:19 CST 2014]; root of context hierarchy
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#9'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#9'
Creating instance of bean '(inner bean)#10'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#10'
Creating instance of bean '(inner bean)#11'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#11'
Creating instance of bean '(inner bean)#12'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#12'
Creating instance of bean '(inner bean)#13'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#13'
Creating instance of bean '(inner bean)#14'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#14'
Creating instance of bean '(inner bean)#15'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#15'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Looking for exception mappings: Root WebApplicationContext: startup date [Mon Jun 23 23:03:19 CST 2014]; root of context hierarchy
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Eagerly caching bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: Root WebApplicationContext: startup date [Mon Jun 23 23:03:19 CST 2014]; root of context hierarchy
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Rejected bean name 'competitorcontroller': no URL paths identified
Rejected bean name 'itemcontroller': no URL paths identified
Rejected bean name 'loginController': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletContext': no URL paths identified
Rejected bean name 'contextParameters': no URL paths identified
Rejected bean name 'contextAttributes': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Mapped URL path [/img/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Mapped URL path [/css/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Mapped URL path [/js/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Mapped URL path [/plugins/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Returning cached instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: Root WebApplicationContext: startup date [Mon Jun 23 23:03:19 CST 2014]; root of context hierarchy
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Root mapping to handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword/] onto handler 'loginController'
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletContext': no URL paths identified
Rejected bean name 'contextParameters': no URL paths identified
Rejected bean name 'contextAttributes': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0' to allow for resolving potential circular references
Creating shared instance of singleton bean 'mappingJacksonHttpMessageConverter'
Creating instance of bean 'mappingJacksonHttpMessageConverter'
Eagerly caching bean 'mappingJacksonHttpMessageConverter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'entityManagerFactory'
Creating shared instance of singleton bean 'templateResolver'
Creating instance of bean 'templateResolver'
Eagerly caching bean 'templateResolver' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateResolver'
Creating shared instance of singleton bean 'templateEngine'
Creating instance of bean 'templateEngine'
Eagerly caching bean 'templateEngine' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateResolver'
Invoking afterPropertiesSet() on bean with name 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateEngine'
Creating shared instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Eagerly caching bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating shared instance of singleton bean 'transactionManager'
Creating instance of bean 'transactionManager'
Eagerly caching bean 'transactionManager' to allow for resolving potential circular references
Returning cached instance of singleton bean 'entityManagerFactory'
Invoking afterPropertiesSet() on bean with name 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating shared instance of singleton bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Eagerly caching bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Finished creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@1b1c1a9]
Returning cached instance of singleton bean 'lifecycleProcessor'
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletConfigInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletContextInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.liveBeansView.mbeanDomain]
Converted JNDI name [java:comp/env/spring.liveBeansView.mbeanDomain] not found - trying original name [spring.liveBeansView.mbeanDomain]. javax.naming.NameNotFoundException; remaining name 'env/spring.liveBeansView.mbeanDomain'
Looking up JNDI object with name [spring.liveBeansView.mbeanDomain]
JNDI lookup for name [spring.liveBeansView.mbeanDomain] threw NamingException with message: null. Returning null.
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Published root WebApplicationContext as ServletContext attribute with name [org.springframework.web.context.WebApplicationContext.ROOT]
Root WebApplicationContext: initialization completed in 13357 ms
Initializing new StandardServletEnvironment
Adding [servletConfigInitParams] PropertySource with lowest search precedence
Adding [servletContextInitParams] PropertySource with lowest search precedence
Adding [jndiProperties] PropertySource with lowest search precedence
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]
Initializing filter 'encodingFilter'
Filter 'encodingFilter' configured successfully
Initializing servlet 'dispatcher'
Initializing new StandardServletEnvironment
Adding [servletConfigInitParams] PropertySource with lowest search precedence
Adding [servletContextInitParams] PropertySource with lowest search precedence
Adding [jndiProperties] PropertySource with lowest search precedence
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardServletEnvironment with PropertySources [servletConfigInitParams,servletContextInitParams,jndiProperties,systemProperties,systemEnvironment]
FrameworkServlet 'dispatcher': initialization started
Servlet with name 'dispatcher' will try to create custom WebApplicationContext context of class 'org.springframework.web.context.support.XmlWebApplicationContext', using parent context [Root WebApplicationContext: startup date [Mon Jun 23 23:03:19 CST 2014]; root of context hierarchy]
Searching for key 'spring.profiles.active' in [servletConfigInitParams]
Searching for key 'spring.profiles.active' in [servletContextInitParams]
Searching for key 'spring.profiles.active' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.profiles.active]
Converted JNDI name [java:comp/env/spring.profiles.active] not found - trying original name [spring.profiles.active]. javax.naming.NameNotFoundException; remaining name 'env/spring.profiles.active'
Looking up JNDI object with name [spring.profiles.active]
JNDI lookup for name [spring.profiles.active] threw NamingException with message: null. Returning null.
Searching for key 'spring.profiles.active' in [systemProperties]
Searching for key 'spring.profiles.active' in [systemEnvironment]
Could not find key 'spring.profiles.active' in any property source. Returning [null]
Searching for key 'spring.profiles.default' in [servletConfigInitParams]
Searching for key 'spring.profiles.default' in [servletContextInitParams]
Searching for key 'spring.profiles.default' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.profiles.default]
Converted JNDI name [java:comp/env/spring.profiles.default] not found - trying original name [spring.profiles.default]. javax.naming.NameNotFoundException; remaining name 'env/spring.profiles.default'
Looking up JNDI object with name [spring.profiles.default]
JNDI lookup for name [spring.profiles.default] threw NamingException with message: null. Returning null.
Searching for key 'spring.profiles.default' in [systemProperties]
Searching for key 'spring.profiles.default' in [systemEnvironment]
Could not find key 'spring.profiles.default' in any property source. Returning [null]
Searching for key 'spring.profiles.default' in [servletConfigInitParams]
Searching for key 'spring.profiles.default' in [servletContextInitParams]
Searching for key 'spring.profiles.default' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.profiles.default]
Converted JNDI name [java:comp/env/spring.profiles.default] not found - trying original name [spring.profiles.default]. javax.naming.NameNotFoundException; remaining name 'env/spring.profiles.default'
Looking up JNDI object with name [spring.profiles.default]
JNDI lookup for name [spring.profiles.default] threw NamingException with message: null. Returning null.
Searching for key 'spring.profiles.default' in [systemProperties]
Searching for key 'spring.profiles.default' in [systemEnvironment]
Could not find key 'spring.profiles.default' in any property source. Returning [null]
Replacing [servletContextInitParams] PropertySource with [servletContextInitParams]
Replacing [servletConfigInitParams] PropertySource with [servletConfigInitParams]
Refreshing WebApplicationContext for namespace 'dispatcher-servlet': startup date [Mon Jun 23 23:03:33 CST 2014]; parent: Root WebApplicationContext
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from ServletContext resource [/WEB-INF/applicationContext.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Found XML schema [http://www.springframework.org/schema/context/spring-context-3.2.xsd] in classpath: org/springframework/context/config/spring-context-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tool/spring-tool-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-tool-3.2.xsd
Found XML schema [http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd] in classpath: org/springframework/web/servlet/config/spring-mvc-3.2.xsd
Found XML schema [http://www.springframework.org/schema/tx/spring-tx-3.2.xsd] in classpath: org/springframework/transaction/config/spring-tx-3.2.xsd
Loading bean definitions
Loaded NamespaceHandler mappings: {http://www.springframework.org/schema/p=org.springframework.beans.factory.xml.SimplePropertyNamespaceHandler, http://www.springframework.org/schema/mvc=org.springframework.web.servlet.config.MvcNamespaceHandler, http://www.springframework.org/schema/util=org.springframework.beans.factory.xml.UtilNamespaceHandler, http://www.springframework.org/schema/jee=org.springframework.ejb.config.JeeNamespaceHandler, http://www.springframework.org/schema/aop=org.springframework.aop.config.AopNamespaceHandler, http://www.springframework.org/schema/jdbc=org.springframework.jdbc.config.JdbcNamespaceHandler, http://www.springframework.org/schema/cache=org.springframework.cache.config.CacheNamespaceHandler, http://www.springframework.org/schema/c=org.springframework.beans.factory.xml.SimpleConstructorNamespaceHandler, http://www.springframework.org/schema/tx=org.springframework.transaction.config.TxNamespaceHandler, http://www.springframework.org/schema/task=org.springframework.scheduling.config.TaskNamespaceHandler, http://www.springframework.org/schema/lang=org.springframework.scripting.config.LangNamespaceHandler, http://www.springframework.org/schema/context=org.springframework.context.config.ContextNamespaceHandler}
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\controller]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\controller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/controller/**/*.class]
Resolved location pattern [classpath*:com/ebay/controller/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\CompetitorController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\ItemController.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\controller\LoginController.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\service]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\service\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/service/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/service/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\customer\CustomerServieImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserService.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\feedback\FeedbackServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\item\ItemServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\seller\SellerServiceImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\service\user\UserServiceImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\dao]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/dao/*/**/*.class]
Resolved location pattern [classpath*:com/ebay/dao/*/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedbackDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\package-info.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDao.class], file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\customer\CustomerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\feedback\FeedBackDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\item\ItemDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\RatesDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\seller\SellerDaoImpl.class]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\dao\user\UserDaoImpl.class]
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning
Looking for matching resources in directory tree [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence]
Searching directory [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence] for files matching pattern [E:/ebay/ebay-develop/target/classes/com/ebay/common/persistence/**/*.class]
Resolved location pattern [classpath*:com/ebay/common/persistence/**/*.class] to resources [file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]]
Identified candidate component class: file [E:\ebay\ebay-develop\target\classes\com\ebay\common\persistence\EntityConfiguration.class]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0]
Neither XML 'id' nor 'name' specified - using generated bean name [org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#123b565]
Neither XML 'id' nor 'name' specified - using generated bean name [org.thymeleaf.spring3.view.ThymeleafViewResolver#0]
Loaded 54 bean definitions from location pattern [/WEB-INF/applicationContext.xml]
Bean factory for WebApplicationContext for namespace 'dispatcher-servlet': org.springframework.beans.factory.support.DefaultListableBeanFactory@15a1f66: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@11f6c01
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Eagerly caching bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Adding [environmentProperties] PropertySource with lowest search precedence
Loading properties file from URL [file:/E:/ebay/ebay-develop/target/classes/properties/jdbc.properties]
Adding [localProperties] PropertySource with lowest search precedence
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Eagerly caching bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Creating shared instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Eagerly caching bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Eagerly caching bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Creating shared instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Eagerly caching bean 'org.springframework.aop.config.internalAutoProxyCreator' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.aop.config.internalAutoProxyCreator'
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@b49404]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@161a468]
Unable to locate ThemeSource with name 'themeSource': using default [org.springframework.ui.context.support.DelegatingThemeSource@170e827]
Creating shared instance of singleton bean 'entityManagerFactory'
Creating instance of bean 'entityManagerFactory'
Eagerly caching bean 'entityManagerFactory' to allow for resolving potential circular references
Creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#123b565'
Creating shared instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Eagerly caching bean 'org.springframework.transaction.config.internalTransactionAdvisor' to allow for resolving potential circular references
Creating shared instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Eagerly caching bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0' to allow for resolving potential circular references
Finished creating instance of bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Finished creating instance of bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter#123b565'
Invoking afterPropertiesSet() on bean with name 'entityManagerFactory'
Building JPA container EntityManagerFactory for persistence unit 'ePU'
Adding type registration boolean -> org.hibernate.type.BooleanType@482fc1
Adding type registration boolean -> org.hibernate.type.BooleanType@482fc1
Adding type registration java.lang.Boolean -> org.hibernate.type.BooleanType@482fc1
Adding type registration numeric_boolean -> org.hibernate.type.NumericBooleanType@18d9133
Adding type registration true_false -> org.hibernate.type.TrueFalseType@1ea9ef5
Adding type registration yes_no -> org.hibernate.type.YesNoType@1c2cb54
Adding type registration byte -> org.hibernate.type.ByteType@b167ca
Adding type registration byte -> org.hibernate.type.ByteType@b167ca
Adding type registration java.lang.Byte -> org.hibernate.type.ByteType@b167ca
Adding type registration character -> org.hibernate.type.CharacterType@195dc41
Adding type registration char -> org.hibernate.type.CharacterType@195dc41
Adding type registration java.lang.Character -> org.hibernate.type.CharacterType@195dc41
Adding type registration short -> org.hibernate.type.ShortType@1bce7e2
Adding type registration short -> org.hibernate.type.ShortType@1bce7e2
Adding type registration java.lang.Short -> org.hibernate.type.ShortType@1bce7e2
Adding type registration integer -> org.hibernate.type.IntegerType@48abc
Adding type registration int -> org.hibernate.type.IntegerType@48abc
Adding type registration java.lang.Integer -> org.hibernate.type.IntegerType@48abc
Adding type registration long -> org.hibernate.type.LongType@1292965
Adding type registration long -> org.hibernate.type.LongType@1292965
Adding type registration java.lang.Long -> org.hibernate.type.LongType@1292965
Adding type registration float -> org.hibernate.type.FloatType@1d7a58d
Adding type registration float -> org.hibernate.type.FloatType@1d7a58d
Adding type registration java.lang.Float -> org.hibernate.type.FloatType@1d7a58d
Adding type registration double -> org.hibernate.type.DoubleType@10dbbc9
Adding type registration double -> org.hibernate.type.DoubleType@10dbbc9
Adding type registration java.lang.Double -> org.hibernate.type.DoubleType@10dbbc9
Adding type registration big_decimal -> org.hibernate.type.BigDecimalType@1d9b479
Adding type registration java.math.BigDecimal -> org.hibernate.type.BigDecimalType@1d9b479
Adding type registration big_integer -> org.hibernate.type.BigIntegerType@a1eeed
Adding type registration java.math.BigInteger -> org.hibernate.type.BigIntegerType@a1eeed
Adding type registration string -> org.hibernate.type.StringType@15b74a5
Adding type registration java.lang.String -> org.hibernate.type.StringType@15b74a5
Adding type registration nstring -> org.hibernate.type.StringNVarcharType@1793e97
Adding type registration ncharacter -> org.hibernate.type.CharacterNCharType@14ee262
Adding type registration url -> org.hibernate.type.UrlType@18dba4b
Adding type registration java.net.URL -> org.hibernate.type.UrlType@18dba4b
Adding type registration date -> org.hibernate.type.DateType@fb76c8
Adding type registration java.sql.Date -> org.hibernate.type.DateType@fb76c8
Adding type registration time -> org.hibernate.type.TimeType@6afa06
Adding type registration java.sql.Time -> org.hibernate.type.TimeType@6afa06
Adding type registration timestamp -> org.hibernate.type.TimestampType@172ef50
Adding type registration java.sql.Timestamp -> org.hibernate.type.TimestampType@172ef50
Adding type registration java.util.Date -> org.hibernate.type.TimestampType@172ef50
Adding type registration dbtimestamp -> org.hibernate.type.DbTimestampType@d65731
Adding type registration calendar -> org.hibernate.type.CalendarType@b03bd5
Adding type registration java.util.Calendar -> org.hibernate.type.CalendarType@b03bd5
Adding type registration java.util.GregorianCalendar -> org.hibernate.type.CalendarType@b03bd5
Adding type registration calendar_date -> org.hibernate.type.CalendarDateType@79d211
Adding type registration locale -> org.hibernate.type.LocaleType@15346ac
Adding type registration java.util.Locale -> org.hibernate.type.LocaleType@15346ac
Adding type registration currency -> org.hibernate.type.CurrencyType@13029db
Adding type registration java.util.Currency -> org.hibernate.type.CurrencyType@13029db
Adding type registration timezone -> org.hibernate.type.TimeZoneType@16eba72
Adding type registration java.util.TimeZone -> org.hibernate.type.TimeZoneType@16eba72
Adding type registration class -> org.hibernate.type.ClassType@ad481c
Adding type registration java.lang.Class -> org.hibernate.type.ClassType@ad481c
Adding type registration uuid-binary -> org.hibernate.type.UUIDBinaryType@14559a7
Adding type registration java.util.UUID -> org.hibernate.type.UUIDBinaryType@14559a7
Adding type registration uuid-char -> org.hibernate.type.UUIDCharType@ff95e1
Adding type registration pg-uuid -> org.hibernate.type.PostgresUUIDType@f103bf
Adding type registration binary -> org.hibernate.type.BinaryType@de861c
Adding type registration byte[] -> org.hibernate.type.BinaryType@de861c
Adding type registration [B -> org.hibernate.type.BinaryType@de861c
Adding type registration wrapper-binary -> org.hibernate.type.WrapperBinaryType@378bdc
Adding type registration Byte[] -> org.hibernate.type.WrapperBinaryType@378bdc
Adding type registration [Ljava.lang.Byte; -> org.hibernate.type.WrapperBinaryType@378bdc
Adding type registration image -> org.hibernate.type.ImageType@dc77c4
Adding type registration characters -> org.hibernate.type.CharArrayType@2eec5a
Adding type registration char[] -> org.hibernate.type.CharArrayType@2eec5a
Adding type registration [C -> org.hibernate.type.CharArrayType@2eec5a
Adding type registration wrapper-characters -> org.hibernate.type.CharacterArrayType@1b61143
Adding type registration [Ljava.lang.Character; -> org.hibernate.type.CharacterArrayType@1b61143
Adding type registration Character[] -> org.hibernate.type.CharacterArrayType@1b61143
Adding type registration text -> org.hibernate.type.TextType@583596
Adding type registration ntext -> org.hibernate.type.NTextType@fe4b97
Adding type registration blob -> org.hibernate.type.BlobType@328bc5
Adding type registration java.sql.Blob -> org.hibernate.type.BlobType@328bc5
Adding type registration materialized_blob -> org.hibernate.type.MaterializedBlobType@1f196f2
Adding type registration clob -> org.hibernate.type.ClobType@1677282
Adding type registration java.sql.Clob -> org.hibernate.type.ClobType@1677282
Adding type registration nclob -> org.hibernate.type.NClobType@15ad51a
Adding type registration java.sql.NClob -> org.hibernate.type.NClobType@15ad51a
Adding type registration materialized_clob -> org.hibernate.type.MaterializedClobType@1dc90ef
Adding type registration materialized_nclob -> org.hibernate.type.MaterializedNClobType@93b4f0
Adding type registration serializable -> org.hibernate.type.SerializableType@177da8a
Adding type registration object -> org.hibernate.type.ObjectType@12cae4e
Adding type registration java.lang.Object -> org.hibernate.type.ObjectType@12cae4e
Adding type registration imm_date -> org.hibernate.type.AdaptedImmutableType@14f625f
Adding type registration imm_time -> org.hibernate.type.AdaptedImmutableType@c36f8c
Adding type registration imm_timestamp -> org.hibernate.type.AdaptedImmutableType@d06749
Adding type registration imm_dbtimestamp -> org.hibernate.type.AdaptedImmutableType@2d1418
Adding type registration imm_calendar -> org.hibernate.type.AdaptedImmutableType@1826d31
Adding type registration imm_calendar_date -> org.hibernate.type.AdaptedImmutableType@1cebc20
Adding type registration imm_binary -> org.hibernate.type.AdaptedImmutableType@1a0ef58
Adding type registration imm_serializable -> org.hibernate.type.AdaptedImmutableType@c18372
Registering IdentifierGenerator strategy [uuid2] -> [org.hibernate.id.UUIDGenerator]
Registering IdentifierGenerator strategy [guid] -> [org.hibernate.id.GUIDGenerator]
Registering IdentifierGenerator strategy [uuid] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [uuid.hex] -> [org.hibernate.id.UUIDHexGenerator]
Registering IdentifierGenerator strategy [hilo] -> [org.hibernate.id.TableHiLoGenerator]
Registering IdentifierGenerator strategy [assigned] -> [org.hibernate.id.Assigned]
Registering IdentifierGenerator strategy [identity] -> [org.hibernate.id.IdentityGenerator]
Registering IdentifierGenerator strategy [select] -> [org.hibernate.id.SelectGenerator]
Registering IdentifierGenerator strategy [sequence] -> [org.hibernate.id.SequenceGenerator]
Registering IdentifierGenerator strategy [seqhilo] -> [org.hibernate.id.SequenceHiLoGenerator]
Registering IdentifierGenerator strategy [increment] -> [org.hibernate.id.IncrementGenerator]
Registering IdentifierGenerator strategy [foreign] -> [org.hibernate.id.ForeignGenerator]
Registering IdentifierGenerator strategy [sequence-identity] -> [org.hibernate.id.SequenceIdentityGenerator]
Registering IdentifierGenerator strategy [enhanced-sequence] -> [org.hibernate.id.enhanced.SequenceStyleGenerator]
Registering IdentifierGenerator strategy [enhanced-table] -> [org.hibernate.id.enhanced.TableGenerator]
Processing PersistenceUnitInfo [
	name: ePU
	persistence provider classname: org.hibernate.ejb.HibernatePersistence
	classloader: WebAppClassLoader=1822525@1bcf3d
	Temporary classloader: org.springframework.instrument.classloading.SimpleThrowawayClassLoader@9ce0f1
	excludeUnlistedClasses: false
	JTA datasource: null
	Non JTA datasource: null
	Transaction type: RESOURCE_LOCAL
	PU root URL: file:/E:/ebay/ebay-develop/target/classes
	Shared Cache Mode: UNSPECIFIED
	Validation Mode: AUTO
	Jar files URLs []
	Managed classes names [
		com.ebay.domain.customer.CustomerImpl
		com.ebay.domain.user.User
		com.ebay.domain.seller.SellerImpl
		com.ebay.domain.seller.RecentFeedbackratings
		com.ebay.domain.feedback.FeedBack
		com.ebay.domain.item.ItemDto]
	Mapping files names [
		config/jpa/domain/customer.orm.xml
		config/jpa/domain/user.orm.xml
		config/jpa/domain/rate.orm.xml
		config/jpa/domain/seller.orm.xml
		config/jpa/domain/feedback.orm.xml
		config/jpa/domain/item.orm.xml]
	Properties [
		hibernate.connection.driver_class: com.mysql.jdbc.Driver
		hibernate.dialect: org.hibernate.dialect.MySQL5Dialect
		hibernate.max_fetch_depth: 3
		hibernate.format_sql: true
		hibernate.connection.username: root
		hibernate.hbm2ddl.auto: update
		hibernate.connection.url: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8
		hibernate.connection.password: root
		hibernate.show_sql: true]
Detect class: true; detect hbm: true
Detect class: true; detect hbm: true
Searching mapped entities in jar/par: file:/E:/ebay/ebay-develop/target/classes
Filtering: com.ebay.common.ClientFactory
Filtering: com.ebay.common.Constants
Filtering: com.ebay.common.handler.JAXWSHandler
Filtering: com.ebay.common.handler.ServiceHandlerResolver
Java element filter matched for com.ebay.common
Filtering: com.ebay.common.persistence.EntityConfiguration
Filtering: com.ebay.controller.CompetitorController
Filtering: com.ebay.controller.ItemController
Filtering: com.ebay.controller.LoginController
Filtering: com.ebay.dao.customer.CustomerDao
Filtering: com.ebay.dao.customer.CustomerDaoImpl
Filtering: com.ebay.dao.feedback.FeedbackDao
Filtering: com.ebay.dao.feedback.FeedBackDaoImpl
Filtering: com.ebay.dao.item.ItemDao
Filtering: com.ebay.dao.item.ItemDaoImpl
Filtering: com.ebay.dao.seller.RatesDao
Filtering: com.ebay.dao.seller.RatesDaoImpl
Filtering: com.ebay.dao.seller.SellerDao
Filtering: com.ebay.dao.seller.SellerDaoImpl
Java element filter matched for com.ebay.dao.user
Filtering: com.ebay.dao.user.UserDao
Filtering: com.ebay.dao.user.UserDaoImpl
Filtering: com.ebay.domain.customer.Customer
Filtering: com.ebay.domain.customer.CustomerImpl
Java element filter matched for com.ebay.domain.customer.CustomerImpl
Filtering: com.ebay.domain.feedback.FeedBack
Java element filter matched for com.ebay.domain.feedback.FeedBack
Filtering: com.ebay.domain.item.Item
Filtering: com.ebay.domain.item.ItemDto
Java element filter matched for com.ebay.domain.item.ItemDto
Filtering: com.ebay.domain.item.RecomendPrice
Filtering: com.ebay.domain.price.PriceDot
Filtering: com.ebay.domain.price.Pring
Filtering: com.ebay.domain.seller.DaySellDto
Filtering: com.ebay.domain.seller.RecentFeedbackratings
Java element filter matched for com.ebay.domain.seller.RecentFeedbackratings
Filtering: com.ebay.domain.seller.Seller
Filtering: com.ebay.domain.seller.SellerDto
Filtering: com.ebay.domain.seller.SellerImpl
Java element filter matched for com.ebay.domain.seller.SellerImpl
Filtering: com.ebay.domain.seller.SellerInfoDto
Filtering: com.ebay.domain.seller.WeekSellInfo
Filtering: com.ebay.domain.user.User
Java element filter matched for com.ebay.domain.user.User
Filtering: com.ebay.ebay_develop.App
Filtering: com.ebay.ebay_develop.Img
Filtering: com.ebay.find.FindItemsByCategory
Filtering: com.ebay.find.FindItemsByKeyWords
Filtering: com.ebay.find.FindItemsByProduct
Filtering: com.ebay.find.FindItemsInStore
Filtering: com.ebay.find.TestFind
Filtering: com.ebay.form.UserForm
Filtering: com.ebay.get.GetRecommendedKeyWords
Java element filter matched for com.ebay.get
Filtering: com.ebay.init.ClientConfigInit
Java element filter matched for com.ebay.init
Filtering: com.ebay.service.customer.CustomerService
Filtering: com.ebay.service.customer.CustomerServieImpl
Filtering: com.ebay.service.feedback.FeedbackService
Filtering: com.ebay.service.feedback.FeedbackServiceImpl
Filtering: com.ebay.service.item.ItemService
Filtering: com.ebay.service.item.ItemServiceImpl
Filtering: com.ebay.service.seller.SellerService
Filtering: com.ebay.service.seller.SellerServiceImpl
Java element filter matched for com.ebay.service.user
Filtering: com.ebay.service.user.UserService
Filtering: com.ebay.service.user.UserServiceImpl
Filtering: com.ebay.services.client.ClientConfig
Filtering: com.ebay.services.client.FindingServiceClientFactory
Java element filter matched for com.ebay.services.client
Filtering: com.ebay.services.finding.AckValue
Filtering: com.ebay.services.finding.Adapter1
Filtering: com.ebay.services.finding.Affiliate
Filtering: com.ebay.services.finding.Amount
Filtering: com.ebay.services.finding.Aspect
Filtering: com.ebay.services.finding.AspectFilter
Filtering: com.ebay.services.finding.AspectHistogramContainer
Filtering: com.ebay.services.finding.AspectValueHistogram
Filtering: com.ebay.services.finding.BaseFindingServiceRequest
Filtering: com.ebay.services.finding.BaseFindingServiceResponse
Filtering: com.ebay.services.finding.BaseServiceRequest
Filtering: com.ebay.services.finding.BaseServiceResponse
Filtering: com.ebay.services.finding.Category
Filtering: com.ebay.services.finding.CategoryHistogram
Filtering: com.ebay.services.finding.CategoryHistogramContainer
Filtering: com.ebay.services.finding.Condition
Filtering: com.ebay.services.finding.ConditionHistogram
Filtering: com.ebay.services.finding.ConditionHistogramContainer
Filtering: com.ebay.services.finding.Distance
Filtering: com.ebay.services.finding.DomainFilter
Filtering: com.ebay.services.finding.ErrorCategory
Filtering: com.ebay.services.finding.ErrorData
Filtering: com.ebay.services.finding.ErrorMessage
Filtering: com.ebay.services.finding.ErrorParameter
Filtering: com.ebay.services.finding.ErrorSeverity
Filtering: com.ebay.services.finding.ExtensionType
Filtering: com.ebay.services.finding.FindCompletedItemsRequest
Filtering: com.ebay.services.finding.FindCompletedItemsResponse
Filtering: com.ebay.services.finding.FindingService
Filtering: com.ebay.services.finding.FindingServicePortType
Filtering: com.ebay.services.finding.FindItemsAdvancedRequest
Filtering: com.ebay.services.finding.FindItemsAdvancedResponse
Filtering: com.ebay.services.finding.FindItemsByCategoryRequest
Filtering: com.ebay.services.finding.FindItemsByCategoryResponse
Filtering: com.ebay.services.finding.FindItemsByKeywordsRequest
Filtering: com.ebay.services.finding.FindItemsByKeywordsResponse
Filtering: com.ebay.services.finding.FindItemsByProductRequest
Filtering: com.ebay.services.finding.FindItemsByProductResponse
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchRequest
Filtering: com.ebay.services.finding.FindItemsForFavoriteSearchResponse
Filtering: com.ebay.services.finding.FindItemsIneBayStoresRequest
Filtering: com.ebay.services.finding.FindItemsIneBayStoresResponse
Filtering: com.ebay.services.finding.GetHistogramsRequest
Filtering: com.ebay.services.finding.GetHistogramsResponse
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationRequest
Filtering: com.ebay.services.finding.GetSearchKeywordsRecommendationResponse
Filtering: com.ebay.services.finding.GetVersionRequest
Filtering: com.ebay.services.finding.GetVersionResponse
Filtering: com.ebay.services.finding.ItemFilter
Filtering: com.ebay.services.finding.ItemFilterType
Filtering: com.ebay.services.finding.ListingInfo
Filtering: com.ebay.services.finding.ObjectFactory
Filtering: com.ebay.services.finding.OutputSelectorType
Java element filter matched for com.ebay.services.finding
Filtering: com.ebay.services.finding.PaginationInput
Filtering: com.ebay.services.finding.PaginationOutput
Filtering: com.ebay.services.finding.ProductId
Filtering: com.ebay.services.finding.SearchItem
Filtering: com.ebay.services.finding.SearchResult
Filtering: com.ebay.services.finding.SellerInfo
Filtering: com.ebay.services.finding.SellingStatus
Filtering: com.ebay.services.finding.ShippingInfo
Filtering: com.ebay.services.finding.SortOrderType
Filtering: com.ebay.services.finding.Storefront
Filtering: com.ebay.util.feedback.CatchFeedback
Filtering: com.ebay.util.feedback.CatchFeedbackPlus
Filtering: com.ebay.util.feedback.Date1
Filtering: com.ebay.util.feedback.DealFeedback
Filtering: com.ebay.util.feedback.Feedback
Filtering: com.ebay.util.feedback.GetFeedback
Java element filter matched for com.ebay.util.feedback
Filtering: com.ebay.util.feedback.testsplit
Filtering: com.ebay.util.feedback.Util
Filtering: com.ebay.util.kmeans.Kmeans
Filtering: com.ebay.util.mail.MailSenderInfo
Filtering: com.ebay.util.mail.MyAuthenticator
Java element filter matched for com.ebay.util.mail
Filtering: com.ebay.util.mail.SendEmail
Filtering: com.ebay.util.mail.SimpleMailSender
Filtering: com.ebay.util.seller.CatchSellerInfo
Filtering: com.ebay.util.seller.ConvertStruct
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Trying to resolve system-id [file:///E:/ebay/ebay-develop/orm_2_0.xsd]
Mapping Package com.ebay.util.feedback
Mapping Package com.ebay.util.mail
Mapping Package com.ebay.get
Mapping Package com.ebay.init
Mapping Package com.ebay.common
Mapping Package com.ebay.service.user
Mapping Package com.ebay.services.finding
Mapping Package com.ebay.dao.user
Mapping Package com.ebay.services.client
Adding Integrator [org.hibernate.cfg.beanvalidation.BeanValidationIntegrator].
Adding Integrator [org.hibernate.ejb.event.JpaIntegrator].
No JNDI name configured for binding Ejb3Configuration
Preparing to build session factory with filters : {}
HHH000402: Using Hibernate built-in connection pool (not for production use!)
HHH000115: Hibernate connection pool size: 20
HHH000006: Autocommit mode: true
HHH000401: using driver [com.mysql.jdbc.Driver] at URL [jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8]
HHH000046: Connection properties: {user=root, password=root, autocommit=true, release_mode=auto}
Opening new JDBC connection
Created connection to: jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, Isolation Level: 4
Database ->
       name : MySQL
    version : 5.0.22-community-nt
      major : 5
      minor : 0
Driver ->
       name : MySQL-AB JDBC Driver
    version : mysql-connector-java-5.1.24 ( Revision: ${bzr.revision-id} )
      major : 5
      minor : 1
JDBC version : 4.0
HHH000400: Using dialect: org.hibernate.dialect.MySQL5Dialect
Binding named query: SELECT_CUSTOMERS => select customer from com.ebay.domain.customer.CustomerImpl customer
Binding named query: SELECT_BY_NAME => select count(*) from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_BY_NAME_PASSWORD => select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
Binding named query: GET_PASSWORD_BY_NAME => select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
Binding named query: SELECT_RATES => select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_RATES_EXITS => select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
Binding named query: SELECT_BY_SELLERNAME => select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_SELLERNAME => select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
Binding named query: SELECTSELLER_BY_AllDays => select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_BY_TOTALSELL => select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
Binding named query: SELECT_BY_SUCCESSSELL => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
Binding named query: List_FeedBack => from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
Binding named query: SPECIAL_MAX_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: SPECIAL_MIN_FEEDBACK => select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
Binding named query: K_MEANS_PRICE => select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
Binding named query: MONTH_SELLINFO => select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
Binding named query: DAY_SELLINFO => select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
Binding named query: WEEK_SELLINFO => select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
Binding named query: KMEANS_MIN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Binding named query: KMEANS_BETWEEN => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Binding named query: KMEANS_MAX => select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Binding named query: MAX_PRICE => select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
Binding named query: SELECT_ITEMS => select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_ALLITEMS => select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_AvgPrice => select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MAXPRICEDTO => select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_MINPRICEDTO => select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Binding named query: SELECT_RECOMENDPRICE => select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
Processing hbm.xml files
Process annotated classes
Binding entity from annotated class: com.ebay.domain.customer.CustomerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name CustomerImpl
Bind entity com.ebay.domain.customer.CustomerImpl on table customer
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=CUSTOMER_NAME, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property customername with lazy=false
building SimpleValue for customername
Building property customername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(customer), mappingColumn=STAR, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.user.User
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name User
Bind entity com.ebay.domain.user.User on table User
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=USER_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=PassWord, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property passWord with lazy=false
building SimpleValue for passWord
Building property passWord
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(User), mappingColumn=UserName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property userName with lazy=false
building SimpleValue for userName
Building property userName
Binding entity from annotated class: com.ebay.domain.seller.SellerImpl
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name SellerImpl
Bind entity com.ebay.domain.seller.SellerImpl on table SELLER
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Seller_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property SellerName with lazy=false
building SimpleValue for SellerName
Building property SellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=CreateDate, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sinceDate with lazy=false
building SimpleValue for sinceDate
Building property sinceDate
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(SELLER), mappingColumn=Star, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.seller.RecentFeedbackratings
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name RecentFeedbackratings
Bind entity com.ebay.domain.seller.RecentFeedbackratings on table RecentFeedbackratings
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=RecentFeedRate_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Negative with lazy=false
building SimpleValue for one_Negative
Building property one_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Neutral with lazy=false
building SimpleValue for one_Neutral
Building property one_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=one_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property one_Positive with lazy=false
building SimpleValue for one_Positive
Building property one_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=SellerName, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellerName with lazy=false
building SimpleValue for sellerName
Building property sellerName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Negative with lazy=false
building SimpleValue for six_Negative
Building property six_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Neutral with lazy=false
building SimpleValue for six_Neutral
Building property six_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=six_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property six_Positive with lazy=false
building SimpleValue for six_Positive
Building property six_Positive
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Negative, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Negative with lazy=false
building SimpleValue for twe_Negative
Building property twe_Negative
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Neutral, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Neutral with lazy=false
building SimpleValue for twe_Neutral
Building property twe_Neutral
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(RecentFeedbackratings), mappingColumn=twe_Positive, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property twe_Positive with lazy=false
building SimpleValue for twe_Positive
Building property twe_Positive
Binding entity from annotated class: com.ebay.domain.feedback.FeedBack
Import with entity name FeedBack
Bind entity com.ebay.domain.feedback.FeedBack on table FEEDBACK
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=FEEDBACK_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property feedbackId with lazy=false
building SimpleValue for feedbackId
Building property feedbackId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ATTITUDE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property attitude with lazy=false
building SimpleValue for attitude
Building property attitude
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=COMMENT, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property comment with lazy=false
building SimpleValue for comment
Building property comment
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Feed_Date, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property date with lazy=false
building SimpleValue for date
Building property date
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_ID, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=ITEM_Name, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemName with lazy=false
building SimpleValue for itemName
Building property itemName
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=PRICE, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=Seller, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellername with lazy=false
building SimpleValue for sellername
Building property sellername
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(FEEDBACK), mappingColumn=STAR_LEVEL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property star with lazy=false
building SimpleValue for star
Building property star
Binding entity from annotated class: com.ebay.domain.item.ItemDto
Binding column: Ejb3DiscriminatorColumn{logicalColumnName'DTYPE', discriminatorTypeName='string'}
Import with entity name ItemDto
Bind entity com.ebay.domain.item.ItemDto on table ItemDto
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=Id, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property id with lazy=false
building SimpleValue for id
Building property id
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=country, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property country with lazy=false
building SimpleValue for country
Building property country
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=galleryURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property galleryURL with lazy=false
building SimpleValue for galleryURL
Building property galleryURL
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=ItemId, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property itemId with lazy=false
building SimpleValue for itemId
Building property itemId
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=keyWords, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property keyWords with lazy=false
building SimpleValue for keyWords
Building property keyWords
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=price, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property price with lazy=false
building SimpleValue for price
Building property price
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=sellCount, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property sellCount with lazy=false
building SimpleValue for sellCount
Building property sellCount
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=title, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property title with lazy=false
building SimpleValue for title
Building property title
Binding column: Ejb3Column{table=org.hibernate.mapping.Table(ItemDto), mappingColumn=viewItemURL, insertable=true, updatable=true, unique=false}
MetadataSourceProcessor property viewItemURL with lazy=false
building SimpleValue for viewItemURL
Building property viewItemURL
Setting SimpleValue typeName for id
Setting SimpleValue typeName for customername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for passWord
Setting SimpleValue typeName for userName
Setting SimpleValue typeName for id
Setting SimpleValue typeName for SellerName
Setting SimpleValue typeName for country
Setting SimpleValue typeName for sinceDate
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for one_Negative
Setting SimpleValue typeName for one_Neutral
Setting SimpleValue typeName for one_Positive
Setting SimpleValue typeName for sellerName
Setting SimpleValue typeName for six_Negative
Setting SimpleValue typeName for six_Neutral
Setting SimpleValue typeName for six_Positive
Setting SimpleValue typeName for twe_Negative
Setting SimpleValue typeName for twe_Neutral
Setting SimpleValue typeName for twe_Positive
Setting SimpleValue typeName for feedbackId
Setting SimpleValue typeName for attitude
Setting SimpleValue typeName for comment
Setting SimpleValue typeName for date
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for itemName
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellername
Setting SimpleValue typeName for star
Setting SimpleValue typeName for id
Setting SimpleValue typeName for country
Setting SimpleValue typeName for galleryURL
Setting SimpleValue typeName for itemId
Setting SimpleValue typeName for keyWords
Setting SimpleValue typeName for price
Setting SimpleValue typeName for sellCount
Setting SimpleValue typeName for title
Setting SimpleValue typeName for viewItemURL
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
Automatic flush during beforeCompletion(): disabled
Automatic session close at end of transaction: disabled
JDBC batch size: 15
JDBC batch updates for versioned data: disabled
Scrollable result sets: enabled
Wrap result sets: disabled
JDBC3 getGeneratedKeys(): enabled
multi-tenancy strategy : NONE
Connection release mode: auto
HHH000268: Transaction strategy: org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory
Using BatchFetchStyle : LEGACY
Maximum outer join fetch depth: 3
Default batch fetch size: 1
Generate SQL with comments: disabled
Order SQL updates by primary key: disabled
Order SQL inserts for batching: disabled
Default null ordering: none
Query translator: org.hibernate.hql.internal.ast.ASTQueryTranslatorFactory
HHH000397: Using ASTQueryTranslatorFactory
Query language substitutions: {}
JPA-QL strict compliance: enabled
Second-level cache: enabled
Query cache: disabled
Cache region factory : org.hibernate.cache.internal.NoCachingRegionFactory
org.hibernate.cache.internal.NoCachingRegionFactory did not provide constructor accepting java.util.Properties; attempting no-arg constructor.
Optimize cache for minimal puts: disabled
Structured second-level cache entries: disabled
Second-level cache direct-reference entries: disabled
Statistics: disabled
Deleted entity synthetic identifier rollback: disabled
Default entity-mode: pojo
Named query checking : enabled
Check Nullability in Core (should be disabled when Bean Validation is on): enabled
Allow initialization of lazy state outside session : : disabled
JTA Track by Thread: enabled
Building session factory
Session factory constructed with filter configurations : {}
Instantiating session factory with properties: {java.vendor=Oracle Corporation, sun.java.launcher=SUN_STANDARD, hibernate.connection.url=jdbc:mysql://localhost:3306/ebay?useUnicode=true&characterEncoding=UTF-8, sun.management.compiler=HotSpot Client Compiler, hibernate.ejb.discard_pc_on_close=false, rjrport=8081, hibernate.transaction.flush_before_completion=false, os.name=Windows 8, sun.boot.class.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\resources.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\rt.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\sunrsasign.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jsse.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jce.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\charsets.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\jfr.jar;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\classes, rjrkeystore=C:\Users\林林\.keystore, sun.desktop=windows, java.vm.specification.vendor=Oracle Corporation, rjrkeypassword=changeit, java.runtime.version=1.7.0_45-b18, hibernate.connection.autocommit=true, rjrscanlist=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.scanlist, user.name=林林, javax.persistence.validation.mode=AUTO, hibernate.connection.release_mode=auto, rjrscanintervalseconds=5, user.language=zh, sun.boot.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin, rjrparentloaderpriority=true, java.version=1.7.0_45, user.timezone=Asia/Shanghai, sun.arch.data.model=32, rjrpassword=changeit, java.endorsed.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\endorsed, sun.cpu.isalist=pentium_pro+mmx pentium_pro pentium+mmx pentium i486 i386 i86, sun.jnu.encoding=GBK, file.encoding.pkg=sun.io, file.separator=\, java.specification.name=Java Platform API Specification, hibernate.format_sql=true, java.class.version=51.0, user.country=CN, java.home=D:\Program Files (x86)\Java\jdk1.7.0_45\jre, java.vm.info=mixed mode, os.version=6.2, hibernate.transaction.factory_class=org.hibernate.engine.transaction.internal.jdbc.JdbcTransactionFactory, hibernate.query.jpaql_strict_compliance=true, path.separator=;, java.vm.version=24.45-b08, hibernate.max_fetch_depth=3, hibernate.connection.password=root, user.variant=, rjrneedclientauth=false, rjrenablessl=false, java.awt.printerjob=sun.awt.windows.WPrinterJob, sun.io.unicode.encoding=UnicodeLittle, awt.toolkit=sun.awt.windows.WToolkit, hibernate.connection.username=root, user.script=, user.home=C:\Users\林林, java.specification.vendor=Oracle Corporation, hibernate.hbm2ddl.auto=update, rjrignoreScanClassFile=true, java.library.path=D:\Program Files (x86)\Java\jdk1.7.0_45\bin;C:\Windows\Sun\Java\bin;C:\Windows\system32;C:\Windows;D:\Program Files (x86)\Java\jdk1.7.0_45\jre\bin;C:\Program Files (x86)\Common Files\NetSarang;C:\Program Files (x86)\AMD APP\bin\x86_64;C:\Program Files (x86)\AMD APP\bin\x86;D:\ActivePython27\;D:\ActivePython27\Scripts;F:\app\lin\product\11.2.0\dbhome_1\bin;C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Program Files (x86)\ATI Technologies\ATI.ACE\Core-Static;D:\SVN\bin;D:\MySQL Server 5.0\bin;%JAVA_HOME%/bin;%JAVA_HOME%/jre/bin;C:\Users\林林\AppData\Roaming\Python\Scripts;D:\Program Files (x86)\Java\jdk1.7.0_45/bin;D:\Program Files (x86)\Java\jdk1.7.0_45/jre/bin;D:\apache-maven-3.0.5/bin;D:\Google\google_appengine\;., java.vendor.url=http://java.oracle.com/, rjrResourceMapping=, rjrsslport=8443, hibernate.connection.driver_class=com.mysql.jdbc.Driver, java.vm.vendor=Oracle Corporation, hibernate.dialect=org.hibernate.dialect.MySQL5Dialect, java.runtime.name=Java(TM) SE Runtime Environment, sun.java.command=runjettyrun.Bootstrap, java.class.path=D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlets-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-server-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-deploy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-policy-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-util-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-rewrite-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-overlay-deployer-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jmx-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.jasper.glassfish-2.2.2.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.annotation_1.1.0.v201105051105.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\servlet-api-3.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-client-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.apache.taglibs.standard.glassfish-1.2.0.v201112081803.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\com.sun.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-jndi-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\spdy-core-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-webapp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp-2.2.0.v201112011158.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-servlet-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.el-2.2.0.v201108011116.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-continuation-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jsp-impl-2.2.2.b05.0.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-xml-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\org.objectweb.asm_3.3.1.v201101071600.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-io-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-security-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\javax.servlet.jsp.jstl-1.2.0.v201105211821.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\run-jetty-run-bootstrap-jetty8.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-plus-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-annotations-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-http-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-ajp-8.1.8.v20121106.jar;D:\eclipse\configuration\org.eclipse.osgi\bundles\894\1\.cp\lib\jetty-websocket-8.1.8.v20121106.jar, hibernate.bytecode.use_reflection_optimizer=false, rjrclasspath=file://E:\eclipse-ssbusy\.metadata\.plugins\runjettyrun\ebay-develop.classpath, java.vm.specification.name=Java Virtual Machine Specification, java.vm.specification.version=1.7, sun.os.patch.level=, sun.cpu.endian=little, java.io.tmpdir=C:\Users\林林\AppData\Local\Temp\, java.vendor.url.bug=http://bugreport.sun.com/bugreport/, javax.persistence.sharedCache.mode=UNSPECIFIED, java.awt.graphicsenv=sun.awt.Win32GraphicsEnvironment, os.arch=x86, rjrenbaleJNDI=false, java.ext.dirs=D:\Program Files (x86)\Java\jdk1.7.0_45\jre\lib\ext;C:\Windows\Sun\Java\lib\ext, rjrEclipseListener=52471, user.dir=E:\ebay\ebay-develop, line.separator=
, rjrcontext=/ebay-develop, java.vm.name=Java HotSpot(TM) Client VM, rjrwebapp=E:\ebay\ebay-develop\src\main\webapp, file.encoding=UTF-8, hibernate.use_identifier_rollback=false, java.specification.version=1.7, rjrenablescanner=false, hibernate.show_sql=true}
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Static SQL for entity: com.ebay.domain.user.User
 Version select: select USER_ID from User where USER_ID =?
 Snapshot select: select user_.USER_ID, user_.PassWord as PassWord2_4_, user_.UserName as UserName3_4_ from User user_ where user_.USER_ID=?
 Insert 0: insert into User (PassWord, UserName, USER_ID) values (?, ?, ?)
 Update 0: update User set PassWord=?, UserName=? where USER_ID=?
 Delete 0: delete from User where USER_ID=?
 Identity insert: insert into User (PassWord, UserName) values (?, ?)
Static SQL for entity: com.ebay.domain.item.ItemDto
 Version select: select Id from ItemDto where Id =?
 Snapshot select: select itemdto_.Id, itemdto_.country as country2_1_, itemdto_.galleryURL as galleryU3_1_, itemdto_.ItemId as ItemId4_1_, itemdto_.keyWords as keyWords5_1_, itemdto_.price as price6_1_, itemdto_.sellCount as sellCoun7_1_, itemdto_.title as title8_1_, itemdto_.viewItemURL as viewItem9_1_ from ItemDto itemdto_ where itemdto_.Id=?
 Insert 0: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL, Id) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update ItemDto set country=?, galleryURL=?, ItemId=?, keyWords=?, price=?, sellCount=?, title=?, viewItemURL=? where Id=?
 Delete 0: delete from ItemDto where Id=?
 Identity insert: insert into ItemDto (country, galleryURL, ItemId, keyWords, price, sellCount, title, viewItemURL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.feedback.FeedBack
 Version select: select FEEDBACK_ID from FEEDBACK where FEEDBACK_ID =?
 Snapshot select: select feedback_.FEEDBACK_ID, feedback_.ATTITUDE as ATTITUDE2_0_, feedback_.COMMENT as COMMENT3_0_, feedback_.Feed_Date as Feed4_0_, feedback_.ITEM_ID as ITEM5_0_, feedback_.ITEM_Name as ITEM6_0_, feedback_.PRICE as PRICE7_0_, feedback_.Seller as Seller8_0_, feedback_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback_ where feedback_.FEEDBACK_ID=?
 Insert 0: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL, FEEDBACK_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update FEEDBACK set ATTITUDE=?, COMMENT=?, Feed_Date=?, ITEM_ID=?, ITEM_Name=?, PRICE=?, Seller=?, STAR_LEVEL=? where FEEDBACK_ID=?
 Delete 0: delete from FEEDBACK where FEEDBACK_ID=?
 Identity insert: insert into FEEDBACK (ATTITUDE, COMMENT, Feed_Date, ITEM_ID, ITEM_Name, PRICE, Seller, STAR_LEVEL) values (?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.customer.CustomerImpl
 Version select: select CUSTOMER_ID from customer where CUSTOMER_ID =?
 Snapshot select: select customerim_.CUSTOMER_ID, customerim_.CUSTOMER_NAME as CUSTOMER2_5_, customerim_.STAR as STAR3_5_ from customer customerim_ where customerim_.CUSTOMER_ID=?
 Insert 0: insert into customer (CUSTOMER_NAME, STAR, CUSTOMER_ID) values (?, ?, ?)
 Update 0: update customer set CUSTOMER_NAME=?, STAR=? where CUSTOMER_ID=?
 Delete 0: delete from customer where CUSTOMER_ID=?
 Identity insert: insert into customer (CUSTOMER_NAME, STAR) values (?, ?)
Static SQL for entity: com.ebay.domain.seller.RecentFeedbackratings
 Version select: select RecentFeedRate_ID from RecentFeedbackratings where RecentFeedRate_ID =?
 Snapshot select: select recentfeed_.RecentFeedRate_ID, recentfeed_.one_Negative as one2_2_, recentfeed_.one_Neutral as one3_2_, recentfeed_.one_Positive as one4_2_, recentfeed_.SellerName as SellerNa5_2_, recentfeed_.six_Negative as six6_2_, recentfeed_.six_Neutral as six7_2_, recentfeed_.six_Positive as six8_2_, recentfeed_.twe_Negative as twe9_2_, recentfeed_.twe_Neutral as twe10_2_, recentfeed_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed_ where recentfeed_.RecentFeedRate_ID=?
 Insert 0: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive, RecentFeedRate_ID) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
 Update 0: update RecentFeedbackratings set one_Negative=?, one_Neutral=?, one_Positive=?, SellerName=?, six_Negative=?, six_Neutral=?, six_Positive=?, twe_Negative=?, twe_Neutral=?, twe_Positive=? where RecentFeedRate_ID=?
 Delete 0: delete from RecentFeedbackratings where RecentFeedRate_ID=?
 Identity insert: insert into RecentFeedbackratings (one_Negative, one_Neutral, one_Positive, SellerName, six_Negative, six_Neutral, six_Positive, twe_Negative, twe_Neutral, twe_Positive) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
Static SQL for entity: com.ebay.domain.seller.SellerImpl
 Version select: select Seller_ID from SELLER where Seller_ID =?
 Snapshot select: select sellerimpl_.Seller_ID, sellerimpl_.SellerName as SellerNa2_3_, sellerimpl_.Country as Country3_3_, sellerimpl_.CreateDate as CreateDa4_3_, sellerimpl_.Star as Star5_3_ from SELLER sellerimpl_ where sellerimpl_.Seller_ID=?
 Insert 0: insert into SELLER (SellerName, Country, CreateDate, Star, Seller_ID) values (?, ?, ?, ?, ?)
 Update 0: update SELLER set SellerName=?, Country=?, CreateDate=?, Star=? where Seller_ID=?
 Delete 0: delete from SELLER where Seller_ID=?
 Identity insert: insert into SELLER (SellerName, Country, CreateDate, Star) values (?, ?, ?, ?)
Static select for entity com.ebay.domain.user.User [NONE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [UPGRADE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [UPGRADE_NOWAIT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [FORCE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_READ]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? lock in share mode
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_WRITE]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [PESSIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=? for update
Static select for entity com.ebay.domain.user.User [OPTIMISTIC]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.user.User [OPTIMISTIC_FORCE_INCREMENT]: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.user.User: select user0_.USER_ID as USER1_4_0_, user0_.PassWord as PassWord2_4_0_, user0_.UserName as UserName3_4_0_ from User user0_ where user0_.USER_ID=?
Static select for entity com.ebay.domain.item.ItemDto [NONE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [UPGRADE_NOWAIT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [FORCE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_READ]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? lock in share mode
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_WRITE]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [PESSIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=? for update
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.item.ItemDto [OPTIMISTIC_FORCE_INCREMENT]: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_MERGE on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.item.ItemDto: select itemdto0_.Id as Id1_1_0_, itemdto0_.country as country2_1_0_, itemdto0_.galleryURL as galleryU3_1_0_, itemdto0_.ItemId as ItemId4_1_0_, itemdto0_.keyWords as keyWords5_1_0_, itemdto0_.price as price6_1_0_, itemdto0_.sellCount as sellCoun7_1_0_, itemdto0_.title as title8_1_0_, itemdto0_.viewItemURL as viewItem9_1_0_ from ItemDto itemdto0_ where itemdto0_.Id=?
Static select for entity com.ebay.domain.customer.CustomerImpl [NONE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [UPGRADE_NOWAIT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [FORCE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_READ]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? lock in share mode
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_WRITE]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [PESSIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=? for update
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.customer.CustomerImpl [OPTIMISTIC_FORCE_INCREMENT]: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.customer.CustomerImpl: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_0_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_0_, customerim0_.STAR as STAR3_5_0_ from customer customerim0_ where customerim0_.CUSTOMER_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [NONE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [UPGRADE_NOWAIT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [FORCE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_READ]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? lock in share mode
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_WRITE]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [PESSIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=? for update
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.feedback.FeedBack [OPTIMISTIC_FORCE_INCREMENT]: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.feedback.FeedBack: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_0_, feedback0_.ATTITUDE as ATTITUDE2_0_0_, feedback0_.COMMENT as COMMENT3_0_0_, feedback0_.Feed_Date as Feed4_0_0_, feedback0_.ITEM_ID as ITEM5_0_0_, feedback0_.ITEM_Name as ITEM6_0_0_, feedback0_.PRICE as PRICE7_0_0_, feedback0_.Seller as Seller8_0_0_, feedback0_.STAR_LEVEL as STAR9_0_0_ from FEEDBACK feedback0_ where feedback0_.FEEDBACK_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [NONE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [UPGRADE_NOWAIT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [FORCE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_READ]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_WRITE]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [PESSIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=? for update
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.RecentFeedbackratings [OPTIMISTIC_FORCE_INCREMENT]: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.RecentFeedbackratings: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_0_, recentfeed0_.one_Negative as one2_2_0_, recentfeed0_.one_Neutral as one3_2_0_, recentfeed0_.one_Positive as one4_2_0_, recentfeed0_.SellerName as SellerNa5_2_0_, recentfeed0_.six_Negative as six6_2_0_, recentfeed0_.six_Neutral as six7_2_0_, recentfeed0_.six_Positive as six8_2_0_, recentfeed0_.twe_Negative as twe9_2_0_, recentfeed0_.twe_Neutral as twe10_2_0_, recentfeed0_.twe_Positive as twe11_2_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.RecentFeedRate_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [NONE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [UPGRADE_NOWAIT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [FORCE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_READ]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? lock in share mode
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_WRITE]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [PESSIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=? for update
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for entity com.ebay.domain.seller.SellerImpl [OPTIMISTIC_FORCE_INCREMENT]: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_MERGE on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Static select for action ACTION_REFRESH on entity com.ebay.domain.seller.SellerImpl: select sellerimpl0_.Seller_ID as Seller1_3_0_, sellerimpl0_.SellerName as SellerNa2_3_0_, sellerimpl0_.Country as Country3_3_0_, sellerimpl0_.CreateDate as CreateDa4_3_0_, sellerimpl0_.Star as Star5_3_0_ from SELLER sellerimpl0_ where sellerimpl0_.Seller_ID=?
Registering SessionFactory: cf50a0e1-e534-4bf2-bc24-b2242cfd1d40 (<unnamed>)
Not binding SessionFactory to JNDI, no JNDI name configured
Instantiated session factory
HHH000228: Running hbm2ddl schema update
HHH000102: Fetching database metadata
HHH000396: Updating schema
Processing hbm.xml files
Process annotated classes
Processing fk mappings (*ToOne and JoinedSubclass)
Processing extends queue
Processing extends queue
Processing collection mappings
Processing native query and ResultSetMapping mappings
Processing association property references
Creating tables' unique integer identifiers
Processing foreign key constraints
HHH000261: Table found: ebay.feedback
HHH000037: Columns: [attitude, price, item_name, item_id, feed_date, feedback_id, comment, seller, star_level]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.itemdto
HHH000037: Columns: [id, viewitemurl, title, price, keywords, galleryurl, sellcount, itemid, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.recentfeedbackratings
HHH000037: Columns: [six_positive, twe_neutral, one_neutral, twe_negative, sellername, twe_positive, six_negative, six_neutral, recentfeedrate_id, one_positive, one_negative]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.seller
HHH000037: Columns: [star, createdate, sellername, seller_id, country]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.user
HHH000037: Columns: [username, user_id, password]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
HHH000261: Table found: ebay.customer
HHH000037: Columns: [star, customer_name, customer_id]
HHH000108: Foreign keys: []
HHH000126: Indexes: [primary]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
Setting dialect [org.hibernate.dialect.MySQL5Dialect]
HHH000232: Schema update complete
Checking 28 named HQL queries
Checking named query: WEEK_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'WeekSellInfo'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'WEEKDAY'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'WEEKDAY'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) WeekSellInfo ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( WEEKDAY ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.WeekSellInfo,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'WeekSellInfo' {originalText=WeekSellInfo}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@48abc}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'WEEKDAY' {originalText=WEEKDAY}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.WeekSellInfo(feedback.sellername,WEEKDAY(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by WEEKDAY(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, weekday(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by weekday(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECT_MAXPRICEDTO
parse() - HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select max(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select max(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: DAY_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'DaySellDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'DAYOFMONTH'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellername'
    |     \-[EQ] Node: '='
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'months'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'DAYOFMONTH'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) DaySellDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ? ) ) ) ( group ( ( DAYOFMONTH ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.DaySellDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'DaySellDto' {originalText=DaySellDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[METHOD_CALL] MethodNode: '('
    |        |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |        |  \-[EXPR_LIST] SqlNode: 'exprList'
    |        |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=months, expectedType=org.hibernate.type.IntegerType@48abc}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'DAYOFMONTH' {originalText=DAYOFMONTH}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.DaySellDto(feedback.sellername,DAYOFMONTH(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and Month(feedback.date)=:months group by DAYOFMONTH(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, dayofmonth(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and month(feedback0_.Feed_Date)=? group by dayofmonth(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_AllDays
parse() - HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[MINUS] Node: '-'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'TO_DAYS'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[AGGREGATE] Node: 'max'
    |        |        \-[IDENT] Node: 'Feed_Date'
    |        \-[METHOD_CALL] Node: '('
    |           +-[IDENT] Node: 'TO_DAYS'
    |           \-[EXPR_LIST] Node: 'exprList'
    |              \-[AGGREGATE] Node: 'min'
    |                 \-[IDENT] Node: 'Feed_Date'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( - ( ( TO_DAYS ( exprList ( max Feed_Date ) ) ) ( ( TO_DAYS ( exprList ( min Feed_Date ) ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[MINUS] BinaryArithmeticOperatorNode: '-' {dataType=org.hibernate.type.LongType@1292965}
    |  |  +-[METHOD_CALL] MethodNode: '('
    |  |  |  +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |  |  \-[EXPR_LIST] SqlNode: 'exprList'
    |  |  |     \-[AGGREGATE] AggregateNode: 'max'
    |  |  |        \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  |  \-[METHOD_CALL] MethodNode: '('
    |  |     +-[METHOD_NAME] IdentNode: 'TO_DAYS' {originalText=TO_DAYS}
    |  |     \-[EXPR_LIST] SqlNode: 'exprList'
    |  |        \-[AGGREGATE] AggregateNode: 'min'
    |  |           \-[IDENT] IdentNode: 'Feed_Date' {originalText=Feed_Date}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select TO_DAYS(max(Feed_Date))-TO_DAYS(min(Feed_Date)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select to_days(max(Feed_Date))-to_days(min(Feed_Date)) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SPECIAL_MIN_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'min'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( min ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'min'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select min(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select min(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: KMEANS_MAX
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'max'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@10dbbc9}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price >:max
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: KMEANS_BETWEEN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
Keyword  'max' is being interpreted as an identifier due to: expecting IDENT, found 'max'
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[AND] Node: 'and'
          |  +-[EQ] Node: '='
          |  |  +-[DOT] Node: '.'
          |  |  |  +-[IDENT] Node: 'feedback'
          |  |  |  \-[IDENT] Node: 'sellername'
          |  |  \-[COLON] Node: ':'
          |  |     \-[IDENT] Node: 'sellername'
          |  \-[LT] Node: '<'
          |     +-[IDENT] Node: 'price'
          |     \-[COLON] Node: ':'
          |        \-[WEIRD_IDENT] Node: 'max'
          \-[GT] Node: '>'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ( > ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[AND] SqlNode: 'and'
          |  +-[EQ] BinaryLogicOperatorNode: '='
          |  |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
          |  \-[LT] BinaryLogicOperatorNode: '<'
          |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |     |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
          |     \-[NAMED_PARAM] ParameterNode: '?' {name=max, expectedType=org.hibernate.type.DoubleType@10dbbc9}
          \-[GT] BinaryLogicOperatorNode: '>'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@10dbbc9}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:max and price >:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<? and feedback0_.PRICE>?
throwQueryException() : no errors
Checking named query: SELECT_AvgPrice
parse() - HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'avg'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( avg ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'avg'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select avg(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select avg(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: List_FeedBack
parse() - HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  \-[FROM] Node: 'from'
    |     \-[RANGE] Node: 'RANGE'
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'FeedBack'
    |        \-[ALIAS] Node: 'feedback'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Derived SELECT clause created.
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{derived select clause}'
    |  +-[SELECT_EXPR] SelectExpressionImpl: 'feedback0_.FEEDBACK_ID as FEEDBACK1_0_' {FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}}
    |  \-[SQL_TOKEN] SqlFragment: 'feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName
SQL: select feedback0_.FEEDBACK_ID as FEEDBACK1_0_, feedback0_.ATTITUDE as ATTITUDE2_0_, feedback0_.COMMENT as COMMENT3_0_, feedback0_.Feed_Date as Feed4_0_, feedback0_.ITEM_ID as ITEM5_0_, feedback0_.ITEM_Name as ITEM6_0_, feedback0_.PRICE as PRICE7_0_, feedback0_.Seller as Seller8_0_, feedback0_.STAR_LEVEL as STAR9_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECTSELLER_BY_SELLERNAME
parse() - HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'seller'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@15b74a5
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} sellerimpl0_.Seller_ID ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID as Seller1_3_' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
    |  \-[SQL_TOKEN] SqlFragment: 'sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select seller from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select sellerimpl0_.Seller_ID as Seller1_3_, sellerimpl0_.SellerName as SellerNa2_3_, sellerimpl0_.Country as Country3_3_, sellerimpl0_.CreateDate as CreateDa4_3_, sellerimpl0_.Star as Star5_3_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@15b74a5
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName=:userName
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: SELECT_RECOMENDPRICE
parse() - HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'RecomendPrice'
    |        +-[AGGREGATE] Node: 'min'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        +-[AGGREGATE] Node: 'avg'
    |        |  \-[DOT] Node: '.'
    |        |     +-[IDENT] Node: 'dto'
    |        |     \-[IDENT] Node: 'price'
    |        \-[AGGREGATE] Node: 'max'
    |           \-[DOT] Node: '.'
    |              +-[IDENT] Node: 'dto'
    |              \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) RecomendPrice ) ( min ( itemdto0_.price itemdto0_.Id price ) ) ( avg ( itemdto0_.price itemdto0_.Id price ) ) ( max ( itemdto0_.price itemdto0_.Id price ) ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.RecomendPrice,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'RecomendPrice' {originalText=RecomendPrice}
    |     +-[AGGREGATE] AggregateNode: 'min'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[AGGREGATE] AggregateNode: 'avg'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'max'
    |     |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |     |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.RecomendPrice(min(dto.price),avg(dto.price),max(dto.price)) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_, avg(itemdto0_.price) as col_1_0_, max(itemdto0_.price) as col_2_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_ITEMS
parse() - HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select count(*) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: K_MEANS_PRICE
parse() - HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'price'
    |        |  \-[IDENT] Node: 'PriceDot'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'price'
    |        \-[COUNT] Node: 'count'
    |           \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[IDENT] Node: 'price'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : feedback.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) price ) PriceDot ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ( count * ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( feedback0_.PRICE {synthetic-alias} price ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price.PriceDot,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.price,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     |  \-[IDENT] IdentNode: 'PriceDot' {originalText=PriceDot}
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[COUNT] CountNode: 'count'
    |     |  \-[ROW_STAR] SqlNode: '*'
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
    \-[GROUP] SqlNode: 'group'
       \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          \-[IDENT] IdentNode: 'price' {originalText=price}

throwQueryException() : no errors
HQL: select new com.ebay.domain.price.PriceDot(feedback.price,count(*)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by price
SQL: select feedback0_.PRICE as col_0_0_, count(*) as col_1_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.PRICE
throwQueryException() : no errors
Checking named query: SELECT_MINPRICEDTO
parse() - HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'min'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'dto'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : dto.price -> itemdto0_.price
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( min ( itemdto0_.price itemdto0_.Id price ) ) ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'min'
    |  |  \-[DOT] DotNode: 'itemdto0_.price' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=dto.price,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
    |  |     +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select min(dto.price) from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select min(itemdto0_.price) as col_0_0_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SELECT_CUSTOMERS
parse() - HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
--- HQL AST ---
 \-[QUERY] Node: 'query'
    \-[SELECT_FROM] Node: 'SELECT_FROM'
       +-[FROM] Node: 'from'
       |  \-[RANGE] Node: 'RANGE'
       |     +-[DOT] Node: '.'
       |     |  +-[DOT] Node: '.'
       |     |  |  +-[DOT] Node: '.'
       |     |  |  |  +-[DOT] Node: '.'
       |     |  |  |  |  +-[IDENT] Node: 'com'
       |     |  |  |  |  \-[IDENT] Node: 'ebay'
       |     |  |  |  \-[IDENT] Node: 'domain'
       |     |  |  \-[IDENT] Node: 'customer'
       |     |  \-[IDENT] Node: 'CustomerImpl'
       |     \-[ALIAS] Node: 'customer'
       \-[SELECT] Node: 'select'
          \-[IDENT] Node: 'customer'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.customer.CustomerImpl (customer) -> customerim0_
Resolved : customer -> customerim0_.CUSTOMER_ID
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} customerim0_.CUSTOMER_ID ) ( FromClause{level=1} customer customerim0_ ) )
Using FROM fragment [customer customerim0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (customer)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'customerim0_.CUSTOMER_ID as CUSTOMER1_5_' {alias=customer, className=com.ebay.domain.customer.CustomerImpl, tableAlias=customerim0_}
    |  \-[SQL_TOKEN] SqlFragment: 'customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_'
    \-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[customer], fromElementByTableAlias=[customerim0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
       \-[FROM_FRAGMENT] FromElement: 'customer customerim0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=customer,role=null,tableName=customer,tableAlias=customerim0_,origin=null,columns={,className=com.ebay.domain.customer.CustomerImpl}}

throwQueryException() : no errors
HQL: select customer from com.ebay.domain.customer.CustomerImpl customer
SQL: select customerim0_.CUSTOMER_ID as CUSTOMER1_5_, customerim0_.CUSTOMER_NAME as CUSTOMER2_5_, customerim0_.STAR as STAR3_5_ from customer customerim0_
throwQueryException() : no errors
Checking named query: MONTH_SELLINFO
parse() - HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'seller'
    |        |  \-[IDENT] Node: 'SellerInfoDto'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'sellername'
    |        +-[METHOD_CALL] Node: '('
    |        |  +-[IDENT] Node: 'Month'
    |        |  \-[EXPR_LIST] Node: 'exprList'
    |        |     \-[DOT] Node: '.'
    |        |        +-[IDENT] Node: 'feedback'
    |        |        \-[IDENT] Node: 'date'
    |        \-[AGGREGATE] Node: 'sum'
    |           \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellername'
    \-[GROUP] Node: 'group'
       \-[METHOD_CALL] Node: '('
          +-[IDENT] Node: 'Month'
          \-[EXPR_LIST] Node: 'exprList'
             \-[DOT] Node: '.'
                +-[IDENT] Node: 'feedback'
                \-[IDENT] Node: 'date'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : date -> org.hibernate.type.TimestampType@172ef50
Resolved : feedback.date -> feedback0_.Feed_Date
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) seller ) SellerInfoDto ) ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( group ( ( Month ( exprList ( feedback0_.Feed_Date feedback0_.FEEDBACK_ID date ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller.SellerInfoDto,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.seller,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'seller' {originalText=seller}
    |     |  \-[IDENT] IdentNode: 'SellerInfoDto' {originalText=SellerInfoDto}
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[METHOD_CALL] MethodNode: '('
    |     |  +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
    |     |  \-[EXPR_LIST] SqlNode: 'exprList'
    |     |     \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |        +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |        \-[IDENT] IdentNode: 'date' {originalText=date}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[AGGREGATE] AggregateNode: 'sum'
    |     |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |     |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
    \-[GROUP] SqlNode: 'group'
       \-[METHOD_CALL] MethodNode: '('
          +-[METHOD_NAME] IdentNode: 'Month' {originalText=Month}
          \-[EXPR_LIST] SqlNode: 'exprList'
             \-[DOT] DotNode: 'feedback0_.Feed_Date' {propertyName=date,dereferenceType=ALL,propertyPath=date,path=feedback.date,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
                \-[IDENT] IdentNode: 'date' {originalText=date}

throwQueryException() : no errors
HQL: select new com.ebay.domain.seller.SellerInfoDto(feedback.sellername,Month(feedback.date),sum(price)) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername group by Month(feedback.date)
SQL: select feedback0_.Seller as col_0_0_, month(feedback0_.Feed_Date) as col_1_0_, sum(feedback0_.PRICE) as col_2_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by month(feedback0_.Feed_Date)
throwQueryException() : no errors
Checking named query: KMEANS_MIN
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
Keyword  'min' is being interpreted as an identifier due to: expecting IDENT, found 'min'
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'feedback'
          |  |  \-[IDENT] Node: 'sellername'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'sellername'
          \-[LT] Node: '<'
             +-[IDENT] Node: 'price'
             \-[COLON] Node: ':'
                \-[WEIRD_IDENT] Node: 'min'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( < ( feedback0_.PRICE {synthetic-alias} price ) ? ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}
          \-[LT] BinaryLogicOperatorNode: '<'
             +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |  \-[IDENT] IdentNode: 'price' {originalText=price}
             \-[NAMED_PARAM] ParameterNode: '?' {name=min, expectedType=org.hibernate.type.DoubleType@10dbbc9}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername and price <:min
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.PRICE<?
throwQueryException() : no errors
Checking named query: SELECT_RATES
parse() - HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'rate'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@15b74a5
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} recentfeed0_.RecentFeedRate_ID ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID as RecentFe1_2_' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
    |  \-[SQL_TOKEN] SqlFragment: 'recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select rate from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select recentfeed0_.RecentFeedRate_ID as RecentFe1_2_, recentfeed0_.one_Negative as one2_2_, recentfeed0_.one_Neutral as one3_2_, recentfeed0_.one_Positive as one4_2_, recentfeed0_.SellerName as SellerNa5_2_, recentfeed0_.six_Negative as six6_2_, recentfeed0_.six_Neutral as six7_2_, recentfeed0_.six_Positive as six8_2_, recentfeed0_.twe_Negative as twe9_2_, recentfeed0_.twe_Neutral as twe10_2_, recentfeed0_.twe_Positive as twe11_2_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SELLERNAME
parse() - HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'SellerImpl'
    |  |     \-[ALIAS] Node: 'seller'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'seller'
          |  \-[IDENT] Node: 'SellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.SellerImpl (seller) -> sellerimpl0_
Resolved : seller -> sellerimpl0_.Seller_ID
getDataType() : SellerName -> org.hibernate.type.StringType@15b74a5
Resolved : seller.SellerName -> sellerimpl0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} SELLER sellerimpl0_ ) ( where ( = ( sellerimpl0_.SellerName sellerimpl0_.Seller_ID SellerName ) ? ) ) )
Using FROM fragment [SELLER sellerimpl0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (SELLER)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[seller], fromElementByTableAlias=[sellerimpl0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'SELLER sellerimpl0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=seller,role=null,tableName=SELLER,tableAlias=sellerimpl0_,origin=null,columns={,className=com.ebay.domain.seller.SellerImpl}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'sellerimpl0_.SellerName' {propertyName=SellerName,dereferenceType=ALL,propertyPath=SellerName,path=seller.SellerName,tableAlias=sellerimpl0_,className=com.ebay.domain.seller.SellerImpl,classAlias=seller}
          |  +-[ALIAS_REF] IdentNode: 'sellerimpl0_.Seller_ID' {alias=seller, className=com.ebay.domain.seller.SellerImpl, tableAlias=sellerimpl0_}
          |  \-[IDENT] IdentNode: 'SellerName' {originalText=SellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.SellerImpl seller where seller.SellerName=:sellerName
SQL: select count(*) as col_0_0_ from SELLER sellerimpl0_ where sellerimpl0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_SUCCESSSELL
parse() - HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    +-[WHERE] Node: 'where'
    |  \-[AND] Node: 'and'
    |     +-[EQ] Node: '='
    |     |  +-[DOT] Node: '.'
    |     |  |  +-[IDENT] Node: 'feedback'
    |     |  |  \-[IDENT] Node: 'sellername'
    |     |  \-[COLON] Node: ':'
    |     |     \-[IDENT] Node: 'sellerName'
    |     \-[EQ] Node: '='
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'attitude'
    |        \-[COLON] Node: ':'
    |           \-[IDENT] Node: 'attitude'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : attitude -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.attitude -> feedback0_.ATTITUDE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( and ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ( = ( feedback0_.ATTITUDE feedback0_.FEEDBACK_ID attitude ) ? ) ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[AND] SqlNode: 'and'
    |     +-[EQ] BinaryLogicOperatorNode: '='
    |     |  +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     |  \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}
    |     \-[EQ] BinaryLogicOperatorNode: '='
    |        +-[DOT] DotNode: 'feedback0_.ATTITUDE' {propertyName=attitude,dereferenceType=ALL,propertyPath=attitude,path=feedback.attitude,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |        |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |        |  \-[IDENT] IdentNode: 'attitude' {originalText=attitude}
    |        \-[NAMED_PARAM] ParameterNode: '?' {name=attitude, expectedType=org.hibernate.type.StringType@15b74a5}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName and feedback.attitude=:attitude GROUP by feedback.sellername
SQL: select count(*) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? and feedback0_.ATTITUDE=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: GET_PASSWORD_BY_NAME
parse() - HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[DOT] Node: '.'
    |        +-[IDENT] Node: 'user'
    |        \-[IDENT] Node: 'passWord'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'user'
          |  \-[IDENT] Node: 'userName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'userName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@15b74a5
Resolved : user.passWord -> user0_.PassWord
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@15b74a5
Resolved : user.userName -> user0_.UserName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( user0_.PassWord user0_.USER_ID passWord ) ) ( FromClause{level=1} User user0_ ) ( where ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
    |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
    |  |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select user.passWord from com.ebay.domain.user.User user where user.userName=:userName
SQL: select user0_.PassWord as col_0_0_ from User user0_ where user0_.UserName=?
throwQueryException() : no errors
Checking named query: MAX_PRICE
parse() - HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'max'
    |        \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'feedback'
          |  \-[IDENT] Node: 'sellername'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'max'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select max(price ) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername
SQL: select max(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=?
throwQueryException() : no errors
Checking named query: SELECT_RATES_EXITS
parse() - HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'seller'
    |  |     |  \-[IDENT] Node: 'RecentFeedbackratings'
    |  |     \-[ALIAS] Node: 'rate'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'rate'
          |  \-[IDENT] Node: 'sellerName'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'sellerName'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.seller.RecentFeedbackratings (rate) -> recentfeed0_
Resolved : rate -> recentfeed0_.RecentFeedRate_ID
getDataType() : sellerName -> org.hibernate.type.StringType@15b74a5
Resolved : rate.sellerName -> recentfeed0_.SellerName
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} RecentFeedbackratings recentfeed0_ ) ( where ( = ( recentfeed0_.SellerName recentfeed0_.RecentFeedRate_ID sellerName ) ? ) ) )
Using FROM fragment [RecentFeedbackratings recentfeed0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (RecentFeedbackratings)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[rate], fromElementByTableAlias=[recentfeed0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'RecentFeedbackratings recentfeed0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=rate,role=null,tableName=RecentFeedbackratings,tableAlias=recentfeed0_,origin=null,columns={,className=com.ebay.domain.seller.RecentFeedbackratings}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'recentfeed0_.SellerName' {propertyName=sellerName,dereferenceType=ALL,propertyPath=sellerName,path=rate.sellerName,tableAlias=recentfeed0_,className=com.ebay.domain.seller.RecentFeedbackratings,classAlias=rate}
          |  +-[ALIAS_REF] IdentNode: 'recentfeed0_.RecentFeedRate_ID' {alias=rate, className=com.ebay.domain.seller.RecentFeedbackratings, tableAlias=recentfeed0_}
          |  \-[IDENT] IdentNode: 'sellerName' {originalText=sellerName}
          \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.seller.RecentFeedbackratings rate where rate.sellerName=:sellerName
SQL: select count(*) as col_0_0_ from RecentFeedbackratings recentfeed0_ where recentfeed0_.SellerName=?
throwQueryException() : no errors
Checking named query: SELECT_BY_TOTALSELL
parse() - HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[AGGREGATE] Node: 'sum'
    |        \-[IDENT] Node: 'price'
    +-[WHERE] Node: 'where'
    |  \-[EQ] Node: '='
    |     +-[DOT] Node: '.'
    |     |  +-[IDENT] Node: 'feedback'
    |     |  \-[IDENT] Node: 'sellername'
    |     \-[COLON] Node: ':'
    |        \-[IDENT] Node: 'sellerName'
    \-[GROUP] Node: 'GROUP'
       \-[DOT] Node: '.'
          +-[IDENT] Node: 'feedback'
          \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback0_.Seller
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( sum ( feedback0_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ? ) ) ( GROUP ( feedback0_.Seller feedback0_.FEEDBACK_ID sellername ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[AGGREGATE] AggregateNode: 'sum'
    |  |  \-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |  |     +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
    |  |     \-[IDENT] IdentNode: 'price' {originalText=price}
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    +-[WHERE] SqlNode: 'where'
    |  \-[EQ] BinaryLogicOperatorNode: '='
    |     +-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
    |     \-[NAMED_PARAM] ParameterNode: '?' {name=sellerName, expectedType=org.hibernate.type.StringType@15b74a5}
    \-[GROUP] SqlNode: 'GROUP'
       \-[DOT] DotNode: 'feedback0_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
          \-[IDENT] IdentNode: 'sellername' {originalText=sellername}

throwQueryException() : no errors
HQL: select sum(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellerName GROUP by feedback.sellername
SQL: select sum(feedback0_.PRICE) as col_0_0_ from FEEDBACK feedback0_ where feedback0_.Seller=? group by feedback0_.Seller
throwQueryException() : no errors
Checking named query: SELECT_ALLITEMS
parse() - HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'item'
    |  |     |  \-[IDENT] Node: 'ItemDto'
    |  |     \-[ALIAS] Node: 'dto'
    |  \-[SELECT] Node: 'select'
    |     \-[IDENT] Node: 'dto'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[DOT] Node: '.'
          |  +-[IDENT] Node: 'dto'
          |  \-[IDENT] Node: 'keyWords'
          \-[COLON] Node: ':'
             \-[IDENT] Node: 'keyWords'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.item.ItemDto (dto) -> itemdto0_
Resolved : dto -> itemdto0_.Id
Resolved : dto -> itemdto0_.Id
getDataType() : keyWords -> org.hibernate.type.StringType@15b74a5
Resolved : dto.keyWords -> itemdto0_.keyWords
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} itemdto0_.Id ) ( FromClause{level=1} ItemDto itemdto0_ ) ( where ( = ( itemdto0_.keyWords itemdto0_.Id keyWords ) ? ) ) )
Using FROM fragment [ItemDto itemdto0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (ItemDto)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id as Id1_1_' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
    |  \-[SQL_TOKEN] SqlFragment: 'itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[dto], fromElementByTableAlias=[itemdto0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'ItemDto itemdto0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=dto,role=null,tableName=ItemDto,tableAlias=itemdto0_,origin=null,columns={,className=com.ebay.domain.item.ItemDto}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'itemdto0_.keyWords' {propertyName=keyWords,dereferenceType=ALL,propertyPath=keyWords,path=dto.keyWords,tableAlias=itemdto0_,className=com.ebay.domain.item.ItemDto,classAlias=dto}
          |  +-[ALIAS_REF] IdentNode: 'itemdto0_.Id' {alias=dto, className=com.ebay.domain.item.ItemDto, tableAlias=itemdto0_}
          |  \-[IDENT] IdentNode: 'keyWords' {originalText=keyWords}
          \-[NAMED_PARAM] ParameterNode: '?' {name=keyWords, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select dto from com.ebay.domain.item.ItemDto dto where dto.keyWords=:keyWords
SQL: select itemdto0_.Id as Id1_1_, itemdto0_.country as country2_1_, itemdto0_.galleryURL as galleryU3_1_, itemdto0_.ItemId as ItemId4_1_, itemdto0_.keyWords as keyWords5_1_, itemdto0_.price as price6_1_, itemdto0_.sellCount as sellCoun7_1_, itemdto0_.title as title8_1_, itemdto0_.viewItemURL as viewItem9_1_ from ItemDto itemdto0_ where itemdto0_.keyWords=?
throwQueryException() : no errors
Checking named query: SPECIAL_MAX_FEEDBACK
parse() - HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'feedback'
    |  |     |  \-[IDENT] Node: 'FeedBack'
    |  |     \-[ALIAS] Node: 'feedback'
    |  \-[SELECT] Node: 'select'
    |     \-[CONSTRUCTOR] Node: '('
    |        +-[DOT] Node: '.'
    |        |  +-[DOT] Node: '.'
    |        |  |  +-[DOT] Node: '.'
    |        |  |  |  +-[DOT] Node: '.'
    |        |  |  |  |  +-[IDENT] Node: 'com'
    |        |  |  |  |  \-[IDENT] Node: 'ebay'
    |        |  |  |  \-[IDENT] Node: 'domain'
    |        |  |  \-[IDENT] Node: 'item'
    |        |  \-[IDENT] Node: 'Item'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemId'
    |        +-[DOT] Node: '.'
    |        |  +-[IDENT] Node: 'feedback'
    |        |  \-[IDENT] Node: 'itemName'
    |        \-[DOT] Node: '.'
    |           +-[IDENT] Node: 'feedback'
    |           \-[IDENT] Node: 'price'
    \-[WHERE] Node: 'where'
       \-[EQ] Node: '='
          +-[IDENT] Node: 'price'
          \-[QUERY] Node: 'query'
             +-[SELECT_FROM] Node: 'SELECT_FROM'
             |  +-[FROM] Node: 'from'
             |  |  \-[RANGE] Node: 'RANGE'
             |  |     +-[DOT] Node: '.'
             |  |     |  +-[DOT] Node: '.'
             |  |     |  |  +-[DOT] Node: '.'
             |  |     |  |  |  +-[DOT] Node: '.'
             |  |     |  |  |  |  +-[IDENT] Node: 'com'
             |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
             |  |     |  |  |  \-[IDENT] Node: 'domain'
             |  |     |  |  \-[IDENT] Node: 'feedback'
             |  |     |  \-[IDENT] Node: 'FeedBack'
             |  |     \-[ALIAS] Node: 'feedback'
             |  \-[SELECT] Node: 'select'
             |     \-[AGGREGATE] Node: 'max'
             |        \-[IDENT] Node: 'price'
             \-[WHERE] Node: 'where'
                \-[EQ] Node: '='
                   +-[DOT] Node: '.'
                   |  +-[IDENT] Node: 'feedback'
                   |  \-[IDENT] Node: 'sellername'
                   \-[COLON] Node: ':'
                      \-[IDENT] Node: 'sellername'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback0_
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemId -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.itemId -> feedback0_.ITEM_ID
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : itemName -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.itemName -> feedback0_.ITEM_Name
Resolved : feedback -> feedback0_.FEEDBACK_ID
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : feedback.price -> feedback0_.PRICE
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback0_.PRICE
select << begin [level=2, statement=select]
FromClause{level=2} : com.ebay.domain.feedback.FeedBack (feedback) -> feedback1_
Resolved : {synthetic-alias} -> {synthetic-alias}
getDataType() : price -> org.hibernate.type.DoubleType@10dbbc9
Resolved : {synthetic-alias}.price -> feedback1_.PRICE
Resolved : feedback -> feedback1_.FEEDBACK_ID
getDataType() : sellername -> org.hibernate.type.StringType@15b74a5
Resolved : feedback.sellername -> feedback1_.Seller
select : finishing up [level=2, statement=select]
processQuery() :  ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) )
Using FROM fragment [FEEDBACK feedback1_]
select >> end [level=2, statement=select]
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( ( ( . ( . ( . ( . com ebay ) domain ) item ) Item ) ( feedback0_.ITEM_ID feedback0_.FEEDBACK_ID itemId ) ( feedback0_.ITEM_Name feedback0_.FEEDBACK_ID itemName ) ( feedback0_.PRICE feedback0_.FEEDBACK_ID price ) ) ) ( FromClause{level=1} FEEDBACK feedback0_ ) ( where ( = ( feedback0_.PRICE {synthetic-alias} price ) ( SELECT ( {select clause} ( max ( feedback1_.PRICE {synthetic-alias} price ) ) ) ( FromClause{level=2} FEEDBACK feedback1_ ) ( where ( = ( feedback1_.Seller feedback1_.FEEDBACK_ID sellername ) ? ) ) ) ) ) )
Using FROM fragment [FEEDBACK feedback0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  \-[CONSTRUCTOR] ConstructorNode: '('
    |     +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item.Item,no from element}
    |     |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain.item,no from element}
    |     |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay.domain,no from element}
    |     |  |  |  +-[DOT] DotNode: '.' {propertyName=null,dereferenceType=0,propertyPath=null,path=com.ebay,no from element}
    |     |  |  |  |  +-[IDENT] IdentNode: 'com' {originalText=com}
    |     |  |  |  |  \-[IDENT] IdentNode: 'ebay' {originalText=ebay}
    |     |  |  |  \-[IDENT] IdentNode: 'domain' {originalText=domain}
    |     |  |  \-[IDENT] IdentNode: 'item' {originalText=item}
    |     |  \-[IDENT] IdentNode: 'Item' {originalText=Item}
    |     +-[DOT] DotNode: 'feedback0_.ITEM_ID' {propertyName=itemId,dereferenceType=ALL,propertyPath=itemId,path=feedback.itemId,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemId' {originalText=itemId}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    |     +-[DOT] DotNode: 'feedback0_.ITEM_Name' {propertyName=itemName,dereferenceType=ALL,propertyPath=itemName,path=feedback.itemName,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'itemName' {originalText=itemName}
    |     +-[SELECT_COLUMNS] SqlNode: ' as col_1_0_'
    |     +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path=feedback.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
    |     |  +-[ALIAS_REF] IdentNode: 'feedback0_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback0_}
    |     |  \-[IDENT] IdentNode: 'price' {originalText=price}
    |     \-[SELECT_COLUMNS] SqlNode: ' as col_2_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback0_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
    \-[WHERE] SqlNode: 'where'
       \-[EQ] BinaryLogicOperatorNode: '='
          +-[DOT] DotNode: 'feedback0_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback0_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
          |  +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
          |  \-[IDENT] IdentNode: 'price' {originalText=price}
          \-[SELECT] QueryNode: 'SELECT'  querySpaces (FEEDBACK)
             +-[SELECT_CLAUSE] SelectClause: '{select clause}'
             |  \-[AGGREGATE] AggregateNode: 'max'
             |     \-[DOT] DotNode: 'feedback1_.PRICE' {propertyName=price,dereferenceType=ALL,propertyPath=price,path={synthetic-alias}.price,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
             |        +-[IDENT] IdentNode: '{synthetic-alias}' {originalText={synthetic-alias}}
             |        \-[IDENT] IdentNode: 'price' {originalText=price}
             +-[FROM] FromClause: 'from' FromClause{level=2, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[feedback], fromElementByTableAlias=[feedback1_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
             |  \-[FROM_FRAGMENT] FromElement: 'FEEDBACK feedback1_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=feedback,role=null,tableName=FEEDBACK,tableAlias=feedback1_,origin=null,columns={,className=com.ebay.domain.feedback.FeedBack}}
             \-[WHERE] SqlNode: 'where'
                \-[EQ] BinaryLogicOperatorNode: '='
                   +-[DOT] DotNode: 'feedback1_.Seller' {propertyName=sellername,dereferenceType=ALL,propertyPath=sellername,path=feedback.sellername,tableAlias=feedback1_,className=com.ebay.domain.feedback.FeedBack,classAlias=feedback}
                   |  +-[ALIAS_REF] IdentNode: 'feedback1_.FEEDBACK_ID' {alias=feedback, className=com.ebay.domain.feedback.FeedBack, tableAlias=feedback1_}
                   |  \-[IDENT] IdentNode: 'sellername' {originalText=sellername}
                   \-[NAMED_PARAM] ParameterNode: '?' {name=sellername, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select new com.ebay.domain.item.Item(feedback.itemId,feedback.itemName ,feedback.price) from com.ebay.domain.feedback.FeedBack feedback where price =(select max(price) from com.ebay.domain.feedback.FeedBack feedback where feedback.sellername=:sellername )
SQL: select feedback0_.ITEM_ID as col_0_0_, feedback0_.ITEM_Name as col_1_0_, feedback0_.PRICE as col_2_0_ from FEEDBACK feedback0_ where feedback0_.PRICE=(select max(feedback1_.PRICE) from FEEDBACK feedback1_ where feedback1_.Seller=?)
throwQueryException() : no errors
Checking named query: SELECT_BY_NAME_PASSWORD
parse() - HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
--- HQL AST ---
 \-[QUERY] Node: 'query'
    +-[SELECT_FROM] Node: 'SELECT_FROM'
    |  +-[FROM] Node: 'from'
    |  |  \-[RANGE] Node: 'RANGE'
    |  |     +-[DOT] Node: '.'
    |  |     |  +-[DOT] Node: '.'
    |  |     |  |  +-[DOT] Node: '.'
    |  |     |  |  |  +-[DOT] Node: '.'
    |  |     |  |  |  |  +-[IDENT] Node: 'com'
    |  |     |  |  |  |  \-[IDENT] Node: 'ebay'
    |  |     |  |  |  \-[IDENT] Node: 'domain'
    |  |     |  |  \-[IDENT] Node: 'user'
    |  |     |  \-[IDENT] Node: 'User'
    |  |     \-[ALIAS] Node: 'user'
    |  \-[SELECT] Node: 'select'
    |     \-[COUNT] Node: 'count'
    |        \-[ROW_STAR] Node: '*'
    \-[WHERE] Node: 'where'
       \-[AND] Node: 'and'
          +-[EQ] Node: '='
          |  +-[DOT] Node: '.'
          |  |  +-[IDENT] Node: 'user'
          |  |  \-[IDENT] Node: 'userName'
          |  \-[COLON] Node: ':'
          |     \-[IDENT] Node: 'userName'
          \-[EQ] Node: '='
             +-[DOT] Node: '.'
             |  +-[IDENT] Node: 'user'
             |  \-[IDENT] Node: 'passWord'
             \-[COLON] Node: ':'
                \-[IDENT] Node: 'passWord'

throwQueryException() : no errors
select << begin [level=1, statement=select]
FromClause{level=1} : com.ebay.domain.user.User (user) -> user0_
Resolved : user -> user0_.USER_ID
getDataType() : userName -> org.hibernate.type.StringType@15b74a5
Resolved : user.userName -> user0_.UserName
Resolved : user -> user0_.USER_ID
getDataType() : passWord -> org.hibernate.type.StringType@15b74a5
Resolved : user.passWord -> user0_.PassWord
select : finishing up [level=1, statement=select]
processQuery() :  ( SELECT ( {select clause} ( count * ) ) ( FromClause{level=1} User user0_ ) ( where ( and ( = ( user0_.UserName user0_.USER_ID userName ) ? ) ( = ( user0_.PassWord user0_.USER_ID passWord ) ? ) ) ) )
Using FROM fragment [User user0_]
select >> end [level=1, statement=select]
--- SQL AST ---
 \-[SELECT] QueryNode: 'SELECT'  querySpaces (User)
    +-[SELECT_CLAUSE] SelectClause: '{select clause}'
    |  +-[COUNT] CountNode: 'count'
    |  |  \-[ROW_STAR] SqlNode: '*'
    |  \-[SELECT_COLUMNS] SqlNode: ' as col_0_0_'
    +-[FROM] FromClause: 'from' FromClause{level=1, fromElementCounter=1, fromElements=1, fromElementByClassAlias=[user], fromElementByTableAlias=[user0_], fromElementsByPath=[], collectionJoinFromElementsByPath=[], impliedElements=[]}
    |  \-[FROM_FRAGMENT] FromElement: 'User user0_' FromElement{explicit,not a collection join,not a fetch join,fetch non-lazy properties,classAlias=user,role=null,tableName=User,tableAlias=user0_,origin=null,columns={,className=com.ebay.domain.user.User}}
    \-[WHERE] SqlNode: 'where'
       \-[AND] SqlNode: 'and'
          +-[EQ] BinaryLogicOperatorNode: '='
          |  +-[DOT] DotNode: 'user0_.UserName' {propertyName=userName,dereferenceType=ALL,propertyPath=userName,path=user.userName,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
          |  |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
          |  |  \-[IDENT] IdentNode: 'userName' {originalText=userName}
          |  \-[NAMED_PARAM] ParameterNode: '?' {name=userName, expectedType=org.hibernate.type.StringType@15b74a5}
          \-[EQ] BinaryLogicOperatorNode: '='
             +-[DOT] DotNode: 'user0_.PassWord' {propertyName=passWord,dereferenceType=ALL,propertyPath=passWord,path=user.passWord,tableAlias=user0_,className=com.ebay.domain.user.User,classAlias=user}
             |  +-[ALIAS_REF] IdentNode: 'user0_.USER_ID' {alias=user, className=com.ebay.domain.user.User, tableAlias=user0_}
             |  \-[IDENT] IdentNode: 'passWord' {originalText=passWord}
             \-[NAMED_PARAM] ParameterNode: '?' {name=passWord, expectedType=org.hibernate.type.StringType@15b74a5}

throwQueryException() : no errors
HQL: select count(*) from com.ebay.domain.user.User user where user.userName =:userName and user.passWord =:passWord
SQL: select count(*) as col_0_0_ from User user0_ where user0_.UserName=? and user0_.PassWord=?
throwQueryException() : no errors
Checking 0 named SQL queries
Statistics initialized [enabled=false]
Registering EntityManagerFactory: ePU 
HHH000436: Entity manager factory name (ePU) is already registered.  If entity manager will be clustered or passivated, specify a unique value for property 'hibernate.ejb.entitymanager_factory_name'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'entityManagerFactory'
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@15a1f66: defining beans [org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0,competitorcontroller,itemcontroller,loginController,org.springframework.context.annotation.internalConfigurationAnnotationProcessor,org.springframework.context.annotation.internalAutowiredAnnotationProcessor,org.springframework.context.annotation.internalRequiredAnnotationProcessor,org.springframework.context.annotation.internalCommonAnnotationProcessor,org.springframework.context.annotation.internalPersistenceAnnotationProcessor,feedbackService,itemService,sellerService,userService,eCustomerDao,ebayfeedbackdao,ebayitemdao,ebayRatesDao,ebaySellerDao,ebayUserDao,ebayEntityConfiguration,mvcContentNegotiationManager,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0,org.springframework.format.support.FormattingConversionServiceFactoryBean#0,org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0,org.springframework.web.servlet.handler.MappedInterceptor#0,org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0,org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0,org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0,org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping,org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter,org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2,org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3,org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3,org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0,org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0,org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0,org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0,mappingJacksonHttpMessageConverter,eMergedEntityContexts,entityManagerFactory,templateResolver,templateEngine,org.thymeleaf.spring3.view.ThymeleafViewResolver#0,transactionManager,org.springframework.aop.config.internalAutoProxyCreator,org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0,org.springframework.transaction.interceptor.TransactionInterceptor#0,org.springframework.transaction.config.internalTransactionAdvisor,org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor]; parent: org.springframework.beans.factory.support.DefaultListableBeanFactory@11f6c01
Returning cached instance of singleton bean 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0'
Creating shared instance of singleton bean 'competitorcontroller'
Creating instance of bean 'competitorcontroller'
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Registered injected element on class [com.ebay.controller.CompetitorController]: ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Eagerly caching bean 'competitorcontroller' to allow for resolving potential circular references
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.seller.SellerService com.ebay.controller.CompetitorController.sellervice
Creating shared instance of singleton bean 'sellerService'
Creating instance of bean 'sellerService'
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Registered injected element on class [com.ebay.service.seller.SellerServiceImpl]: ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Eagerly caching bean 'sellerService' to allow for resolving potential circular references
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.RatesDao com.ebay.service.seller.SellerServiceImpl.ratesdao
Creating shared instance of singleton bean 'ebayRatesDao'
Creating instance of bean 'ebayRatesDao'
Registered injected element on class [com.ebay.dao.seller.RatesDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Eagerly caching bean 'ebayRatesDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayRatesDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.RatesDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayRatesDao'
Processing injected method of bean 'sellerService': ResourceElement for private com.ebay.dao.seller.SellerDao com.ebay.service.seller.SellerServiceImpl.sellerdao
Creating shared instance of singleton bean 'ebaySellerDao'
Creating instance of bean 'ebaySellerDao'
Registered injected element on class [com.ebay.dao.seller.SellerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Eagerly caching bean 'ebaySellerDao' to allow for resolving potential circular references
Processing injected method of bean 'ebaySellerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.seller.SellerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebaySellerDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddSeller' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'sellerService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.seller.SellerServiceImpl@128b2e6]
Finished creating instance of bean 'sellerService'
Processing injected method of bean 'competitorcontroller': ResourceElement for private com.ebay.service.feedback.FeedbackService com.ebay.controller.CompetitorController.feedbackservice
Creating shared instance of singleton bean 'feedbackService'
Creating instance of bean 'feedbackService'
Registered injected element on class [com.ebay.service.feedback.FeedbackServiceImpl]: ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Eagerly caching bean 'feedbackService' to allow for resolving potential circular references
Processing injected method of bean 'feedbackService': ResourceElement for private com.ebay.dao.feedback.FeedbackDao com.ebay.service.feedback.FeedbackServiceImpl.feedbackdao
Creating shared instance of singleton bean 'ebayfeedbackdao'
Creating instance of bean 'ebayfeedbackdao'
Registered injected element on class [com.ebay.dao.feedback.FeedBackDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Eagerly caching bean 'ebayfeedbackdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayfeedbackdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.feedback.FeedBackDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'AddFeedbacks' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'feedbackService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.feedback.FeedbackServiceImpl@f91fc3]
Finished creating instance of bean 'feedbackService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'competitorcontroller'
Creating shared instance of singleton bean 'itemcontroller'
Creating instance of bean 'itemcontroller'
Registered injected element on class [com.ebay.controller.ItemController]: ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Eagerly caching bean 'itemcontroller' to allow for resolving potential circular references
Processing injected method of bean 'itemcontroller': ResourceElement for private com.ebay.service.item.ItemService com.ebay.controller.ItemController.itemservice
Creating shared instance of singleton bean 'itemService'
Creating instance of bean 'itemService'
Registered injected element on class [com.ebay.service.item.ItemServiceImpl]: ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Eagerly caching bean 'itemService' to allow for resolving potential circular references
Processing injected method of bean 'itemService': ResourceElement for private com.ebay.dao.item.ItemDao com.ebay.service.item.ItemServiceImpl.itemdao
Creating shared instance of singleton bean 'ebayitemdao'
Creating instance of bean 'ebayitemdao'
Registered injected element on class [com.ebay.dao.item.ItemDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Eagerly caching bean 'ebayitemdao' to allow for resolving potential circular references
Processing injected method of bean 'ebayitemdao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.item.ItemDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayitemdao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Adding transactional method 'addItem' with attribute: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''
Creating implicit proxy for bean 'itemService' with 0 common interceptors and 1 specific interceptors
Creating JDK dynamic proxy: target source is SingletonTargetSource for target object [com.ebay.service.item.ItemServiceImpl@1944a11]
Finished creating instance of bean 'itemService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'itemcontroller'
Creating shared instance of singleton bean 'loginController'
Creating instance of bean 'loginController'
Registered injected element on class [com.ebay.controller.LoginController]: ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Eagerly caching bean 'loginController' to allow for resolving potential circular references
Processing injected method of bean 'loginController': ResourceElement for private com.ebay.service.user.UserService com.ebay.controller.LoginController.userservice
Creating shared instance of singleton bean 'userService'
Creating instance of bean 'userService'
Registered injected element on class [com.ebay.service.user.UserServiceImpl]: ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Eagerly caching bean 'userService' to allow for resolving potential circular references
Processing injected method of bean 'userService': ResourceElement for private com.ebay.dao.user.UserDao com.ebay.service.user.UserServiceImpl.userdao
Creating shared instance of singleton bean 'ebayUserDao'
Creating instance of bean 'ebayUserDao'
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Registered injected element on class [com.ebay.dao.user.UserDaoImpl]: ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Eagerly caching bean 'ebayUserDao' to allow for resolving potential circular references
Processing injected method of bean 'ebayUserDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.user.UserDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Processing injected method of bean 'ebayUserDao': ResourceElement for protected com.ebay.common.persistence.EntityConfiguration com.ebay.dao.user.UserDaoImpl.entityConfiguration
Creating shared instance of singleton bean 'ebayEntityConfiguration'
Creating instance of bean 'ebayEntityConfiguration'
Found init method on class [com.ebay.common.persistence.EntityConfiguration]: public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Registered init method on class [com.ebay.common.persistence.EntityConfiguration]: org.springframework.beans.factory.annotation.InitDestroyAnnotationBeanPostProcessor$LifecycleElement@a46c92e
Registered injected element on class [com.ebay.common.persistence.EntityConfiguration]: ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Eagerly caching bean 'ebayEntityConfiguration' to allow for resolving potential circular references
Processing injected method of bean 'ebayEntityConfiguration': ResourceElement for protected java.util.Set com.ebay.common.persistence.EntityConfiguration.mergedEntityContexts
Creating shared instance of singleton bean 'eMergedEntityContexts'
Creating instance of bean 'eMergedEntityContexts'
Eagerly caching bean 'eMergedEntityContexts' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Invoking init method on bean 'ebayEntityConfiguration': public void com.ebay.common.persistence.EntityConfiguration.configureMergedItems()
Initializing new StandardEnvironment
Adding [systemProperties] PropertySource with lowest search precedence
Adding [systemEnvironment] PropertySource with lowest search precedence
Initialized StandardEnvironment with PropertySources [systemProperties,systemEnvironment]
Loading XML bean definitions from class path resource [applicationContext-entity.xml]
Using JAXP provider [com.sun.org.apache.xerces.internal.jaxp.DocumentBuilderFactoryImpl]
Loading schema mappings from [META-INF/spring.schemas]
Loaded schema mappings: {http://www.springframework.org/schema/util/spring-util.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.2.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd=org/springframework/web/servlet/config/spring-mvc-3.1.xsd, http://www.springframework.org/schema/beans/spring-beans-3.1.xsd=org/springframework/beans/factory/xml/spring-beans-3.1.xsd, http://www.springframework.org/schema/task/spring-task.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/cache/spring-cache.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-3.0.xsd=org/springframework/aop/config/spring-aop-3.0.xsd, http://www.springframework.org/schema/task/spring-task-3.1.xsd=org/springframework/scheduling/config/spring-task-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop-2.0.xsd=org/springframework/aop/config/spring-aop-2.0.xsd, http://www.springframework.org/schema/tool/spring-tool-2.5.xsd=org/springframework/beans/factory/xml/spring-tool-2.5.xsd, http://www.springframework.org/schema/beans/spring-beans.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-2.5.xsd=org/springframework/ejb/config/spring-jee-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd=org/springframework/jdbc/config/spring-jdbc-3.1.xsd, http://www.springframework.org/schema/tool/spring-tool-3.1.xsd=org/springframework/beans/factory/xml/spring-tool-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-3.1.xsd=org/springframework/ejb/config/spring-jee-3.1.xsd, http://www.springframework.org/schema/aop/spring-aop.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.2.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/context/spring-context-3.2.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.2.xsd=org/springframework/beans/factory/xml/spring-util-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.0.xsd=org/springframework/beans/factory/xml/spring-beans-2.0.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd=org/springframework/web/servlet/config/spring-mvc-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.2.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.0.xsd=org/springframework/beans/factory/xml/spring-beans-3.0.xsd, http://www.springframework.org/schema/cache/spring-cache-3.2.xsd=org/springframework/cache/config/spring-cache-3.2.xsd, http://www.springframework.org/schema/task/spring-task-3.0.xsd=org/springframework/scheduling/config/spring-task-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-2.5.xsd=org/springframework/transaction/config/spring-tx-2.5.xsd, http://www.springframework.org/schema/context/spring-context-2.5.xsd=org/springframework/context/config/spring-context-2.5.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd=org/springframework/jdbc/config/spring-jdbc-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool-3.0.xsd=org/springframework/beans/factory/xml/spring-tool-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.5.xsd=org/springframework/beans/factory/xml/spring-util-2.5.xsd, http://www.springframework.org/schema/tool/spring-tool-2.0.xsd=org/springframework/beans/factory/xml/spring-tool-2.0.xsd, http://www.springframework.org/schema/tx/spring-tx.xsd=org/springframework/transaction/config/spring-tx-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang.xsd=org/springframework/scripting/config/spring-lang-3.2.xsd, http://www.springframework.org/schema/lang/spring-lang-2.5.xsd=org/springframework/scripting/config/spring-lang-2.5.xsd, http://www.springframework.org/schema/aop/spring-aop-3.2.xsd=org/springframework/aop/config/spring-aop-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee-3.0.xsd=org/springframework/ejb/config/spring-jee-3.0.xsd, http://www.springframework.org/schema/tx/spring-tx-3.1.xsd=org/springframework/transaction/config/spring-tx-3.1.xsd, http://www.springframework.org/schema/jee/spring-jee-2.0.xsd=org/springframework/ejb/config/spring-jee-2.0.xsd, http://www.springframework.org/schema/context/spring-context-3.1.xsd=org/springframework/context/config/spring-context-3.1.xsd, http://www.springframework.org/schema/util/spring-util-3.1.xsd=org/springframework/beans/factory/xml/spring-util-3.1.xsd, http://www.springframework.org/schema/lang/spring-lang-3.1.xsd=org/springframework/scripting/config/spring-lang-3.1.xsd, http://www.springframework.org/schema/cache/spring-cache-3.1.xsd=org/springframework/cache/config/spring-cache-3.1.xsd, http://www.springframework.org/schema/context/spring-context.xsd=org/springframework/context/config/spring-context-3.2.xsd, http://www.springframework.org/schema/jee/spring-jee.xsd=org/springframework/ejb/config/spring-jee-3.2.xsd, http://www.springframework.org/schema/aop/spring-aop-2.5.xsd=org/springframework/aop/config/spring-aop-2.5.xsd, http://www.springframework.org/schema/mvc/spring-mvc.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd=org/springframework/web/servlet/config/spring-mvc-3.2.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-3.2.xsd=org/springframework/beans/factory/xml/spring-beans-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-2.0.xsd=org/springframework/transaction/config/spring-tx-2.0.xsd, http://www.springframework.org/schema/aop/spring-aop-3.1.xsd=org/springframework/aop/config/spring-aop-3.1.xsd, http://www.springframework.org/schema/task/spring-task-3.2.xsd=org/springframework/scheduling/config/spring-task-3.2.xsd, http://www.springframework.org/schema/tx/spring-tx-3.0.xsd=org/springframework/transaction/config/spring-tx-3.0.xsd, http://www.springframework.org/schema/context/spring-context-3.0.xsd=org/springframework/context/config/spring-context-3.0.xsd, http://www.springframework.org/schema/tool/spring-tool.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/util/spring-util-3.0.xsd=org/springframework/beans/factory/xml/spring-util-3.0.xsd, http://www.springframework.org/schema/util/spring-util-2.0.xsd=org/springframework/beans/factory/xml/spring-util-2.0.xsd, http://www.springframework.org/schema/lang/spring-lang-3.0.xsd=org/springframework/scripting/config/spring-lang-3.0.xsd, http://www.springframework.org/schema/lang/spring-lang-2.0.xsd=org/springframework/scripting/config/spring-lang-2.0.xsd, http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd=org/springframework/jdbc/config/spring-jdbc-3.2.xsd, http://www.springframework.org/schema/tool/spring-tool-3.2.xsd=org/springframework/beans/factory/xml/spring-tool-3.2.xsd, http://www.springframework.org/schema/beans/spring-beans-2.5.xsd=org/springframework/beans/factory/xml/spring-beans-2.5.xsd}
Found XML schema [http://www.springframework.org/schema/beans/spring-beans-3.2.xsd] in classpath: org/springframework/beans/factory/xml/spring-beans-3.2.xsd
Loading bean definitions
Refreshing org.springframework.context.support.GenericXmlApplicationContext@8ab663: startup date [Mon Jun 23 23:03:34 CST 2014]; root of context hierarchy
Bean factory for org.springframework.context.support.GenericXmlApplicationContext@8ab663: org.springframework.beans.factory.support.DefaultListableBeanFactory@1daa6f1: defining beans []; root of factory hierarchy
Unable to locate MessageSource with name 'messageSource': using default [org.springframework.context.support.DelegatingMessageSource@27096a]
Unable to locate ApplicationEventMulticaster with name 'applicationEventMulticaster': using default [org.springframework.context.event.SimpleApplicationEventMulticaster@db46a5]
Pre-instantiating singletons in org.springframework.beans.factory.support.DefaultListableBeanFactory@1daa6f1: defining beans []; root of factory hierarchy
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@1fb1df4]
Returning cached instance of singleton bean 'lifecycleProcessor'
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayEntityConfiguration'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'ebayUserDao'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'userService'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'loginController'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalRequiredAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalCommonAnnotationProcessor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor'
Returning cached instance of singleton bean 'feedbackService'
Returning cached instance of singleton bean 'itemService'
Returning cached instance of singleton bean 'sellerService'
Returning cached instance of singleton bean 'userService'
Creating shared instance of singleton bean 'eCustomerDao'
Creating instance of bean 'eCustomerDao'
Registered injected element on class [com.ebay.dao.customer.CustomerDaoImpl]: PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Eagerly caching bean 'eCustomerDao' to allow for resolving potential circular references
Processing injected method of bean 'eCustomerDao': PersistenceElement for protected javax.persistence.EntityManager com.ebay.dao.customer.CustomerDaoImpl.em
Returning cached instance of singleton bean 'entityManagerFactory'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'eCustomerDao'
Returning cached instance of singleton bean 'ebayfeedbackdao'
Returning cached instance of singleton bean 'ebayitemdao'
Returning cached instance of singleton bean 'ebayRatesDao'
Returning cached instance of singleton bean 'ebaySellerDao'
Returning cached instance of singleton bean 'ebayUserDao'
Returning cached instance of singleton bean 'ebayEntityConfiguration'
Creating shared instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean 'mvcContentNegotiationManager'
Eagerly caching bean 'mvcContentNegotiationManager' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mvcContentNegotiationManager'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating instance of bean '(inner bean)'
Creating shared instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Eagerly caching bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)'
Eagerly caching bean 'org.springframework.web.servlet.handler.MappedInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Looking for request mappings in application context: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Mon Jun 23 23:03:33 CST 2014]; parent: Root WebApplicationContext
Mapped "{[/catchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.CompetitorController.CatchSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)
Mapped "{[/selectRates],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.RecentFeedbackratings com.ebay.controller.CompetitorController.selectRates(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectDayInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.DaySellDto> com.ebay.controller.CompetitorController.selectDayInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectPring],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.price.Pring> com.ebay.controller.CompetitorController.getPricing(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectMonthInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.SellerInfoDto> com.ebay.controller.CompetitorController.selectMonthInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectWeekInfo],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.seller.WeekSellInfo> com.ebay.controller.CompetitorController.selectWeekInfo(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectFeedBack],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.feedback.FeedBack> com.ebay.controller.CompetitorController.selectAllFeedBack(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectSingleSeller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.SellerDto com.ebay.controller.CompetitorController.selectDtoSingleSeller(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchCompetitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.seller.Seller com.ebay.controller.CompetitorController.selectCompetitor(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/selectItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.Item> com.ebay.controller.CompetitorController.selectSpecialItems(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/searchItems],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.util.List<com.ebay.domain.item.ItemDto> com.ebay.controller.ItemController.selectItem(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/getRecomendPrices],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public com.ebay.domain.item.RecomendPrice com.ebay.controller.ItemController.selectRprice(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/ebay || /],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.Login(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/login/controller],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.validateLogin(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model,com.ebay.form.UserForm)
Mapped "{[/competitor/competitor],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/product/product],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.product(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/sendemail],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.getEmail(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Mapped "{[/forgetpassword],methods=[],params=[],headers=[],consumes=[],produces=[],custom=[]}" onto public java.lang.String com.ebay.controller.LoginController.forgetPassword(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#1'
Returning cached instance of singleton bean 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#1'
Creating instance of bean '(inner bean)#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#2'
Creating instance of bean '(inner bean)#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#3'
Creating instance of bean '(inner bean)#4'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#4'
Creating instance of bean '(inner bean)#5'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#5'
Creating instance of bean '(inner bean)#6'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#6'
Creating instance of bean '(inner bean)#7'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#7'
Creating instance of bean '(inner bean)#8'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#8'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Looking for controller advice: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Mon Jun 23 23:03:33 CST 2014]; parent: Root WebApplicationContext
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'mvcContentNegotiationManager'
Creating instance of bean '(inner bean)#9'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#9'
Creating instance of bean '(inner bean)#10'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#10'
Creating instance of bean '(inner bean)#11'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#11'
Creating instance of bean '(inner bean)#12'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#12'
Creating instance of bean '(inner bean)#13'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#13'
Creating instance of bean '(inner bean)#14'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#14'
Creating instance of bean '(inner bean)#15'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean '(inner bean)#15'
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Looking for exception mappings: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Mon Jun 23 23:03:33 CST 2014]; parent: Root WebApplicationContext
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Eagerly caching bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Mon Jun 23 23:03:33 CST 2014]; parent: Root WebApplicationContext
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Rejected bean name 'competitorcontroller': no URL paths identified
Rejected bean name 'itemcontroller': no URL paths identified
Rejected bean name 'loginController': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletConfig': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Eagerly caching bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Mapped URL path [/img/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Mapped URL path [/css/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Mapped URL path [/js/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Creating shared instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Eagerly caching bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3' to allow for resolving potential circular references
Invoking afterPropertiesSet() on bean with name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Creating shared instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Eagerly caching bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Mapped URL path [/plugins/**] onto handler 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0'
Returning cached instance of singleton bean 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.MappedInterceptor#0'
Looking for URL mappings in application context: WebApplicationContext for namespace 'dispatcher-servlet': startup date [Mon Jun 23 23:03:33 CST 2014]; parent: Root WebApplicationContext
Rejected bean name 'org.springframework.context.support.PropertySourcesPlaceholderConfigurer#0': no URL paths identified
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/catchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectRates/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectDayInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectPring/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectMonthInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectWeekInfo/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectFeedBack/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectSingleSeller/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/searchCompetitor/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems.*] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'competitorcontroller'
Mapped URL path [/selectItems/] onto handler 'competitorcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/searchItems/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices.*] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'itemcontroller'
Mapped URL path [/getRecomendPrices/] onto handler 'itemcontroller'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/ebay/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Root mapping to handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/login/controller/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/competitor/competitor/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/product/product/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/sendemail/] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword.*] onto handler 'loginController'
Returning cached instance of singleton bean 'loginController'
Mapped URL path [/forgetpassword/] onto handler 'loginController'
Rejected bean name 'org.springframework.context.annotation.internalConfigurationAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalAutowiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalRequiredAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalCommonAnnotationProcessor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.internalPersistenceAnnotationProcessor': no URL paths identified
Rejected bean name 'feedbackService': no URL paths identified
Rejected bean name 'itemService': no URL paths identified
Rejected bean name 'sellerService': no URL paths identified
Rejected bean name 'userService': no URL paths identified
Rejected bean name 'eCustomerDao': no URL paths identified
Rejected bean name 'ebayfeedbackdao': no URL paths identified
Rejected bean name 'ebayitemdao': no URL paths identified
Rejected bean name 'ebayRatesDao': no URL paths identified
Rejected bean name 'ebaySellerDao': no URL paths identified
Rejected bean name 'ebayUserDao': no URL paths identified
Rejected bean name 'ebayEntityConfiguration': no URL paths identified
Rejected bean name 'mvcContentNegotiationManager': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.format.support.FormattingConversionServiceFactoryBean#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.MappedInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.resource.ResourceHttpRequestHandler#3': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3': no URL paths identified
Rejected bean name 'org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0': no URL paths identified
Rejected bean name 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0': no URL paths identified
Rejected bean name 'mappingJacksonHttpMessageConverter': no URL paths identified
Rejected bean name 'eMergedEntityContexts': no URL paths identified
Rejected bean name 'entityManagerFactory': no URL paths identified
Rejected bean name 'templateResolver': no URL paths identified
Rejected bean name 'templateEngine': no URL paths identified
Rejected bean name 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0': no URL paths identified
Rejected bean name 'transactionManager': no URL paths identified
Rejected bean name 'org.springframework.aop.config.internalAutoProxyCreator': no URL paths identified
Rejected bean name 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.interceptor.TransactionInterceptor#0': no URL paths identified
Rejected bean name 'org.springframework.transaction.config.internalTransactionAdvisor': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor': no URL paths identified
Rejected bean name 'environment': no URL paths identified
Rejected bean name 'systemProperties': no URL paths identified
Rejected bean name 'systemEnvironment': no URL paths identified
Rejected bean name 'servletConfig': no URL paths identified
Rejected bean name 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importRegistry': no URL paths identified
Rejected bean name 'messageSource': no URL paths identified
Rejected bean name 'applicationEventMulticaster': no URL paths identified
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Creating shared instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Eagerly caching bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0' to allow for resolving potential circular references
Creating shared instance of singleton bean 'mappingJacksonHttpMessageConverter'
Creating instance of bean 'mappingJacksonHttpMessageConverter'
Eagerly caching bean 'mappingJacksonHttpMessageConverter' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'mappingJacksonHttpMessageConverter'
Returning cached instance of singleton bean 'eMergedEntityContexts'
Returning cached instance of singleton bean 'entityManagerFactory'
Creating shared instance of singleton bean 'templateResolver'
Creating instance of bean 'templateResolver'
Eagerly caching bean 'templateResolver' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateResolver'
Creating shared instance of singleton bean 'templateEngine'
Creating instance of bean 'templateEngine'
Eagerly caching bean 'templateEngine' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateResolver'
Invoking afterPropertiesSet() on bean with name 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'templateEngine'
Creating shared instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Eagerly caching bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'templateEngine'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating shared instance of singleton bean 'transactionManager'
Creating instance of bean 'transactionManager'
Eagerly caching bean 'transactionManager' to allow for resolving potential circular references
Returning cached instance of singleton bean 'entityManagerFactory'
Invoking afterPropertiesSet() on bean with name 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'transactionManager'
Returning cached instance of singleton bean 'org.springframework.aop.config.internalAutoProxyCreator'
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Creating shared instance of singleton bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Eagerly caching bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0' to allow for resolving potential circular references
Returning cached instance of singleton bean 'org.springframework.transaction.annotation.AnnotationTransactionAttributeSource#0'
Invoking afterPropertiesSet() on bean with name 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Finished creating instance of bean 'org.springframework.transaction.interceptor.TransactionInterceptor#0'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Returning cached instance of singleton bean 'org.springframework.context.annotation.ConfigurationClassPostProcessor.importAwareProcessor'
Unable to locate LifecycleProcessor with name 'lifecycleProcessor': using default [org.springframework.context.support.DefaultLifecycleProcessor@1470387]
Returning cached instance of singleton bean 'lifecycleProcessor'
Unable to locate MultipartResolver with name 'multipartResolver': no multipart request handling provided
Creating instance of bean 'org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver'
Unable to locate LocaleResolver with name 'localeResolver': using default [org.springframework.web.servlet.i18n.AcceptHeaderLocaleResolver@19b76bd]
Creating instance of bean 'org.springframework.web.servlet.theme.FixedThemeResolver'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.theme.FixedThemeResolver'
Unable to locate ThemeResolver with name 'themeResolver': using default [org.springframework.web.servlet.theme.FixedThemeResolver@1637d4d]
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#1'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#2'
Returning cached instance of singleton bean 'org.springframework.web.servlet.handler.SimpleUrlHandlerMapping#3'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.HttpRequestHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.method.annotation.ExceptionHandlerExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.annotation.ResponseStatusExceptionResolver#0'
Returning cached instance of singleton bean 'org.springframework.web.servlet.mvc.support.DefaultHandlerExceptionResolver#0'
Creating instance of bean 'org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator'
Unable to locate RequestToViewNameTranslator with name 'viewNameTranslator': using default [org.springframework.web.servlet.view.DefaultRequestToViewNameTranslator@1b82f06]
Returning cached instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Returning cached instance of singleton bean 'org.thymeleaf.spring3.view.ThymeleafViewResolver#0'
Creating instance of bean 'org.springframework.web.servlet.support.SessionFlashMapManager'
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Finished creating instance of bean 'org.springframework.web.servlet.support.SessionFlashMapManager'
Unable to locate FlashMapManager with name 'flashMapManager': using default [org.springframework.web.servlet.support.SessionFlashMapManager@1fca175]
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletConfigInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [servletContextInitParams]
Searching for key 'spring.liveBeansView.mbeanDomain' in [jndiProperties]
Looking up JNDI object with name [java:comp/env/spring.liveBeansView.mbeanDomain]
Converted JNDI name [java:comp/env/spring.liveBeansView.mbeanDomain] not found - trying original name [spring.liveBeansView.mbeanDomain]. javax.naming.NameNotFoundException; remaining name 'env/spring.liveBeansView.mbeanDomain'
Looking up JNDI object with name [spring.liveBeansView.mbeanDomain]
JNDI lookup for name [spring.liveBeansView.mbeanDomain] threw NamingException with message: null. Returning null.
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemProperties]
Searching for key 'spring.liveBeansView.mbeanDomain' in [systemEnvironment]
Could not find key 'spring.liveBeansView.mbeanDomain' in any property source. Returning [null]
Published WebApplicationContext of servlet 'dispatcher' as ServletContext attribute with name [org.springframework.web.servlet.FrameworkServlet.CONTEXT.dispatcher]
FrameworkServlet 'dispatcher': initialization completed in 1806 ms
Servlet 'dispatcher' configured successfully
DispatcherServlet with name 'dispatcher' processing GET request for [/competitor/competitor]
Looking up handler method for path /competitor/competitor
Returning handler method [public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'loginController'
Last-Modified value for [/competitor/competitor] is: -1
Returning cached instance of singleton bean 'org.springframework.transaction.config.internalTransactionAdvisor'
Rendering view [org.thymeleaf.spring3.view.ThymeleafView@3749e8] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/jqx.base.css]
Looking up handler method for path /css/jqx.base.css
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxcore.js]
Looking up handler method for path /js/jqxcore.js
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jquery-1.10.2.min.js]
Looking up handler method for path /js/jquery-1.10.2.min.js
Did not find handler method for [/js/jquery-1.10.2.min.js]
DispatcherServlet with name 'dispatcher' processing GET request for [/css/home.css]
Looking up handler method for path /css/home.css
Did not find handler method for [/js/jqxcore.js]
Did not find handler method for [/css/jqx.base.css]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxbuttons.js]
Looking up handler method for path /js/jqxbuttons.js
DispatcherServlet with name 'dispatcher' processing GET request for [/css/competitor.css]
Looking up handler method for path /css/competitor.css
Matching patterns for request [/js/jquery-1.10.2.min.js] are [/js/**]
Did not find handler method for [/js/jqxbuttons.js]
URI Template variables for request [/js/jquery-1.10.2.min.js] are {}
Matching patterns for request [/css/jqx.base.css] are [/css/**]
URI Template variables for request [/css/jqx.base.css] are {}
Did not find handler method for [/css/competitor.css]
Matching patterns for request [/css/competitor.css] are [/css/**]
URI Template variables for request [/css/competitor.css] are {}
Matching patterns for request [/js/jqxcore.js] are [/js/**]
URI Template variables for request [/js/jqxcore.js] are {}
Matching patterns for request [/js/jqxbuttons.js] are [/js/**]
URI Template variables for request [/js/jqxbuttons.js] are {}
Did not find handler method for [/css/home.css]
Matching patterns for request [/css/home.css] are [/css/**]
URI Template variables for request [/css/home.css] are {}
Mapping [/css/competitor.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@3ea236] and 1 interceptor
Mapping [/js/jqxcore.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@781f0d] and 1 interceptor
Mapping [/css/jqx.base.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@3ea236] and 1 interceptor
Mapping [/js/jquery-1.10.2.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@781f0d] and 1 interceptor
Mapping [/js/jqxbuttons.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@781f0d] and 1 interceptor
Mapping [/css/home.css] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@3ea236] and 1 interceptor
Last-Modified value for [/js/jqxcore.js] is: -1
Last-Modified value for [/js/jquery-1.10.2.min.js] is: -1
Last-Modified value for [/css/jqx.base.css] is: -1
Last-Modified value for [/js/jqxbuttons.js] is: -1
Last-Modified value for [/css/competitor.css] is: -1
Trying relative path [jqxbuttons.js] against base location: ServletContext resource [/js/]
Trying relative path [jqx.base.css] against base location: ServletContext resource [/css/]
Trying relative path [jqxcore.js] against base location: ServletContext resource [/js/]
Trying relative path [jquery-1.10.2.min.js] against base location: ServletContext resource [/js/]
Last-Modified value for [/css/home.css] is: -1
Trying relative path [competitor.css] against base location: ServletContext resource [/css/]
Trying relative path [home.css] against base location: ServletContext resource [/css/]
Found matching resource: ServletContext resource [/js/jqxbuttons.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxbuttons.js]
Found matching resource: ServletContext resource [/css/competitor.css]
Determined media type 'text/css' for ServletContext resource [/css/competitor.css]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxlistbox.js]
Looking up handler method for path /js/jqxlistbox.js
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxscrollbar.js]
Looking up handler method for path /js/jqxscrollbar.js
Did not find handler method for [/js/jqxscrollbar.js]
Matching patterns for request [/js/jqxscrollbar.js] are [/js/**]
URI Template variables for request [/js/jqxscrollbar.js] are {}
Mapping [/js/jqxscrollbar.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@781f0d] and 1 interceptor
Last-Modified value for [/js/jqxscrollbar.js] is: -1
Trying relative path [jqxscrollbar.js] against base location: ServletContext resource [/js/]
Did not find handler method for [/js/jqxlistbox.js]
Matching patterns for request [/js/jqxlistbox.js] are [/js/**]
URI Template variables for request [/js/jqxlistbox.js] are {}
Mapping [/js/jqxlistbox.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@781f0d] and 1 interceptor
Last-Modified value for [/js/jqxlistbox.js] is: -1
Trying relative path [jqxlistbox.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/css/home.css]
Determined media type 'text/css' for ServletContext resource [/css/home.css]
Found matching resource: ServletContext resource [/js/jqxcore.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxcore.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jqxcombobox.js]
Looking up handler method for path /js/jqxcombobox.js
Did not find handler method for [/js/jqxcombobox.js]
Matching patterns for request [/js/jqxcombobox.js] are [/js/**]
URI Template variables for request [/js/jqxcombobox.js] are {}
Mapping [/js/jqxcombobox.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@781f0d] and 1 interceptor
Last-Modified value for [/js/jqxcombobox.js] is: -1
Trying relative path [jqxcombobox.js] against base location: ServletContext resource [/js/]
Found matching resource: ServletContext resource [/js/jquery-1.10.2.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jquery-1.10.2.min.js]
Found matching resource: ServletContext resource [/css/jqx.base.css]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Determined media type 'text/css' for ServletContext resource [/css/jqx.base.css]
DispatcherServlet with name 'dispatcher' processing GET request for [/js/ProgressBar.js]
Looking up handler method for path /js/ProgressBar.js
Did not find handler method for [/js/ProgressBar.js]
Matching patterns for request [/js/ProgressBar.js] are [/js/**]
URI Template variables for request [/js/ProgressBar.js] are {}
Mapping [/js/ProgressBar.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@781f0d] and 1 interceptor
Last-Modified value for [/js/ProgressBar.js] is: -1
Trying relative path [ProgressBar.js] against base location: ServletContext resource [/js/]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/js/jquery.jqplot.min.js]
Looking up handler method for path /js/jquery.jqplot.min.js
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Did not find handler method for [/js/jquery.jqplot.min.js]
Matching patterns for request [/js/jquery.jqplot.min.js] are [/js/**]
URI Template variables for request [/js/jquery.jqplot.min.js] are {}
Mapping [/js/jquery.jqplot.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@781f0d] and 1 interceptor
Last-Modified value for [/js/jquery.jqplot.min.js] is: -1
Trying relative path [jquery.jqplot.min.js] against base location: ServletContext resource [/js/]
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.pieRenderer.min.js]
Looking up handler method for path /plugins/jqplot.pieRenderer.min.js
Did not find handler method for [/plugins/jqplot.pieRenderer.min.js]
Matching patterns for request [/plugins/jqplot.pieRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.pieRenderer.min.js] are {}
Mapping [/plugins/jqplot.pieRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@d68337] and 1 interceptor
Last-Modified value for [/plugins/jqplot.pieRenderer.min.js] is: -1
Trying relative path [jqplot.pieRenderer.min.js] against base location: ServletContext resource [/plugins/]
Found matching resource: ServletContext resource [/js/jqxcombobox.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxcombobox.js]
Found matching resource: ServletContext resource [/js/jqxscrollbar.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxscrollbar.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.donutRenderer.min.js]
Looking up handler method for path /plugins/jqplot.donutRenderer.min.js
Did not find handler method for [/plugins/jqplot.donutRenderer.min.js]
Matching patterns for request [/plugins/jqplot.donutRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.donutRenderer.min.js] are {}
Mapping [/plugins/jqplot.donutRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@d68337] and 1 interceptor
Last-Modified value for [/plugins/jqplot.donutRenderer.min.js] is: -1
Trying relative path [jqplot.donutRenderer.min.js] against base location: ServletContext resource [/plugins/]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/js/jqxlistbox.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jqxlistbox.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.dateAxisRenderer.min.js]
Looking up handler method for path /plugins/jqplot.dateAxisRenderer.min.js
Did not find handler method for [/plugins/jqplot.dateAxisRenderer.min.js]
Matching patterns for request [/plugins/jqplot.dateAxisRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.dateAxisRenderer.min.js] are {}
Mapping [/plugins/jqplot.dateAxisRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@d68337] and 1 interceptor
Last-Modified value for [/plugins/jqplot.dateAxisRenderer.min.js] is: -1
Trying relative path [jqplot.dateAxisRenderer.min.js] against base location: ServletContext resource [/plugins/]
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.canvasTextRenderer.min.js]
Looking up handler method for path /plugins/jqplot.canvasTextRenderer.min.js
Did not find handler method for [/plugins/jqplot.canvasTextRenderer.min.js]
Found matching resource: ServletContext resource [/js/ProgressBar.js]
Matching patterns for request [/plugins/jqplot.canvasTextRenderer.min.js] are [/plugins/**]
Determined media type 'application/x-javascript' for ServletContext resource [/js/ProgressBar.js]
URI Template variables for request [/plugins/jqplot.canvasTextRenderer.min.js] are {}
Mapping [/plugins/jqplot.canvasTextRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@d68337] and 1 interceptor
Last-Modified value for [/plugins/jqplot.canvasTextRenderer.min.js] is: -1
Trying relative path [jqplot.canvasTextRenderer.min.js] against base location: ServletContext resource [/plugins/]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/plugins/jqplot.canvasTextRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.canvasTextRenderer.min.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/plugins/jqplot.donutRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.donutRenderer.min.js]
Found matching resource: ServletContext resource [/plugins/jqplot.dateAxisRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.dateAxisRenderer.min.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Successfully completed request
Found matching resource: ServletContext resource [/plugins/jqplot.pieRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.pieRenderer.min.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/js/jquery.jqplot.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/js/jquery.jqplot.min.js]
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.canvasAxisTickRenderer.min.js]
Looking up handler method for path /plugins/jqplot.canvasAxisTickRenderer.min.js
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.categoryAxisRenderer.min.js]
Looking up handler method for path /plugins/jqplot.categoryAxisRenderer.min.js
DispatcherServlet with name 'dispatcher' processing GET request for [/plugins/jqplot.barRenderer.min.js]
Looking up handler method for path /plugins/jqplot.barRenderer.min.js
Did not find handler method for [/plugins/jqplot.canvasAxisTickRenderer.min.js]
Did not find handler method for [/plugins/jqplot.categoryAxisRenderer.min.js]
Matching patterns for request [/plugins/jqplot.canvasAxisTickRenderer.min.js] are [/plugins/**]
Matching patterns for request [/plugins/jqplot.categoryAxisRenderer.min.js] are [/plugins/**]
Did not find handler method for [/plugins/jqplot.barRenderer.min.js]
URI Template variables for request [/plugins/jqplot.canvasAxisTickRenderer.min.js] are {}
Matching patterns for request [/plugins/jqplot.barRenderer.min.js] are [/plugins/**]
URI Template variables for request [/plugins/jqplot.categoryAxisRenderer.min.js] are {}
Mapping [/plugins/jqplot.categoryAxisRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@d68337] and 1 interceptor
URI Template variables for request [/plugins/jqplot.barRenderer.min.js] are {}
Mapping [/plugins/jqplot.barRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@d68337] and 1 interceptor
Last-Modified value for [/plugins/jqplot.barRenderer.min.js] is: -1
Mapping [/plugins/jqplot.canvasAxisTickRenderer.min.js] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@d68337] and 1 interceptor
Trying relative path [jqplot.barRenderer.min.js] against base location: ServletContext resource [/plugins/]
Last-Modified value for [/plugins/jqplot.categoryAxisRenderer.min.js] is: -1
Trying relative path [jqplot.categoryAxisRenderer.min.js] against base location: ServletContext resource [/plugins/]
Last-Modified value for [/plugins/jqplot.canvasAxisTickRenderer.min.js] is: -1
Trying relative path [jqplot.canvasAxisTickRenderer.min.js] against base location: ServletContext resource [/plugins/]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/img/tp_ebay_transparent.png]
DispatcherServlet with name 'dispatcher' processing GET request for [/img/tp_amazon_transparent.png]
Looking up handler method for path /img/tp_amazon_transparent.png
Looking up handler method for path /img/tp_ebay_transparent.png
Did not find handler method for [/img/tp_amazon_transparent.png]
Did not find handler method for [/img/tp_ebay_transparent.png]
Matching patterns for request [/img/tp_ebay_transparent.png] are [/img/**]
Matching patterns for request [/img/tp_amazon_transparent.png] are [/img/**]
URI Template variables for request [/img/tp_ebay_transparent.png] are {}
Mapping [/img/tp_ebay_transparent.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@10b3d81] and 1 interceptor
URI Template variables for request [/img/tp_amazon_transparent.png] are {}
Mapping [/img/tp_amazon_transparent.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@10b3d81] and 1 interceptor
Last-Modified value for [/img/tp_amazon_transparent.png] is: -1
Last-Modified value for [/img/tp_ebay_transparent.png] is: -1
Trying relative path [tp_amazon_transparent.png] against base location: ServletContext resource [/img/]
Trying relative path [tp_ebay_transparent.png] against base location: ServletContext resource [/img/]
Found matching resource: ServletContext resource [/plugins/jqplot.barRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.barRenderer.min.js]
Found matching resource: ServletContext resource [/plugins/jqplot.categoryAxisRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.categoryAxisRenderer.min.js]
Found matching resource: ServletContext resource [/plugins/jqplot.canvasAxisTickRenderer.min.js]
Determined media type 'application/x-javascript' for ServletContext resource [/plugins/jqplot.canvasAxisTickRenderer.min.js]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/img/tp_amazon_transparent.png]
Determined media type 'image/png' for ServletContext resource [/img/tp_amazon_transparent.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/img/logo_new.png]
Looking up handler method for path /img/logo_new.png
Did not find handler method for [/img/logo_new.png]
Matching patterns for request [/img/logo_new.png] are [/img/**]
URI Template variables for request [/img/logo_new.png] are {}
Mapping [/img/logo_new.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@10b3d81] and 1 interceptor
Last-Modified value for [/img/logo_new.png] is: -1
Trying relative path [logo_new.png] against base location: ServletContext resource [/img/]
Found matching resource: ServletContext resource [/img/logo_new.png]
Determined media type 'image/png' for ServletContext resource [/img/logo_new.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/img/tp_ebay_transparent.png]
Determined media type 'image/png' for ServletContext resource [/img/tp_ebay_transparent.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/undefined]
Looking up handler method for path /css/undefined
DispatcherServlet with name 'dispatcher' processing GET request for [/img/sprit.png]
Looking up handler method for path /img/sprit.png
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.woff]
Looking up handler method for path /css/fontawesome-webfont.woff
DispatcherServlet with name 'dispatcher' processing GET request for [/img/breadcrumb.png]
Looking up handler method for path /img/breadcrumb.png
Did not find handler method for [/img/sprit.png]
Did not find handler method for [/css/undefined]
Did not find handler method for [/img/breadcrumb.png]
Matching patterns for request [/img/sprit.png] are [/img/**]
Did not find handler method for [/css/fontawesome-webfont.woff]
DispatcherServlet with name 'dispatcher' processing GET request for [/img/arrow-drop-down.png]
Matching patterns for request [/css/fontawesome-webfont.woff] are [/css/**]
URI Template variables for request [/img/sprit.png] are {}
Mapping [/img/sprit.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@10b3d81] and 1 interceptor
Matching patterns for request [/img/breadcrumb.png] are [/img/**]
Matching patterns for request [/css/undefined] are [/css/**]
URI Template variables for request [/img/breadcrumb.png] are {}
Last-Modified value for [/img/sprit.png] is: -1
URI Template variables for request [/css/fontawesome-webfont.woff] are {}
Looking up handler method for path /img/arrow-drop-down.png
Mapping [/css/fontawesome-webfont.woff] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@3ea236] and 1 interceptor
Trying relative path [sprit.png] against base location: ServletContext resource [/img/]
Did not find handler method for [/img/arrow-drop-down.png]
Mapping [/img/breadcrumb.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@10b3d81] and 1 interceptor
URI Template variables for request [/css/undefined] are {}
Last-Modified value for [/img/breadcrumb.png] is: -1
Matching patterns for request [/img/arrow-drop-down.png] are [/img/**]
Last-Modified value for [/css/fontawesome-webfont.woff] is: -1
URI Template variables for request [/img/arrow-drop-down.png] are {}
Mapping [/img/arrow-drop-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@10b3d81] and 1 interceptor
Last-Modified value for [/img/arrow-drop-down.png] is: -1
Trying relative path [arrow-drop-down.png] against base location: ServletContext resource [/img/]
Trying relative path [breadcrumb.png] against base location: ServletContext resource [/img/]
Mapping [/css/undefined] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@3ea236] and 1 interceptor
Last-Modified value for [/css/undefined] is: -1
Trying relative path [fontawesome-webfont.woff] against base location: ServletContext resource [/css/]
Trying relative path [undefined] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
No matching resource found - returning 404
Found matching resource: ServletContext resource [/img/sprit.png]
Determined media type 'image/png' for ServletContext resource [/img/sprit.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/img/arrow-drop-down.png]
Determined media type 'image/png' for ServletContext resource [/img/arrow-drop-down.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
Found matching resource: ServletContext resource [/img/breadcrumb.png]
Determined media type 'image/png' for ServletContext resource [/img/breadcrumb.png]
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/images/icon-down.png]
Looking up handler method for path /css/images/icon-down.png
Did not find handler method for [/css/images/icon-down.png]
Matching patterns for request [/css/images/icon-down.png] are [/css/**]
URI Template variables for request [/css/images/icon-down.png] are {}
Mapping [/css/images/icon-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@3ea236] and 1 interceptor
Last-Modified value for [/css/images/icon-down.png] is: -1
Trying relative path [images/icon-down.png] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/fontawesome-webfont.ttf]
Looking up handler method for path /css/fontawesome-webfont.ttf
Did not find handler method for [/css/fontawesome-webfont.ttf]
Matching patterns for request [/css/fontawesome-webfont.ttf] are [/css/**]
URI Template variables for request [/css/fontawesome-webfont.ttf] are {}
Mapping [/css/fontawesome-webfont.ttf] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@3ea236] and 1 interceptor
Last-Modified value for [/css/fontawesome-webfont.ttf] is: -1
Trying relative path [fontawesome-webfont.ttf] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/favicon.ico]
Looking up handler method for path /favicon.ico
Did not find handler method for [/favicon.ico]
No mapping found for HTTP request with URI [/favicon.ico] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/competitor/competitor]
Looking up handler method for path /competitor/competitor
Returning handler method [public java.lang.String com.ebay.controller.LoginController.category(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
Returning cached instance of singleton bean 'loginController'
Last-Modified value for [/competitor/competitor] is: -1
Rendering view [org.thymeleaf.spring3.view.ThymeleafView@3749e8] in DispatcherServlet with name 'dispatcher'
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/css/images/icon-down.png]
Looking up handler method for path /css/images/icon-down.png
Did not find handler method for [/css/images/icon-down.png]
Matching patterns for request [/css/images/icon-down.png] are [/css/**]
URI Template variables for request [/css/images/icon-down.png] are {}
Mapping [/css/images/icon-down.png] to HandlerExecutionChain with handler [org.springframework.web.servlet.resource.ResourceHttpRequestHandler@3ea236] and 1 interceptor
Last-Modified value for [/css/images/icon-down.png] is: -1
Trying relative path [images/icon-down.png] against base location: ServletContext resource [/css/]
No matching resource found - returning 404
Null ModelAndView returned to DispatcherServlet with name 'dispatcher': assuming HandlerAdapter completed request handling
Successfully completed request
DispatcherServlet with name 'dispatcher' processing GET request for [/searchCompetitor]
Looking up handler method for path /searchCompetitor
Returning handler method [public com.ebay.domain.seller.Seller com.ebay.controller.CompetitorController.selectCompetitor(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse,org.springframework.ui.Model)]
